import e,{createContext as t,useReducer as i,useEffect as n,useState as s,forwardRef as r,useContext as o,useRef as l,useCallback as a,useImperativeHandle as h}from"react";import{python as c}from"@codemirror/lang-python";import d from"@uiw/react-codemirror";import u,{useTheme as f,styled as g,ThemeProvider as p}from"styled-components";import{HighlightStyle as m,syntaxHighlighting as b}from"@codemirror/language";import{RangeSet as v,MapMode as w,EditorSelection as y,EditorState as x,Transaction as k,Prec as S,Facet as C,StateEffect as A,RangeValue as M,ChangeSet as T,findClusterBreak as O,findColumn as N,Annotation as D,Text as E,CharCategory as B}from"@codemirror/state";const L=(e,t)=>{let i=t.toLowerCase(),n="500";if(i.includes("-")){const e=i.split("-");null!==/\d{1,3}/gm.exec(e[e.length-1])&&(n=e.pop(),i=e.join("-"))}if(void 0!==e.colors[i]){return e.colors[i][n]}},P=(e,t)=>{const i={};for(const n in e.colors[t]){const s=`${t}-${n}`,r=L(e,s);void 0!==r&&(i[s]=r)}return i},R=(e,t=null,i=null)=>n=>{const s=n.theme;void 0!==n.block&&(n=n.block);let r=s[e];const o=t??n.variant??"default";r instanceof Object&&(r=r[o]);const l=!0===i||!0===n.selected?"selected":"unselected";if(r instanceof Object&&(r=r[l]),"string"==typeof r){const e=L(s,r);if(void 0!==e)return e}return r};function H(e,t){const i={...e};for(const e in t)t.hasOwnProperty(e)&&("object"!=typeof t[e]||null===t[e]||Array.isArray(t[e])?i[e]=t[e]:i[e]=H(i[e]??{},t[e]));return i}const W=(e,t)=>H(e,t),V=(...e)=>{let t=[];return e.forEach((e=>{"string"==typeof e?t.push(e):Array.isArray(e)?t=t.concat(e):e instanceof Set?t=t.concat(Array.from(e)):"function"==typeof e&&(t=t.concat(e()))})),t.join(" ")};class z{uuid;classNames=new Set;iteration;variant;theme;constructor(e){this.uuid=e}getClassNames(e){return Array.from(this.classNames)}}class F extends z{selected=!1;selectionIndex=null;constructor(e){super(e)}getClassNames(e){const t=new Set(super.getClassNames(e));return null!==this.selectionIndex&&t.add("selectable"),e===this.selectionIndex&&t.add("selected"),Array.from(t)}}class _ extends F{spans=[]}class I extends _{language=null}class $ extends F{children=[]}class q extends ${name;collapsed=!0;icon;constructor(e,t){super(e),this.name=t}}class K extends q{}class j extends K{checked=!1}class G extends z{items=[]}class Y extends G{items=[]}class U extends F{uuid;content;datatype;constructor(e,t){super(e),this.uuid=e,this.content=t}}class X extends F{values=[];isHeader}class Z extends F{rows=[]}class J extends z{page;children=[]}let Q=class extends J{name;icon};class ee{visit(e){}visitContent(e){}visitList(e){}visitCollapsible(e){}visitParagraph(e){}visitSelectable(e){}visitSpan(e){}visitTable(e){}visitTableRow(e){}visitTree(e){}leave(e){}leaveContent(e){}leaveList(e){}leaveCollapsible(e){}leaveParagraph(e){}leaveSelectable(e){}leaveSpan(e){}leaveTable(e){}leaveTableRow(e){}leaveTree(e){}traverse(e){this.visit(e),e instanceof G?this._traverseList(e):e instanceof $?this._traverseContent(e):e instanceof _?this._traverseParagraph(e):e instanceof F?this._traverseSelectable(e):e instanceof Z?this._traverseTable(e):e instanceof X?this._traverseTableRow(e):e instanceof Q&&this._traverseTree(e),this.leave(e)}_traverseContent(e){this.visitContent(e),e.children.forEach((e=>{this.traverse(e)})),this.leaveContent(e)}_traverseList(e){this.visitList(e),e.items.forEach((e=>{this.traverse(e)})),this.leaveList(e)}_traverseCollapsible(e){this.visitCollapsible(e),e.children.forEach((e=>{this.traverse(e)})),this.leaveCollapsible(e)}_traverseParagraph(e){this.visitParagraph(e),e.spans.forEach((e=>{this.traverse(e)})),this.leaveParagraph(e)}_traverseSelectable(e){this.visitSelectable(e),this.leaveSelectable(e)}_traverseSpan(e){this.visitSpan(e),this.leaveSpan(e)}_traverseTable(e){this.visitTable(e),e.rows.forEach((e=>{this.traverse(e)})),this.leaveTable(e)}_traverseTableRow(e){this.visitTableRow(e),e.values.forEach((e=>{this.traverse(e)})),this.leaveTableRow(e)}_traverseTree(e){this.visitTree(e),e.children.forEach((e=>{this.traverse(e)})),this.leaveTree(e)}}class te extends ee{visible=[];currentIteration=[];visit(e){const t=(e.iteration??1)===this.currentIteration[this.currentIteration.length-1];this.visible[this.visible.length-1]=t}visitTree(e){this.currentIteration.push(e.page??1),this.visible.push(!0)}leaveTree(e){this.currentIteration.pop(),this.visible.pop()}isVisible(){return this.visible.every((e=>e))}}class ie extends te{selectedIndex=-1;selected=[];run(e,t=-1){return this.selectedIndex=t,this.selected=[],this.traverse(e),this.selected}visitContent(e){this.visitSelectable(e)}visitParagraph(e){this.visitSelectable(e)}visitSelectable(e){this.isVisible()&&(e.selected||null!==e.selectionIndex&&e.selectionIndex<=this.selectedIndex)&&this.selected.push(e)}}const ne=t({factory:void 0,setFactory:e=>{}}),se=t({darkMode:!1,setDarkMode:e=>{}});class re{pages=[];numPages=[];static copy(e){const t=new re;return t.pages=e.pages.slice(),t.numPages=e.numPages.slice(),t}getPage(e){return e>this.pages.length?1:this.pages[e-1]}getNumPages(e){return e>this.numPages.length?1:this.numPages[e-1]}}function oe(e,t,i){let n=e.pages;return t.level>n.length&&(n=n.concat(Array(t.level-n.length).fill(1))),n.slice(0,t.level-1).concat([i]).concat(n.slice(t.level))}const le=(e,t)=>{const i=re.copy(e);switch(t.type){case"register":i.pages=oe(e,t,1),i.numPages=function(e,t,i){let n=e.numPages;return t.level>n.length&&(n=n.concat(Array(t.level-n.length).fill(1))),n.slice(0,t.level-1).concat([i]).concat(n.slice(t.level))}(e,t,t.numPages);break;case"start":i.pages=oe(e,t,1);break;case"end":i.pages=oe(e,t,Math.max(1,e.getNumPages(t.level)));break;case"previous":i.pages=oe(e,t,Math.max(1,e.getPage(t.level)-1));break;case"next":i.pages=oe(e,t,Math.min(e.getNumPages(t.level),e.getPage(t.level)+1));break;case"goto":i.pages=oe(e,t,Math.min(e.getNumPages(t.level),Math.max(1,t.page)));break;default:throw new Error("Invalid action")}return i},ae=t(null),he=t(null),ce=({pages:t,numPages:s,onChange:r,children:o})=>{const l=new re;l.pages=t,l.numPages=s;const[a,h]=i(le,l);return n((()=>{void 0!==r&&r(a)}),[a,r]),e.createElement(ae.Provider,{value:a},e.createElement(he.Provider,{value:h},o))},de=()=>{const[e,t]=s(!1);return n((()=>{const e=window.matchMedia("(prefers-color-scheme: dark)");t(e.matches);const i=()=>{t(e.matches)};return e.addEventListener("change",i),()=>{e.removeEventListener("change",i)}}),[]),[e,t]},ue=e=>{const[t,i]=s(!1);return n((()=>{let t={theme:"light"};void 0!==e.store?t=e.store.globals.globals:void 0!==e.globals&&(t=e.globals),"dark"===t.theme?i(!0):i(!1)}),[e]),[t,i]},fe={colors:{gray:{1:"#fcfcfc",2:"#f9f9f9",3:"#f0f0f0",4:"#e8e8e8",5:"#e0e0e0",6:"#d9d9d9",7:"#cecece",8:"#bbbbbb",9:"#8d8d8d",10:"#838383",11:"#646464",12:"#202020"},purple:{1:"#fdfcfe",2:"#faf8ff",3:"#f4f0fe",4:"#ebe4ff",5:"#e1d9ff",6:"#d4cafe",7:"#c2b5f5",8:"#aa99ec",9:"#6e56cf",10:"#654dc4",11:"#6550b9",12:"#2f265f"},blue:{1:"#fbfdff",2:"#f4faff",3:"#e6f4fe",4:"#d5efff",5:"#c6d8ea",6:"#a0c1e3",7:"#8ec8f6",8:"#5eb1ef",9:"#0090ff",10:"#0588f0",11:"#0d74ce",12:"#113264"},green:{1:"#fbfefb",2:"#f5fbf5",3:"#e9f6e9",4:"#daf1db",5:"#c9e8ca",6:"#b2ddb5",7:"#94ce9a",8:"#65ba74",9:"#46a758",10:"#3e9b4f",11:"#2a7e3b",12:"#203c25"},yellow:{1:"#fefdfb",2:"#fefbe9",3:"#ffebc2",4:"#ffe19c",5:"#f8d584",6:"#efc768",7:"#e1b858",8:"#e2a336",9:"#ffc53d",10:"#ffba18",11:"#ab6400",12:"#4f3422"},orange:{1:"#fefcfb",2:"#fff7ed",3:"#ffefd6",4:"#ffdfb5",5:"#ffd19a",6:"#ffc182",7:"#f5ae73",8:"#ec9455",9:"#f76b15",10:"#ef5f00",11:"#cc4e00",12:"#582d1d"},red:{1:"#fffcfc",2:"#fff7f7",3:"#feebec",4:"#ffdbdc",5:"#ffcdce",6:"#fdbdbe",7:"#f4a9aa",8:"#eb8e90",9:"#e5484d",10:"#dc3e42",11:"#ce2c31",12:"#641723"},highlight:{1:"rgba(255, 255, 255, 0.05)",2:"rgba(255, 255, 255, 0.1)",3:"rgba(255, 255, 255, 0.15)",4:"rgba(255, 255, 255, 0.2)",5:"rgba(255, 255, 255, 0.3)",6:"rgba(255, 255, 255, 0.4)",7:"rgba(255, 255, 255, 0.5)",8:"rgba(255, 255, 255, 0.6)",9:"rgba(255, 255, 255, 0.7)",10:"rgba(255, 255, 255, 0.8)",11:"rgba(255, 255, 255, 0.9)",12:"rgba(255, 255, 255, 0.95)"},shadow:{1:"rgba(0, 0, 0, 0.05)",2:"rgba(0, 0, 0, 0.1)",3:"rgba(0, 0, 0, 0.15)",4:"rgba(0, 0, 0, 0.2)",5:"rgba(0, 0, 0, 0.3)",6:"rgba(0, 0, 0, 0.4)",7:"rgba(0, 0, 0, 0.5)",8:"rgba(0, 0, 0, 0.6)",9:"rgba(0, 0, 0, 0.7)",10:"rgba(0, 0, 0, 0.8)",11:"rgba(0, 0, 0, 0.9)",12:"rgba(0, 0, 0, 0.95)"}},icons:{left:{20:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="M576-240 336-480l240-240 51 51-189 189 189 189-51 51Z"/></svg>'},right:{20:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="M522-480 333-669l51-51 240 240-240 240-51-51 189-189Z"/></svg>',24:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="m535.847-480-189-189L384-706.153 610.153-480 384-253.847 346.847-291l189-189Z"/></svg>'},start:{20:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="M288-288v-384h72v384h-72Zm384 0L480-480l192-192 51 51-141 141 141 141-51 51Z"/></svg>'},end:{20:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="m336-288-51-51 141-141-141-141 51-51 192 192-192 192Zm312 0v-384h72v384h-72Z"/></svg>'},search:{20:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="M765-144 526-383q-30 22-65.792 34.5T384.035-336Q284-336 214-406t-70-170q0-100 70-170t170-70q100 0 170 70t70 170.035q0 40.381-12.5 76.173T577-434l239 239-51 51ZM384-408q70 0 119-49t49-119q0-70-49-119t-119-49q-70 0-119 49t-49 119q0 70 49 119t119 49Z"/></svg>',24:'<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path fill="rgb(0 0 0)" d="M784-120 532-372q-30 24-69 38t-83 14q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l252 252-56 56ZM380-400q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>'},text:{12:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="M164.001-278.616v-51.999h391.998v51.999H164.001Zm0-175.385v-51.998h631.998v51.998H164.001Zm0-175.384v-51.999h631.998v51.999H164.001Z"/></svg>'},number:{12:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="m286.694-210.463 30-120H174.387l12.999-51.998h142.308l42.769-171.078H218.156l12.999-51.998h154.308l36-144h51.229l-36 144h149.385l36-144h51.229l-36 144h148.307l-12.999 51.998H624.306l-42.769 171.078h160.307l-12.999 51.998H568.537l-30 120h-51.229l30-120H367.923l-30 120h-51.229Zm94.229-171.998h149.385l42.769-171.078H423.692l-42.769 171.078Z"/></svg>'},date:{12:'<svg xmlns="http://www.w3.org/2000/svg" height="20" viewBox="0 -960 960 960" width="20"><path fill="rgb(0 0 0)" d="M228.309-116.001q-27.008 0-45.658-19-18.65-19-18.65-45.308v-503.382q0-26.308 18.65-45.308t45.658-19h87.385v-100.615h53.537v100.615h223.076v-100.615h51.999v100.615h87.385q27.008 0 45.658 19 18.65 19 18.65 45.308v503.382q0 26.308-18.65 45.308t-45.658 19H228.309Zm0-51.999h503.382q4.616 0 8.463-3.846 3.846-3.847 3.846-8.463v-335.382H216v335.382q0 4.616 3.846 8.463 3.847 3.846 8.463 3.846ZM216-567.69h528v-116.001q0-4.616-3.846-8.463-3.847-3.846-8.463-3.846H228.309q-4.616 0-8.463 3.846-3.846 3.847-3.846 8.463v116.001Zm0 0V-696v128.31Z"/></svg>'}},fontFamily:{default:'"Inter", Helvetica, Arial, sans-serif'},spanFontFamily:{default:"inherit"},fontSize:{default:"11pt"},spanFontSize:{default:"inherit"},fontWeight:{default:400},backgroundColor:"#eee",contentBackgroundColor:{default:{unselected:"white",selected:"yellow-3"}},spanBackgroundColor:{default:{unselected:"transparent",selected:"yellow-4"}},buttonBgColor:{default:"shadow-2"},buttonHoverBgColor:{default:"shadow-4"},buttonPulseBgColor:{default:"shadow-5"},textColor:{default:{unselected:"gray-12",selected:"gray-12"}},spanTextColor:{default:{unselected:"inherit",selected:"gray-12"}},secondaryTextColor:{default:"gray-11"},fadedTextColor:{default:"shadow-5"},buttonTextColor:{default:"shadow-8"},borderColor:{default:{unselected:"gray-6",selected:"yellow-5"}},hoverColor:{default:"shadow-1"},treeColor:{default:"gray-7"},selectedTreeColor:{default:"yellow-6"},spanIcon:{},spanFontWeight:{default:"inherit",label:"bold"},spanPadding:{default:"0"},spanBorderRadius:{default:"0"},codeBackgroundColor:{default:"gray-12"},codeFunctionColor:{default:"yellow-10"},codeStringColor:{default:"orange-8"},codeTextColor:{default:"blue-4"},codeConstantColor:{default:"green-10"},codeKeywordColor:{default:"purple-8"},codePanelBackgroundColor:{default:"black"},collapsibleTextColor:{default:"gray-12"},collapsibleFontFamily:{default:'"Inter", Helvetica, Arial, sans-serif'},collaspibleFontSize:{default:"inherit"},collapsibleFontWeight:{default:"inherit"},collapsiblePadding:{default:"4px 16px"},collapsibleIcon:{default:""},collapsibleTitlePadding:{default:"0 0 0 22px"}},ge=W(fe,{fontFamily:{default:'"Inter", Helvetica, Arial, sans-serif'},fontWeight:{default:300},contentBackgroundColor:{default:{unselected:"blue-2",selected:"blue-4"}},spanBackgroundColor:{default:{unselected:"transparent",selected:"blue-7"}},textColor:{default:{unselected:"gray-12",selected:"gray-12"}},spanTextColor:{default:{unselected:"inherit",selected:"gray-12"}},borderColor:{default:{unselected:"blue-5",selected:"blue-6"}}}),pe=W(ge,{contentBackgroundColor:{default:{unselected:"gray-12",selected:"blue-3"}},spanBackgroundColor:{default:{unselected:"transparent",selected:"blue-3"}},textColor:{default:{unselected:"blue-7",selected:"blue-5"}},spanTextColor:{default:{unselected:"inherit",selected:"blue-5"}},borderColor:{default:{unselected:"blue-4",selected:"blue-4"}}}),me=W(fe,{colors:{gray:{1:"#111113",2:"#18191b",3:"#212225",4:"#272a2d",5:"#2e3135",6:"#363a3f",7:"#43484e",8:"#5a6169",9:"#696e77",10:"#777b84",11:"#b0b4ba",12:"#edeef0"},purple:{1:"#14121f",2:"#1b1525",3:"#291f43",4:"#33255b",5:"#3c2e69",6:"#473876",7:"#56468b",8:"#6958ad",9:"#6e56cf",10:"#7d66d9",11:"#baa7ff",12:"#e2ddfe"},blue:{1:"#0d1520",2:"#111927",3:"#0d2847",4:"#334059",5:"#4a5f79",6:"#104d87",7:"#2f62a1",8:"#2870bd",9:"#0090ff",10:"#3b9eff",11:"#70b8ff",12:"#b3d7f8"},green:{1:"#0e1511",2:"#141a15",3:"#1b2a1e",4:"#1d3a24",5:"#25482d",6:"#2d5736",7:"#366740",8:"#3e7949",9:"#46a758",10:"#53b365",11:"#71d083",12:"#c2f0c2"},yellow:{1:"#16120c",2:"#1d180f",3:"#302008",4:"#3f2700",5:"#49453d",6:"#554624",7:"#6d6651",8:"#897a56",9:"#fdba1f",10:"#ffc83b",11:"#ffdc91",12:"#ffefbe"},orange:{1:"#17120e",2:"#1e160f",3:"#331e0b",4:"#462100",5:"#562800",6:"#66350c",7:"#7e451d",8:"#a35829",9:"#f76b15",10:"#ff801f",11:"#ffa057",12:"#ffe0c2"},red:{1:"#191111",2:"#201314",3:"#3b1219",4:"#500f1c",5:"#611623",6:"#72232d",7:"#8c333a",8:"#b54548",9:"#e5484d",10:"#ec5d5e",11:"#ff9592",12:"#ffd1d9"},highlight:{1:"rgba(113, 184, 255, 0.05)",2:"rgba(113, 184, 255, 0.1)",3:"rgba(113, 184, 255, 0.15)",4:"rgba(113, 184, 255, 0.2)",5:"rgba(113, 184, 255, 0.3)",6:"rgba(113, 184, 255, 0.4)",7:"rgba(113, 184, 255, 0.5)",8:"rgba(113, 184, 255, 0.6)",9:"rgba(113, 184, 255, 0.7)",10:"rgba(113, 184, 255, 0.8)",11:"rgba(113, 184, 255, 0.9)",12:"rgba(113, 184, 255, 0.95)"}},backgroundColor:"#2f3237",contentBackgroundColor:{default:{unselected:"gray-4",selected:"yellow-5"}},spanBackgroundColor:{default:{unselected:"transparent",selected:"yellow-6"}},buttonBgColor:{default:"highlight-2"},buttonHoverBgColor:{default:"highlight-4"},buttonPulseBgColor:{default:"highlight-5"},codeBackgroundColor:{default:"gray-5"},textColor:{default:{unselected:"gray-12",selected:"yellow-11"}},spanTextColor:{default:{unselected:"inherit",selected:"yellow-11"}},fadedTextColor:{default:"highlight-7"},buttonTextColor:{default:"highlight-10"},borderColor:{default:{unselected:"gray-7",selected:"yellow-7"}},hoverColor:{default:"highlight-1"},treeColor:{default:"gray-9"},selectedTreeColor:{default:"yellow-11"},collapsibleTextColor:{default:{unselected:"gray-12",selected:"yellow-11"}}}),be="undefined"==typeof Symbol?"__ͼ":Symbol.for("ͼ"),ve="undefined"==typeof Symbol?"__styleSet"+Math.floor(1e8*Math.random()):Symbol("styleSet"),we="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:{};class ye{constructor(e,t){this.rules=[];let{finish:i}=t||{};function n(e){return/^@/.test(e)?[e]:e.split(/,\s*/)}function s(e,t,r,o){let l=[],a=/^@(\w+)\b/.exec(e[0]),h=a&&"keyframes"==a[1];if(a&&null==t)return r.push(e[0]+";");for(let i in t){let o=t[i];if(/&/.test(i))s(i.split(/,\s*/).map((t=>e.map((e=>t.replace(/&/,e))))).reduce(((e,t)=>e.concat(t))),o,r);else if(o&&"object"==typeof o){if(!a)throw new RangeError("The value of a property ("+i+") should be a primitive value.");s(n(i),o,l,h)}else null!=o&&l.push(i.replace(/_.*/,"").replace(/[A-Z]/g,(e=>"-"+e.toLowerCase()))+": "+o+";")}(l.length||h)&&r.push((!i||a||o?e:e.map(i)).join(", ")+" {"+l.join(" ")+"}")}for(let t in e)s(n(t),e[t],this.rules)}getRules(){return this.rules.join("\n")}static newName(){let e=we[be]||1;return we[be]=e+1,"ͼ"+e.toString(36)}static mount(e,t,i){let n=e[ve],s=i&&i.nonce;n?s&&n.setNonce(s):n=new ke(e,s),n.mount(Array.isArray(t)?t:[t])}}let xe=new Map;class ke{constructor(e,t){let i=e.ownerDocument||e,n=i.defaultView;if(!e.head&&e.adoptedStyleSheets&&n.CSSStyleSheet){let t=xe.get(i);if(t)return e.adoptedStyleSheets=[t.sheet,...e.adoptedStyleSheets],e[ve]=t;this.sheet=new n.CSSStyleSheet,e.adoptedStyleSheets=[this.sheet,...e.adoptedStyleSheets],xe.set(i,this)}else{this.styleTag=i.createElement("style"),t&&this.styleTag.setAttribute("nonce",t);let n=e.head||e;n.insertBefore(this.styleTag,n.firstChild)}this.modules=[],e[ve]=this}mount(e){let t=this.sheet,i=0,n=0;for(let s=0;s<e.length;s++){let r=e[s],o=this.modules.indexOf(r);if(o<n&&o>-1&&(this.modules.splice(o,1),n--,o=-1),-1==o){if(this.modules.splice(n++,0,r),t)for(let e=0;e<r.rules.length;e++)t.insertRule(r.rules[e],i++)}else{for(;n<o;)i+=this.modules[n++].rules.length;i+=r.rules.length,n++}}if(!t){let e="";for(let t=0;t<this.modules.length;t++)e+=this.modules[t].getRules()+"\n";this.styleTag.textContent=e}}setNonce(e){this.styleTag&&this.styleTag.getAttribute("nonce")!=e&&this.styleTag.setAttribute("nonce",e)}}for(var Se={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'"},Ce={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"'},Ae=0;Ae<10;Ae++)Se[48+Ae]=Se[96+Ae]=String(Ae);for(Ae=1;Ae<=24;Ae++)Se[Ae+111]="F"+Ae;for(Ae=65;Ae<=90;Ae++)Se[Ae]=String.fromCharCode(Ae+32),Ce[Ae]=String.fromCharCode(Ae);for(var Me in Se)Ce.hasOwnProperty(Me)||(Ce[Me]=Se[Me]);function Te(e){let t;return t=11==e.nodeType?e.getSelection?e:e.ownerDocument:e,t.getSelection()}function Oe(e,t){return!!t&&(e==t||e.contains(1!=t.nodeType?t.parentNode:t))}function Ne(e,t){if(!t.anchorNode)return!1;try{return Oe(e,t.anchorNode)}catch(e){return!1}}function De(e){return 3==e.nodeType?_e(e,0,e.nodeValue.length).getClientRects():1==e.nodeType?e.getClientRects():[]}function Ee(e,t,i,n){return!!i&&(Le(e,t,i,n,-1)||Le(e,t,i,n,1))}function Be(e){for(var t=0;;t++)if(!(e=e.previousSibling))return t}function Le(e,t,i,n,s){for(;;){if(e==i&&t==n)return!0;if(t==(s<0?0:Pe(e))){if("DIV"==e.nodeName)return!1;let i=e.parentNode;if(!i||1!=i.nodeType)return!1;t=Be(e)+(s<0?0:1),e=i}else{if(1!=e.nodeType)return!1;if(1==(e=e.childNodes[t+(s<0?-1:0)]).nodeType&&"false"==e.contentEditable)return!1;t=s<0?Pe(e):0}}}function Pe(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function Re(e,t){let i=t?e.left:e.right;return{left:i,right:i,top:e.top,bottom:e.bottom}}function He(e){return{left:0,right:e.innerWidth,top:0,bottom:e.innerHeight}}class We{constructor(){this.anchorNode=null,this.anchorOffset=0,this.focusNode=null,this.focusOffset=0}eq(e){return this.anchorNode==e.anchorNode&&this.anchorOffset==e.anchorOffset&&this.focusNode==e.focusNode&&this.focusOffset==e.focusOffset}setRange(e){let{anchorNode:t,focusNode:i}=e;this.set(t,Math.min(e.anchorOffset,t?Pe(t):0),i,Math.min(e.focusOffset,i?Pe(i):0))}set(e,t,i,n){this.anchorNode=e,this.anchorOffset=t,this.focusNode=i,this.focusOffset=n}}let Ve,ze=null;function Fe(e){if(e.setActive)return e.setActive();if(ze)return e.focus(ze);let t=[];for(let i=e;i&&(t.push(i,i.scrollTop,i.scrollLeft),i!=i.ownerDocument);i=i.parentNode);if(e.focus(null==ze?{get preventScroll(){return ze={preventScroll:!0},!0}}:void 0),!ze){ze=!1;for(let e=0;e<t.length;){let i=t[e++],n=t[e++],s=t[e++];i.scrollTop!=n&&(i.scrollTop=n),i.scrollLeft!=s&&(i.scrollLeft=s)}}}function _e(e,t,i=t){let n=Ve||(Ve=document.createRange());return n.setEnd(e,i),n.setStart(e,t),n}function Ie(e,t,i){let n={key:t,code:t,keyCode:i,which:i,cancelable:!0},s=new KeyboardEvent("keydown",n);s.synthetic=!0,e.dispatchEvent(s);let r=new KeyboardEvent("keyup",n);return r.synthetic=!0,e.dispatchEvent(r),s.defaultPrevented||r.defaultPrevented}function $e(e){for(;e.attributes.length;)e.removeAttributeNode(e.attributes[0])}function qe(e){return e.scrollTop>Math.max(1,e.scrollHeight-e.clientHeight-4)}class Ke{constructor(e,t,i=!0){this.node=e,this.offset=t,this.precise=i}static before(e,t){return new Ke(e.parentNode,Be(e),t)}static after(e,t){return new Ke(e.parentNode,Be(e)+1,t)}}const je=[];class Ge{constructor(){this.parent=null,this.dom=null,this.flags=2}get overrideDOMText(){return null}get posAtStart(){return this.parent?this.parent.posBefore(this):0}get posAtEnd(){return this.posAtStart+this.length}posBefore(e){let t=this.posAtStart;for(let i of this.children){if(i==e)return t;t+=i.length+i.breakAfter}throw new RangeError("Invalid child in posBefore")}posAfter(e){return this.posBefore(e)+e.length}sync(e,t){if(2&this.flags){let i,n=this.dom,s=null;for(let r of this.children){if(7&r.flags){if(!r.dom&&(i=s?s.nextSibling:n.firstChild)){let e=Ge.get(i);(!e||!e.parent&&e.canReuseDOM(r))&&r.reuseDOM(i)}r.sync(e,t),r.flags&=-8}if(i=s?s.nextSibling:n.firstChild,t&&!t.written&&t.node==n&&i!=r.dom&&(t.written=!0),r.dom.parentNode==n)for(;i&&i!=r.dom;)i=Ye(i);else n.insertBefore(r.dom,i);s=r.dom}for(i=s?s.nextSibling:n.firstChild,i&&t&&t.node==n&&(t.written=!0);i;)i=Ye(i)}else if(1&this.flags)for(let i of this.children)7&i.flags&&(i.sync(e,t),i.flags&=-8)}reuseDOM(e){}localPosFromDOM(e,t){let i;if(e==this.dom)i=this.dom.childNodes[t];else{let n=0==Pe(e)?0:0==t?-1:1;for(;;){let t=e.parentNode;if(t==this.dom)break;0==n&&t.firstChild!=t.lastChild&&(n=e==t.firstChild?-1:1),e=t}i=n<0?e:e.nextSibling}if(i==this.dom.firstChild)return 0;for(;i&&!Ge.get(i);)i=i.nextSibling;if(!i)return this.length;for(let e=0,t=0;;e++){let n=this.children[e];if(n.dom==i)return t;t+=n.length+n.breakAfter}}domBoundsAround(e,t,i=0){let n=-1,s=-1,r=-1,o=-1;for(let l=0,a=i,h=i;l<this.children.length;l++){let i=this.children[l],c=a+i.length;if(a<e&&c>t)return i.domBoundsAround(e,t,a);if(c>=e&&-1==n&&(n=l,s=a),a>t&&i.dom.parentNode==this.dom){r=l,o=h;break}h=c,a=c+i.breakAfter}return{from:s,to:o<0?i+this.length:o,startDOM:(n?this.children[n-1].dom.nextSibling:null)||this.dom.firstChild,endDOM:r<this.children.length&&r>=0?this.children[r].dom:null}}markDirty(e=!1){this.flags|=2,this.markParentsDirty(e)}markParentsDirty(e){for(let t=this.parent;t;t=t.parent){if(e&&(t.flags|=2),1&t.flags)return;t.flags|=1,e=!1}}setParent(e){this.parent!=e&&(this.parent=e,7&this.flags&&this.markParentsDirty(!0))}setDOM(e){this.dom!=e&&(this.dom&&(this.dom.cmView=null),this.dom=e,e.cmView=this)}get rootView(){for(let e=this;;){let t=e.parent;if(!t)return e;e=t}}replaceChildren(e,t,i=je){this.markDirty();for(let i=e;i<t;i++){let e=this.children[i];e.parent==this&&e.destroy()}this.children.splice(e,t-e,...i);for(let e=0;e<i.length;e++)i[e].setParent(this)}ignoreMutation(e){return!1}ignoreEvent(e){return!1}childCursor(e=this.length){return new Ue(this.children,e,this.children.length)}childPos(e,t=1){return this.childCursor().findPos(e,t)}toString(){let e=this.constructor.name.replace("View","");return e+(this.children.length?"("+this.children.join()+")":this.length?"["+("Text"==e?this.text:this.length)+"]":"")+(this.breakAfter?"#":"")}static get(e){return e.cmView}get isEditable(){return!0}get isWidget(){return!1}get isHidden(){return!1}merge(e,t,i,n,s,r){return!1}become(e){return!1}canReuseDOM(e){return e.constructor==this.constructor&&!(8&(this.flags|e.flags))}getSide(){return 0}destroy(){this.parent=null}}function Ye(e){let t=e.nextSibling;return e.parentNode.removeChild(e),t}Ge.prototype.breakAfter=0;class Ue{constructor(e,t,i){this.children=e,this.pos=t,this.i=i,this.off=0}findPos(e,t=1){for(;;){if(e>this.pos||e==this.pos&&(t>0||0==this.i||this.children[this.i-1].breakAfter))return this.off=e-this.pos,this;let i=this.children[--this.i];this.pos-=i.length+i.breakAfter}}}function Xe(e,t,i,n,s,r,o,l,a){let{children:h}=e,c=h.length?h[t]:null,d=r.length?r[r.length-1]:null,u=d?d.breakAfter:o;if(!(t==n&&c&&!o&&!u&&r.length<2&&c.merge(i,s,r.length?d:null,0==i,l,a))){if(n<h.length){let e=h[n];e&&(s<e.length||e.breakAfter&&(null==d?void 0:d.breakAfter))?(t==n&&(e=e.split(s),s=0),!u&&d&&e.merge(0,s,d,!0,0,a)?r[r.length-1]=e:((s||e.children.length&&!e.children[0].length)&&e.merge(0,s,null,!1,0,a),r.push(e))):(null==e?void 0:e.breakAfter)&&(d?d.breakAfter=1:o=1),n++}for(c&&(c.breakAfter=o,i>0&&(!o&&r.length&&c.merge(i,c.length,r[0],!1,l,0)?c.breakAfter=r.shift().breakAfter:(i<c.length||c.children.length&&0==c.children[c.children.length-1].length)&&c.merge(i,c.length,null,!1,l,0),t++));t<n&&r.length;)if(h[n-1].become(r[r.length-1]))n--,r.pop(),a=r.length?0:l;else{if(!h[t].become(r[0]))break;t++,r.shift(),l=r.length?0:a}!r.length&&t&&n<h.length&&!h[t-1].breakAfter&&h[n].merge(0,0,h[t-1],!1,l,a)&&t--,(t<n||r.length)&&e.replaceChildren(t,n,r)}}function Ze(e,t,i,n,s,r){let o=e.childCursor(),{i:l,off:a}=o.findPos(i,1),{i:h,off:c}=o.findPos(t,-1),d=t-i;for(let e of n)d+=e.length;e.length+=d,Xe(e,h,c,l,a,n,0,s,r)}let Je="undefined"!=typeof navigator?navigator:{userAgent:"",vendor:"",platform:""},Qe="undefined"!=typeof document?document:{documentElement:{style:{}}};const et=/Edge\/(\d+)/.exec(Je.userAgent),tt=/MSIE \d/.test(Je.userAgent),it=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Je.userAgent),nt=!!(tt||it||et),st=!nt&&/gecko\/(\d+)/i.test(Je.userAgent),rt=!nt&&/Chrome\/(\d+)/.exec(Je.userAgent),ot="webkitFontSmoothing"in Qe.documentElement.style,lt=!nt&&/Apple Computer/.test(Je.vendor),at=lt&&(/Mobile\/\w+/.test(Je.userAgent)||Je.maxTouchPoints>2);var ht={mac:at||/Mac/.test(Je.platform),windows:/Win/.test(Je.platform),linux:/Linux|X11/.test(Je.platform),ie:nt,ie_version:tt?Qe.documentMode||6:it?+it[1]:et?+et[1]:0,gecko:st,gecko_version:st?+(/Firefox\/(\d+)/.exec(Je.userAgent)||[0,0])[1]:0,chrome:!!rt,chrome_version:rt?+rt[1]:0,ios:at,android:/Android\b/.test(Je.userAgent),webkit:ot,safari:lt,webkit_version:ot?+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]:0,tabSize:null!=Qe.documentElement.style.tabSize?"tab-size":"-moz-tab-size"};class ct extends Ge{constructor(e){super(),this.text=e}get length(){return this.text.length}createDOM(e){this.setDOM(e||document.createTextNode(this.text))}sync(e,t){this.dom||this.createDOM(),this.dom.nodeValue!=this.text&&(t&&t.node==this.dom&&(t.written=!0),this.dom.nodeValue=this.text)}reuseDOM(e){3==e.nodeType&&this.createDOM(e)}merge(e,t,i){return!(8&this.flags||i&&(!(i instanceof ct)||this.length-(t-e)+i.length>256||8&i.flags))&&(this.text=this.text.slice(0,e)+(i?i.text:"")+this.text.slice(t),this.markDirty(),!0)}split(e){let t=new ct(this.text.slice(e));return this.text=this.text.slice(0,e),this.markDirty(),t.flags|=8&this.flags,t}localPosFromDOM(e,t){return e==this.dom?t:t?this.text.length:0}domAtPos(e){return new Ke(this.dom,e)}domBoundsAround(e,t,i){return{from:i,to:i+this.length,startDOM:this.dom,endDOM:this.dom.nextSibling}}coordsAt(e,t){return function(e,t,i){let n=e.nodeValue.length;t>n&&(t=n);let s=t,r=t,o=0;0==t&&i<0||t==n&&i>=0?ht.chrome||ht.gecko||(t?(s--,o=1):r<n&&(r++,o=-1)):i<0?s--:r<n&&r++;let l=_e(e,s,r).getClientRects();if(!l.length)return null;let a=l[(o?o<0:i>=0)?0:l.length-1];ht.safari&&!o&&0==a.width&&(a=Array.prototype.find.call(l,(e=>e.width))||a);return o?Re(a,o<0):a||null}(this.dom,e,t)}}class dt extends Ge{constructor(e,t=[],i=0){super(),this.mark=e,this.children=t,this.length=i;for(let e of t)e.setParent(this)}setAttrs(e){if($e(e),this.mark.class&&(e.className=this.mark.class),this.mark.attrs)for(let t in this.mark.attrs)e.setAttribute(t,this.mark.attrs[t]);return e}canReuseDOM(e){return super.canReuseDOM(e)&&!(8&(this.flags|e.flags))}reuseDOM(e){e.nodeName==this.mark.tagName.toUpperCase()&&(this.setDOM(e),this.flags|=6)}sync(e,t){this.dom?4&this.flags&&this.setAttrs(this.dom):this.setDOM(this.setAttrs(document.createElement(this.mark.tagName))),super.sync(e,t)}merge(e,t,i,n,s,r){return(!i||!(!(i instanceof dt&&i.mark.eq(this.mark))||e&&s<=0||t<this.length&&r<=0))&&(Ze(this,e,t,i?i.children:[],s-1,r-1),this.markDirty(),!0)}split(e){let t=[],i=0,n=-1,s=0;for(let r of this.children){let o=i+r.length;o>e&&t.push(i<e?r.split(e-i):r),n<0&&i>=e&&(n=s),i=o,s++}let r=this.length-e;return this.length=e,n>-1&&(this.children.length=n,this.markDirty()),new dt(this.mark,t,r)}domAtPos(e){return gt(this,e)}coordsAt(e,t){return mt(this,e,t)}}class ut extends Ge{static create(e,t,i){return new ut(e,t,i)}constructor(e,t,i){super(),this.widget=e,this.length=t,this.side=i,this.prevWidget=null}split(e){let t=ut.create(this.widget,this.length-e,this.side);return this.length-=e,t}sync(e){this.dom&&this.widget.updateDOM(this.dom,e)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(e)),this.dom.contentEditable="false")}getSide(){return this.side}merge(e,t,i,n,s,r){return!(i&&(!(i instanceof ut&&this.widget.compare(i.widget))||e>0&&s<=0||t<this.length&&r<=0))&&(this.length=e+(i?i.length:0)+(this.length-t),!0)}become(e){return e instanceof ut&&e.side==this.side&&this.widget.constructor==e.widget.constructor&&(this.widget.compare(e.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=e.widget,this.length=e.length,!0)}ignoreMutation(){return!0}ignoreEvent(e){return this.widget.ignoreEvent(e)}get overrideDOMText(){if(0==this.length)return E.empty;let e=this;for(;e.parent;)e=e.parent;let{view:t}=e,i=t&&t.state.doc,n=this.posAtStart;return i?i.slice(n,n+this.length):E.empty}domAtPos(e){return(this.length?0==e:this.side>0)?Ke.before(this.dom):Ke.after(this.dom,e==this.length)}domBoundsAround(){return null}coordsAt(e,t){let i=this.widget.coordsAt(this.dom,e,t);if(i)return i;let n=this.dom.getClientRects(),s=null;if(!n.length)return null;let r=this.side?this.side<0:e>0;for(let t=r?n.length-1:0;s=n[t],!(e>0?0==t:t==n.length-1||s.top<s.bottom);t+=r?-1:1);return Re(s,!r)}get isEditable(){return!1}get isWidget(){return!0}get isHidden(){return this.widget.isHidden}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}}class ft extends Ge{constructor(e){super(),this.side=e}get length(){return 0}merge(){return!1}become(e){return e instanceof ft&&e.side==this.side}split(){return new ft(this.side)}sync(){if(!this.dom){let e=document.createElement("img");e.className="cm-widgetBuffer",e.setAttribute("aria-hidden","true"),this.setDOM(e)}}getSide(){return this.side}domAtPos(e){return this.side>0?Ke.before(this.dom):Ke.after(this.dom)}localPosFromDOM(){return 0}domBoundsAround(){return null}coordsAt(e){return this.dom.getBoundingClientRect()}get overrideDOMText(){return E.empty}get isHidden(){return!0}}function gt(e,t){let i=e.dom,{children:n}=e,s=0;for(let e=0;s<n.length;s++){let r=n[s],o=e+r.length;if(!(o==e&&r.getSide()<=0)){if(t>e&&t<o&&r.dom.parentNode==i)return r.domAtPos(t-e);if(t<=e)break;e=o}}for(let e=s;e>0;e--){let t=n[e-1];if(t.dom.parentNode==i)return t.domAtPos(t.length)}for(let e=s;e<n.length;e++){let t=n[e];if(t.dom.parentNode==i)return t.domAtPos(0)}return new Ke(i,0)}function pt(e,t,i){let n,{children:s}=e;i>0&&t instanceof dt&&s.length&&(n=s[s.length-1])instanceof dt&&n.mark.eq(t.mark)?pt(n,t.children[0],i-1):(s.push(t),t.setParent(e)),e.length+=t.length}function mt(e,t,i){let n=null,s=-1,r=null,o=-1;!function e(t,l){for(let a=0,h=0;a<t.children.length&&h<=l;a++){let c=t.children[a],d=h+c.length;d>=l&&(c.children.length?e(c,l-h):(!r||r.isHidden&&i>0)&&(d>l||h==d&&c.getSide()>0)?(r=c,o=l-h):(h<l||h==d&&c.getSide()<0&&!c.isHidden)&&(n=c,s=l-h)),h=d}}(e,t);let l=(i<0?n:r)||n||r;return l?l.coordsAt(Math.max(0,l==n?s:o),i):function(e){let t=e.dom.lastChild;if(!t)return e.dom.getBoundingClientRect();let i=De(t);return i[i.length-1]||null}(e)}function bt(e,t){for(let i in e)"class"==i&&t.class?t.class+=" "+e.class:"style"==i&&t.style?t.style+=";"+e.style:t[i]=e[i];return t}ct.prototype.children=ut.prototype.children=ft.prototype.children=je;const vt=Object.create(null);function wt(e,t,i){if(e==t)return!0;e||(e=vt),t||(t=vt);let n=Object.keys(e),s=Object.keys(t);if(n.length-(i&&n.indexOf(i)>-1?1:0)!=s.length-(i&&s.indexOf(i)>-1?1:0))return!1;for(let r of n)if(r!=i&&(-1==s.indexOf(r)||e[r]!==t[r]))return!1;return!0}function yt(e,t,i){let n=!1;if(t)for(let s in t)i&&s in i||(n=!0,"style"==s?e.style.cssText="":e.removeAttribute(s));if(i)for(let s in i)t&&t[s]==i[s]||(n=!0,"style"==s?e.style.cssText=i[s]:e.setAttribute(s,i[s]));return n}function xt(e){let t=Object.create(null);for(let i=0;i<e.attributes.length;i++){let n=e.attributes[i];t[n.name]=n.value}return t}class kt extends Ge{constructor(){super(...arguments),this.children=[],this.length=0,this.prevAttrs=void 0,this.attrs=null,this.breakAfter=0}merge(e,t,i,n,s,r){if(i){if(!(i instanceof kt))return!1;this.dom||i.transferDOM(this)}return n&&this.setDeco(i?i.attrs:null),Ze(this,e,t,i?i.children:[],s,r),!0}split(e){let t=new kt;if(t.breakAfter=this.breakAfter,0==this.length)return t;let{i:i,off:n}=this.childPos(e);n&&(t.append(this.children[i].split(n),0),this.children[i].merge(n,this.children[i].length,null,!1,0,0),i++);for(let e=i;e<this.children.length;e++)t.append(this.children[e],0);for(;i>0&&0==this.children[i-1].length;)this.children[--i].destroy();return this.children.length=i,this.markDirty(),this.length=e,t}transferDOM(e){this.dom&&(this.markDirty(),e.setDOM(this.dom),e.prevAttrs=void 0===this.prevAttrs?this.attrs:this.prevAttrs,this.prevAttrs=void 0,this.dom=null)}setDeco(e){wt(this.attrs,e)||(this.dom&&(this.prevAttrs=this.attrs,this.markDirty()),this.attrs=e)}append(e,t){pt(this,e,t)}addLineDeco(e){let t=e.spec.attributes,i=e.spec.class;t&&(this.attrs=bt(t,this.attrs||{})),i&&(this.attrs=bt({class:i},this.attrs||{}))}domAtPos(e){return gt(this,e)}reuseDOM(e){"DIV"==e.nodeName&&(this.setDOM(e),this.flags|=6)}sync(e,t){var i;this.dom?4&this.flags&&($e(this.dom),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0):(this.setDOM(document.createElement("div")),this.dom.className="cm-line",this.prevAttrs=this.attrs?null:void 0),void 0!==this.prevAttrs&&(yt(this.dom,this.prevAttrs,this.attrs),this.dom.classList.add("cm-line"),this.prevAttrs=void 0),super.sync(e,t);let n=this.dom.lastChild;for(;n&&Ge.get(n)instanceof dt;)n=n.lastChild;if(!(n&&this.length&&("BR"==n.nodeName||0!=(null===(i=Ge.get(n))||void 0===i?void 0:i.isEditable)||ht.ios&&this.children.some((e=>e instanceof ct))))){let e=document.createElement("BR");e.cmIgnore=!0,this.dom.appendChild(e)}}measureTextSize(){if(0==this.children.length||this.length>20)return null;let e,t=0;for(let i of this.children){if(!(i instanceof ct)||/[^ -~]/.test(i.text))return null;let n=De(i.dom);if(1!=n.length)return null;t+=n[0].width,e=n[0].height}return t?{lineHeight:this.dom.getBoundingClientRect().height,charWidth:t/this.length,textHeight:e}:null}coordsAt(e,t){let i=mt(this,e,t);if(!this.children.length&&i&&this.parent){let{heightOracle:e}=this.parent.view.viewState,t=i.bottom-i.top;if(Math.abs(t-e.lineHeight)<2&&e.textHeight<t){let n=(t-e.textHeight)/2;return{top:i.top+n,bottom:i.bottom-n,left:i.left,right:i.left}}}return i}become(e){return!1}covers(){return!0}static find(e,t){for(let i=0,n=0;i<e.children.length;i++){let s=e.children[i],r=n+s.length;if(r>=t){if(s instanceof kt)return s;if(r>t)break}n=r+s.breakAfter}return null}}class St extends Ge{constructor(e,t,i){super(),this.widget=e,this.length=t,this.deco=i,this.breakAfter=0,this.prevWidget=null}merge(e,t,i,n,s,r){return!(i&&(!(i instanceof St&&this.widget.compare(i.widget))||e>0&&s<=0||t<this.length&&r<=0))&&(this.length=e+(i?i.length:0)+(this.length-t),!0)}domAtPos(e){return 0==e?Ke.before(this.dom):Ke.after(this.dom,e==this.length)}split(e){let t=this.length-e;this.length=e;let i=new St(this.widget,t,this.deco);return i.breakAfter=this.breakAfter,i}get children(){return je}sync(e){this.dom&&this.widget.updateDOM(this.dom,e)||(this.dom&&this.prevWidget&&this.prevWidget.destroy(this.dom),this.prevWidget=null,this.setDOM(this.widget.toDOM(e)),this.dom.contentEditable="false")}get overrideDOMText(){return this.parent?this.parent.view.state.doc.slice(this.posAtStart,this.posAtEnd):E.empty}domBoundsAround(){return null}become(e){return e instanceof St&&e.widget.constructor==this.widget.constructor&&(e.widget.compare(this.widget)||this.markDirty(!0),this.dom&&!this.prevWidget&&(this.prevWidget=this.widget),this.widget=e.widget,this.length=e.length,this.deco=e.deco,this.breakAfter=e.breakAfter,!0)}ignoreMutation(){return!0}ignoreEvent(e){return this.widget.ignoreEvent(e)}get isEditable(){return!1}get isWidget(){return!0}coordsAt(e,t){return this.widget.coordsAt(this.dom,e,t)}destroy(){super.destroy(),this.dom&&this.widget.destroy(this.dom)}covers(e){let{startSide:t,endSide:i}=this.deco;return t!=i&&(e<0?t<0:i>0)}}class Ct{eq(e){return!1}updateDOM(e,t){return!1}compare(e){return this==e||this.constructor==e.constructor&&this.eq(e)}get estimatedHeight(){return-1}get lineBreaks(){return 0}ignoreEvent(e){return!0}coordsAt(e,t,i){return null}get isHidden(){return!1}destroy(e){}}var At=function(e){return e[e.Text=0]="Text",e[e.WidgetBefore=1]="WidgetBefore",e[e.WidgetAfter=2]="WidgetAfter",e[e.WidgetRange=3]="WidgetRange",e}(At||(At={}));class Mt extends M{constructor(e,t,i,n){super(),this.startSide=e,this.endSide=t,this.widget=i,this.spec=n}get heightRelevant(){return!1}static mark(e){return new Tt(e)}static widget(e){let t=Math.max(-1e4,Math.min(1e4,e.side||0)),i=!!e.block;return t+=i&&!e.inlineOrder?t>0?3e8:-4e8:t>0?1e8:-1e8,new Nt(e,t,t,i,e.widget||null,!1)}static replace(e){let t,i,n=!!e.block;if(e.isBlockGap)t=-5e8,i=4e8;else{let{start:s,end:r}=Dt(e,n);t=(s?n?-3e8:-1:5e8)-1,i=1+(r?n?2e8:1:-6e8)}return new Nt(e,t,i,n,e.widget||null,!0)}static line(e){return new Ot(e)}static set(e,t=!1){return v.of(e,t)}hasHeight(){return!!this.widget&&this.widget.estimatedHeight>-1}}Mt.none=v.empty;class Tt extends Mt{constructor(e){let{start:t,end:i}=Dt(e);super(t?-1:5e8,i?1:-6e8,null,e),this.tagName=e.tagName||"span",this.class=e.class||"",this.attrs=e.attributes||null}eq(e){var t,i;return this==e||e instanceof Tt&&this.tagName==e.tagName&&(this.class||(null===(t=this.attrs)||void 0===t?void 0:t.class))==(e.class||(null===(i=e.attrs)||void 0===i?void 0:i.class))&&wt(this.attrs,e.attrs,"class")}range(e,t=e){if(e>=t)throw new RangeError("Mark decorations may not be empty");return super.range(e,t)}}Tt.prototype.point=!1;class Ot extends Mt{constructor(e){super(-2e8,-2e8,null,e)}eq(e){return e instanceof Ot&&this.spec.class==e.spec.class&&wt(this.spec.attributes,e.spec.attributes)}range(e,t=e){if(t!=e)throw new RangeError("Line decoration ranges must be zero-length");return super.range(e,t)}}Ot.prototype.mapMode=w.TrackBefore,Ot.prototype.point=!0;class Nt extends Mt{constructor(e,t,i,n,s,r){super(t,i,s,e),this.block=n,this.isReplace=r,this.mapMode=n?t<=0?w.TrackBefore:w.TrackAfter:w.TrackDel}get type(){return this.startSide!=this.endSide?At.WidgetRange:this.startSide<=0?At.WidgetBefore:At.WidgetAfter}get heightRelevant(){return this.block||!!this.widget&&(this.widget.estimatedHeight>=5||this.widget.lineBreaks>0)}eq(e){return e instanceof Nt&&(t=this.widget,i=e.widget,t==i||!!(t&&i&&t.compare(i)))&&this.block==e.block&&this.startSide==e.startSide&&this.endSide==e.endSide;var t,i}range(e,t=e){if(this.isReplace&&(e>t||e==t&&this.startSide>0&&this.endSide<=0))throw new RangeError("Invalid range for replacement decoration");if(!this.isReplace&&t!=e)throw new RangeError("Widget decorations can only have zero-length ranges");return super.range(e,t)}}function Dt(e,t=!1){let{inclusiveStart:i,inclusiveEnd:n}=e;return null==i&&(i=e.inclusive),null==n&&(n=e.inclusive),{start:null!=i?i:t,end:null!=n?n:t}}function Et(e,t,i,n=0){let s=i.length-1;s>=0&&i[s]+n>=e?i[s]=Math.max(i[s],t):i.push(e,t)}Nt.prototype.point=!0;class Bt{constructor(e,t,i,n){this.doc=e,this.pos=t,this.end=i,this.disallowBlockEffectsFor=n,this.content=[],this.curLine=null,this.breakAtStart=0,this.pendingBuffer=0,this.bufferMarks=[],this.atCursorPos=!0,this.openStart=-1,this.openEnd=-1,this.text="",this.textOff=0,this.cursor=e.iter(),this.skip=t}posCovered(){if(0==this.content.length)return!this.breakAtStart&&this.doc.lineAt(this.pos).from!=this.pos;let e=this.content[this.content.length-1];return!(e.breakAfter||e instanceof St&&e.deco.endSide<0)}getLine(){return this.curLine||(this.content.push(this.curLine=new kt),this.atCursorPos=!0),this.curLine}flushBuffer(e=this.bufferMarks){this.pendingBuffer&&(this.curLine.append(Lt(new ft(-1),e),e.length),this.pendingBuffer=0)}addBlockWidget(e){this.flushBuffer(),this.curLine=null,this.content.push(e)}finish(e){this.pendingBuffer&&e<=this.bufferMarks.length?this.flushBuffer():this.pendingBuffer=0,this.posCovered()||e&&this.content.length&&this.content[this.content.length-1]instanceof St||this.getLine()}buildText(e,t,i){for(;e>0;){if(this.textOff==this.text.length){let{value:t,lineBreak:i,done:n}=this.cursor.next(this.skip);if(this.skip=0,n)throw new Error("Ran out of text content when drawing inline views");if(i){this.posCovered()||this.getLine(),this.content.length?this.content[this.content.length-1].breakAfter=1:this.breakAtStart=1,this.flushBuffer(),this.curLine=null,this.atCursorPos=!0,e--;continue}this.text=t,this.textOff=0}let n=Math.min(this.text.length-this.textOff,e,512);this.flushBuffer(t.slice(t.length-i)),this.getLine().append(Lt(new ct(this.text.slice(this.textOff,this.textOff+n)),t),i),this.atCursorPos=!0,this.textOff+=n,e-=n,i=0}}span(e,t,i,n){this.buildText(t-e,i,n),this.pos=t,this.openStart<0&&(this.openStart=n)}point(e,t,i,n,s,r){if(this.disallowBlockEffectsFor[r]&&i instanceof Nt){if(i.block)throw new RangeError("Block decorations may not be specified via plugins");if(t>this.doc.lineAt(this.pos).to)throw new RangeError("Decorations that replace line breaks may not be specified via plugins")}let o=t-e;if(i instanceof Nt)if(i.block)i.startSide>0&&!this.posCovered()&&this.getLine(),this.addBlockWidget(new St(i.widget||new Pt("div"),o,i));else{let r=ut.create(i.widget||new Pt("span"),o,o?0:i.startSide),l=this.atCursorPos&&!r.isEditable&&s<=n.length&&(e<t||i.startSide>0),a=!r.isEditable&&(e<t||s>n.length||i.startSide<=0),h=this.getLine();2!=this.pendingBuffer||l||r.isEditable||(this.pendingBuffer=0),this.flushBuffer(n),l&&(h.append(Lt(new ft(1),n),s),s=n.length+Math.max(0,s-n.length)),h.append(Lt(r,n),s),this.atCursorPos=a,this.pendingBuffer=a?e<t||s>n.length?1:2:0,this.pendingBuffer&&(this.bufferMarks=n.slice())}else this.doc.lineAt(this.pos).from==this.pos&&this.getLine().addLineDeco(i);o&&(this.textOff+o<=this.text.length?this.textOff+=o:(this.skip+=o-(this.text.length-this.textOff),this.text="",this.textOff=0),this.pos=t),this.openStart<0&&(this.openStart=s)}static build(e,t,i,n,s){let r=new Bt(e,t,i,s);return r.openEnd=v.spans(n,t,i,r),r.openStart<0&&(r.openStart=r.openEnd),r.finish(r.openEnd),r}}function Lt(e,t){for(let i of t)e=new dt(i,[e],e.length);return e}class Pt extends Ct{constructor(e){super(),this.tag=e}eq(e){return e.tag==this.tag}toDOM(){return document.createElement(this.tag)}updateDOM(e){return e.nodeName.toLowerCase()==this.tag}get isHidden(){return!0}}const Rt=C.define(),Ht=C.define(),Wt=C.define(),Vt=C.define(),zt=C.define(),Ft=C.define(),_t=C.define(),It=C.define({combine:e=>e.some((e=>e))}),$t=C.define({combine:e=>e.some((e=>e))});class qt{constructor(e,t="nearest",i="nearest",n=5,s=5){this.range=e,this.y=t,this.x=i,this.yMargin=n,this.xMargin=s}map(e){return e.empty?this:new qt(this.range.map(e),this.y,this.x,this.yMargin,this.xMargin)}}const Kt=A.define({map:(e,t)=>e.map(t)});function jt(e,t,i){let n=e.facet(Vt);n.length?n[0](t):window.onerror?window.onerror(String(t),i,void 0,void 0,t):i?console.error(i+":",t):console.error(t)}const Gt=C.define({combine:e=>!e.length||e[0]});let Yt=0;const Ut=C.define();class Xt{constructor(e,t,i,n,s){this.id=e,this.create=t,this.domEventHandlers=i,this.domEventObservers=n,this.extension=s(this)}static define(e,t){const{eventHandlers:i,eventObservers:n,provide:s,decorations:r}=t||{};return new Xt(Yt++,e,i,n,(e=>{let t=[Ut.of(e)];return r&&t.push(ei.of((t=>{let i=t.plugin(e);return i?r(i):Mt.none}))),s&&t.push(s(e)),t}))}static fromClass(e,t){return Xt.define((t=>new e(t)),t)}}class Zt{constructor(e){this.spec=e,this.mustUpdate=null,this.value=null}update(e){if(this.value){if(this.mustUpdate){let e=this.mustUpdate;if(this.mustUpdate=null,this.value.update)try{this.value.update(e)}catch(t){if(jt(e.state,t,"CodeMirror plugin crashed"),this.value.destroy)try{this.value.destroy()}catch(e){}this.deactivate()}}}else if(this.spec)try{this.value=this.spec.create(e)}catch(t){jt(e.state,t,"CodeMirror plugin crashed"),this.deactivate()}return this}destroy(e){var t;if(null===(t=this.value)||void 0===t?void 0:t.destroy)try{this.value.destroy()}catch(t){jt(e.state,t,"CodeMirror plugin crashed")}}deactivate(){this.spec=this.value=null}}const Jt=C.define(),Qt=C.define(),ei=C.define(),ti=C.define(),ii=C.define();function ni(e,t,i){let n=e.state.facet(ii);if(!n.length)return n;let s=n.map((t=>t instanceof Function?t(e):t)),r=[];return v.spans(s,t,i,{point(){},span(e,t,i,n){let s=r;for(let r=i.length-1;r>=0;r--,n--){let o,l=i[r].spec.bidiIsolate;if(null!=l)if(n>0&&s.length&&(o=s[s.length-1]).to==e&&o.direction==l)o.to=t,s=o.inner;else{let i={from:e,to:t,direction:l,inner:[]};s.push(i),s=i.inner}}}}),r}const si=C.define();function ri(e){let t=0,i=0,n=0,s=0;for(let r of e.state.facet(si)){let o=r(e);o&&(null!=o.left&&(t=Math.max(t,o.left)),null!=o.right&&(i=Math.max(i,o.right)),null!=o.top&&(n=Math.max(n,o.top)),null!=o.bottom&&(s=Math.max(s,o.bottom)))}return{left:t,right:i,top:n,bottom:s}}const oi=C.define();class li{constructor(e,t,i,n){this.fromA=e,this.toA=t,this.fromB=i,this.toB=n}join(e){return new li(Math.min(this.fromA,e.fromA),Math.max(this.toA,e.toA),Math.min(this.fromB,e.fromB),Math.max(this.toB,e.toB))}addToSet(e){let t=e.length,i=this;for(;t>0;t--){let n=e[t-1];if(!(n.fromA>i.toA)){if(n.toA<i.fromA)break;i=i.join(n),e.splice(t-1,1)}}return e.splice(t,0,i),e}static extendWithRanges(e,t){if(0==t.length)return e;let i=[];for(let n=0,s=0,r=0,o=0;;n++){let l=n==e.length?null:e[n],a=r-o,h=l?l.fromB:1e9;for(;s<t.length&&t[s]<h;){let e=t[s],n=t[s+1],r=Math.max(o,e),l=Math.min(h,n);if(r<=l&&new li(r+a,l+a,r,l).addToSet(i),n>h)break;s+=2}if(!l)return i;new li(l.fromA,l.toA,l.fromB,l.toB).addToSet(i),r=l.toA,o=l.toB}}}class ai{constructor(e,t,i){this.view=e,this.state=t,this.transactions=i,this.flags=0,this.startState=e.state,this.changes=T.empty(this.startState.doc.length);for(let e of i)this.changes=this.changes.compose(e.changes);let n=[];this.changes.iterChangedRanges(((e,t,i,s)=>n.push(new li(e,t,i,s)))),this.changedRanges=n}static create(e,t,i){return new ai(e,t,i)}get viewportChanged(){return(4&this.flags)>0}get heightChanged(){return(2&this.flags)>0}get geometryChanged(){return this.docChanged||(10&this.flags)>0}get focusChanged(){return(1&this.flags)>0}get docChanged(){return!this.changes.empty}get selectionSet(){return this.transactions.some((e=>e.selection))}get empty(){return 0==this.flags&&0==this.transactions.length}}var hi=function(e){return e[e.LTR=0]="LTR",e[e.RTL=1]="RTL",e}(hi||(hi={}));const ci=hi.LTR,di=hi.RTL;function ui(e){let t=[];for(let i=0;i<e.length;i++)t.push(1<<+e[i]);return t}const fi=ui("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008"),gi=ui("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333"),pi=Object.create(null),mi=[];for(let e of["()","[]","{}"]){let t=e.charCodeAt(0),i=e.charCodeAt(1);pi[t]=i,pi[i]=-t}const bi=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;class vi{get dir(){return this.level%2?di:ci}constructor(e,t,i){this.from=e,this.to=t,this.level=i}side(e,t){return this.dir==t==e?this.to:this.from}static find(e,t,i,n){let s=-1;for(let r=0;r<e.length;r++){let o=e[r];if(o.from<=t&&o.to>=t){if(o.level==i)return r;(s<0||(0!=n?n<0?o.from<t:o.to>t:e[s].level>o.level))&&(s=r)}}if(s<0)throw new RangeError("Index out of range");return s}}function wi(e,t){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++){let n=e[i],s=t[i];if(n.from!=s.from||n.to!=s.to||n.direction!=s.direction||!wi(n.inner,s.inner))return!1}return!0}const yi=[];function xi(e,t,i,n,s,r,o){let l=n%2?2:1;if(n%2==s%2)for(let a=t,h=0;a<i;){let t=!0,c=!1;if(h==r.length||a<r[h].from){let e=yi[a];e!=l&&(t=!1,c=16==e)}let d=t||1!=l?null:[],u=t?n:n+1,f=a;e:for(;;)if(h<r.length&&f==r[h].from){if(c)break e;let g=r[h];if(!t)for(let e=g.to,t=h+1;;){if(e==i)break e;if(!(t<r.length&&r[t].from==e)){if(yi[e]==l)break e;break}e=r[t++].to}if(h++,d)d.push(g);else{g.from>a&&o.push(new vi(a,g.from,u)),ki(e,g.direction==ci!=!(u%2)?n+1:n,s,g.inner,g.from,g.to,o),a=g.to}f=g.to}else{if(f==i||(t?yi[f]!=l:yi[f]==l))break;f++}d?xi(e,a,f,n+1,s,d,o):a<f&&o.push(new vi(a,f,u)),a=f}else for(let a=i,h=r.length;a>t;){let i=!0,c=!1;if(!h||a>r[h-1].to){let e=yi[a-1];e!=l&&(i=!1,c=16==e)}let d=i||1!=l?null:[],u=i?n:n+1,f=a;e:for(;;)if(h&&f==r[h-1].to){if(c)break e;let g=r[--h];if(!i)for(let e=g.from,i=h;;){if(e==t)break e;if(!i||r[i-1].to!=e){if(yi[e-1]==l)break e;break}e=r[--i].from}if(d)d.push(g);else{g.to<a&&o.push(new vi(g.to,a,u)),ki(e,g.direction==ci!=!(u%2)?n+1:n,s,g.inner,g.from,g.to,o),a=g.from}f=g.from}else{if(f==t||(i?yi[f-1]!=l:yi[f-1]==l))break;f--}d?xi(e,f,a,n+1,s,d,o):f<a&&o.push(new vi(f,a,u)),a=f}}function ki(e,t,i,n,s,r,o){let l=t%2?2:1;!function(e,t,i,n,s){for(let o=0;o<=n.length;o++){let l=o?n[o-1].to:t,a=o<n.length?n[o].from:i,h=o?256:s;for(let t=l,i=h,n=h;t<a;t++){let s=(r=e.charCodeAt(t))<=247?fi[r]:1424<=r&&r<=1524?2:1536<=r&&r<=1785?gi[r-1536]:1774<=r&&r<=2220?4:8192<=r&&r<=8203?256:64336<=r&&r<=65023?4:8204==r?256:1;512==s?s=i:8==s&&4==n&&(s=16),yi[t]=4==s?2:s,7&s&&(n=s),i=s}for(let e=l,t=h,n=h;e<a;e++){let s=yi[e];if(128==s)e<a-1&&t==yi[e+1]&&24&t?s=yi[e]=t:yi[e]=256;else if(64==s){let s=e+1;for(;s<a&&64==yi[s];)s++;let r=e&&8==t||s<i&&8==yi[s]?1==n?1:8:256;for(let t=e;t<s;t++)yi[t]=r;e=s-1}else 8==s&&1==n&&(yi[e]=1);t=s,7&s&&(n=s)}}var r}(e,s,r,n,l),function(e,t,i,n,s){let r=1==s?2:1;for(let o=0,l=0,a=0;o<=n.length;o++){let h=o?n[o-1].to:t,c=o<n.length?n[o].from:i;for(let t,i,n,o=h;o<c;o++)if(i=pi[t=e.charCodeAt(o)])if(i<0){for(let e=l-3;e>=0;e-=3)if(mi[e+1]==-i){let t=mi[e+2],i=2&t?s:4&t?1&t?r:s:0;i&&(yi[o]=yi[mi[e]]=i),l=e;break}}else{if(189==mi.length)break;mi[l++]=o,mi[l++]=t,mi[l++]=a}else if(2==(n=yi[o])||1==n){let e=n==s;a=e?0:1;for(let t=l-3;t>=0;t-=3){let i=mi[t+2];if(2&i)break;if(e)mi[t+2]|=2;else{if(4&i)break;mi[t+2]|=4}}}}}(e,s,r,n,l),function(e,t,i,n){for(let s=0,r=n;s<=i.length;s++){let o=s?i[s-1].to:e,l=s<i.length?i[s].from:t;for(let a=o;a<l;){let o=yi[a];if(256==o){let o=a+1;for(;;)if(o==l){if(s==i.length)break;o=i[s++].to,l=s<i.length?i[s].from:t}else{if(256!=yi[o])break;o++}let h=1==r,c=h==(1==(o<t?yi[o]:n))?h?1:2:n;for(let t=o,n=s,r=n?i[n-1].to:e;t>a;)t==r&&(t=i[--n].from,r=n?i[n-1].to:e),yi[--t]=c;a=o}else r=o,a++}}}(s,r,n,l),xi(e,s,r,t,i,n,o)}function Si(e){return[new vi(0,e,0)]}let Ci="";function Ai(e,t,i,n,s){var r;let o=n.head-e.from,l=-1;if(0==o){if(!s||!e.length)return null;t[0].level!=i&&(o=t[0].side(!1,i),l=0)}else if(o==e.length){if(s)return null;let e=t[t.length-1];e.level!=i&&(o=e.side(!0,i),l=t.length-1)}l<0&&(l=vi.find(t,o,null!==(r=n.bidiLevel)&&void 0!==r?r:-1,n.assoc));let a=t[l];o==a.side(s,i)&&(a=t[l+=s?1:-1],o=a.side(!s,i));let h=s==(a.dir==i),c=O(e.text,o,h);if(Ci=e.text.slice(Math.min(o,c),Math.max(o,c)),c!=a.side(s,i))return y.cursor(c+e.from,h?-1:1,a.level);let d=l==(s?t.length-1:0)?null:t[l+(s?1:-1)];return d||a.level==i?d&&d.level<a.level?y.cursor(d.side(!s,i)+e.from,s?1:-1,d.level):y.cursor(c+e.from,s?-1:1,a.level):y.cursor(s?e.to:e.from,s?-1:1,i)}class Mi extends Ge{get length(){return this.view.state.doc.length}constructor(e){super(),this.view=e,this.decorations=[],this.dynamicDecorationMap=[],this.domChanged=null,this.hasComposition=null,this.markedForComposition=new Set,this.minWidth=0,this.minWidthFrom=0,this.minWidthTo=0,this.impreciseAnchor=null,this.impreciseHead=null,this.forceSelection=!1,this.lastUpdate=Date.now(),this.setDOM(e.contentDOM),this.children=[new kt],this.children[0].setParent(this),this.updateDeco(),this.updateInner([new li(0,0,0,e.state.doc.length)],0,null)}update(e){var t;let i=e.changedRanges;this.minWidth>0&&i.length&&(i.every((({fromA:e,toA:t})=>t<this.minWidthFrom||e>this.minWidthTo))?(this.minWidthFrom=e.changes.mapPos(this.minWidthFrom,1),this.minWidthTo=e.changes.mapPos(this.minWidthTo,1)):this.minWidth=this.minWidthFrom=this.minWidthTo=0);let n=-1;this.view.inputState.composing>=0&&((null===(t=this.domChanged)||void 0===t?void 0:t.newSel)?n=this.domChanged.newSel.head:function(e,t){let i=!1;t&&e.iterChangedRanges(((e,n)=>{e<t.to&&n>t.from&&(i=!0)}));return i}(e.changes,this.hasComposition)||e.selectionSet||(n=e.state.selection.main.head));let s=n>-1?function(e,t,i){let n=Oi(e,i);if(!n)return null;let{node:s,from:r,to:o}=n,l=s.nodeValue;if(/[\n\r]/.test(l))return null;if(e.state.doc.sliceString(n.from,n.to)!=l)return null;let a=t.invertedDesc,h=new li(a.mapPos(r),a.mapPos(o),r,o),c=[];for(let t=s.parentNode;;t=t.parentNode){let i=Ge.get(t);if(i instanceof dt)c.push({node:t,deco:i.mark});else{if(i instanceof kt||"DIV"==t.nodeName&&t.parentNode==e.contentDOM)return{range:h,text:s,marks:c,line:t};if(t==e.contentDOM)return null;c.push({node:t,deco:new Tt({inclusive:!0,attributes:xt(t),tagName:t.tagName.toLowerCase()})})}}}(this.view,e.changes,n):null;if(this.domChanged=null,this.hasComposition){this.markedForComposition.clear();let{from:t,to:n}=this.hasComposition;i=new li(t,n,e.changes.mapPos(t,-1),e.changes.mapPos(n,1)).addToSet(i.slice())}this.hasComposition=s?{from:s.range.fromB,to:s.range.toB}:null,(ht.ie||ht.chrome)&&!s&&e&&e.state.doc.lines!=e.startState.doc.lines&&(this.forceSelection=!0);let r=function(e,t,i){let n=new Di;return v.compare(e,t,i,n),n.changes}(this.decorations,this.updateDeco(),e.changes);return i=li.extendWithRanges(i,r),!!(7&this.flags||0!=i.length)&&(this.updateInner(i,e.startState.doc.length,s),e.transactions.length&&(this.lastUpdate=Date.now()),!0)}updateInner(e,t,i){this.view.viewState.mustMeasureContent=!0,this.updateChildren(e,t,i);let{observer:n}=this.view;n.ignore((()=>{this.dom.style.height=this.view.viewState.contentHeight/this.view.scaleY+"px",this.dom.style.flexBasis=this.minWidth?this.minWidth+"px":"";let e=ht.chrome||ht.ios?{node:n.selectionRange.focusNode,written:!1}:void 0;this.sync(this.view,e),this.flags&=-8,e&&(e.written||n.selectionRange.focusNode!=e.node)&&(this.forceSelection=!0),this.dom.style.height=""})),this.markedForComposition.forEach((e=>e.flags&=-9));let s=[];if(this.view.viewport.from||this.view.viewport.to<this.view.state.doc.length)for(let e of this.children)e instanceof St&&e.widget instanceof Ti&&s.push(e.dom);n.updateGaps(s)}updateChildren(e,t,i){let n=i?i.range.addToSet(e.slice()):e,s=this.childCursor(t);for(let e=n.length-1;;e--){let t=e>=0?n[e]:null;if(!t)break;let r,o,l,a,{fromA:h,toA:c,fromB:d,toB:u}=t;if(i&&i.range.fromB<u&&i.range.toB>d){let e=Bt.build(this.view.state.doc,d,i.range.fromB,this.decorations,this.dynamicDecorationMap),t=Bt.build(this.view.state.doc,i.range.toB,u,this.decorations,this.dynamicDecorationMap);o=e.breakAtStart,l=e.openStart,a=t.openEnd;let n=this.compositionView(i);t.breakAtStart?n.breakAfter=1:t.content.length&&n.merge(n.length,n.length,t.content[0],!1,t.openStart,0)&&(n.breakAfter=t.content[0].breakAfter,t.content.shift()),e.content.length&&n.merge(0,0,e.content[e.content.length-1],!0,0,e.openEnd)&&e.content.pop(),r=e.content.concat(n).concat(t.content)}else({content:r,breakAtStart:o,openStart:l,openEnd:a}=Bt.build(this.view.state.doc,d,u,this.decorations,this.dynamicDecorationMap));let{i:f,off:g}=s.findPos(c,1),{i:p,off:m}=s.findPos(h,-1);Xe(this,p,m,f,g,r,o,l,a)}i&&this.fixCompositionDOM(i)}compositionView(e){let t=new ct(e.text.nodeValue);t.flags|=8;for(let{deco:i}of e.marks)t=new dt(i,[t],t.length);let i=new kt;return i.append(t,0),i}fixCompositionDOM(e){let t=(e,t)=>{t.flags|=8|(t.children.some((e=>7&e.flags))?1:0),this.markedForComposition.add(t);let i=Ge.get(e);i&&i!=t&&(i.dom=null),t.setDOM(e)},i=this.childPos(e.range.fromB,1),n=this.children[i.i];t(e.line,n);for(let s=e.marks.length-1;s>=-1;s--)i=n.childPos(i.off,1),n=n.children[i.i],t(s>=0?e.marks[s].node:e.text,n)}updateSelection(e=!1,t=!1){!e&&this.view.observer.selectionRange.focusNode||this.view.observer.readSelectionRange();let i=this.view.root.activeElement,n=i==this.dom,s=!n&&Ne(this.dom,this.view.observer.selectionRange)&&!(i&&this.dom.contains(i));if(!(n||t||s))return;let r=this.forceSelection;this.forceSelection=!1;let o=this.view.state.selection.main,l=this.moveToLine(this.domAtPos(o.anchor)),a=o.empty?l:this.moveToLine(this.domAtPos(o.head));if(ht.gecko&&o.empty&&!this.hasComposition&&(1==(h=l).node.nodeType&&h.node.firstChild&&(0==h.offset||"false"==h.node.childNodes[h.offset-1].contentEditable)&&(h.offset==h.node.childNodes.length||"false"==h.node.childNodes[h.offset].contentEditable))){let e=document.createTextNode("");this.view.observer.ignore((()=>l.node.insertBefore(e,l.node.childNodes[l.offset]||null))),l=a=new Ke(e,0),r=!0}var h;let c=this.view.observer.selectionRange;!r&&c.focusNode&&Ee(l.node,l.offset,c.anchorNode,c.anchorOffset)&&Ee(a.node,a.offset,c.focusNode,c.focusOffset)||(this.view.observer.ignore((()=>{ht.android&&ht.chrome&&this.dom.contains(c.focusNode)&&function(e,t){for(let i=e;i&&i!=t;i=i.assignedSlot||i.parentNode)if(1==i.nodeType&&"false"==i.contentEditable)return!0;return!1}(c.focusNode,this.dom)&&(this.dom.blur(),this.dom.focus({preventScroll:!0}));let e=Te(this.view.root);if(e)if(o.empty){if(ht.gecko){let e=(t=l.node,n=l.offset,1!=t.nodeType?0:(n&&"false"==t.childNodes[n-1].contentEditable?1:0)|(n<t.childNodes.length&&"false"==t.childNodes[n].contentEditable?2:0));if(e&&3!=e){let t=Ni(l.node,l.offset,1==e?1:-1);t&&(l=new Ke(t.node,t.offset))}}e.collapse(l.node,l.offset),null!=o.bidiLevel&&void 0!==e.caretBidiLevel&&(e.caretBidiLevel=o.bidiLevel)}else if(e.extend){e.collapse(l.node,l.offset);try{e.extend(a.node,a.offset)}catch(e){}}else{let t=document.createRange();o.anchor>o.head&&([l,a]=[a,l]),t.setEnd(a.node,a.offset),t.setStart(l.node,l.offset),e.removeAllRanges(),e.addRange(t)}else;var t,n;s&&this.view.root.activeElement==this.dom&&(this.dom.blur(),i&&i.focus())})),this.view.observer.setSelectionRange(l,a)),this.impreciseAnchor=l.precise?null:new Ke(c.anchorNode,c.anchorOffset),this.impreciseHead=a.precise?null:new Ke(c.focusNode,c.focusOffset)}enforceCursorAssoc(){if(this.hasComposition)return;let{view:e}=this,t=e.state.selection.main,i=Te(e.root),{anchorNode:n,anchorOffset:s}=e.observer.selectionRange;if(!(i&&t.empty&&t.assoc&&i.modify))return;let r=kt.find(this,t.head);if(!r)return;let o=r.posAtStart;if(t.head==o||t.head==o+r.length)return;let l=this.coordsAt(t.head,-1),a=this.coordsAt(t.head,1);if(!l||!a||l.bottom>a.top)return;let h=this.domAtPos(t.head+t.assoc);i.collapse(h.node,h.offset),i.modify("move",t.assoc<0?"forward":"backward","lineboundary"),e.observer.readSelectionRange();let c=e.observer.selectionRange;e.docView.posFromDOM(c.anchorNode,c.anchorOffset)!=t.from&&i.collapse(n,s)}moveToLine(e){let t,i=this.dom;if(e.node!=i)return e;for(let n=e.offset;!t&&n<i.childNodes.length;n++){let e=Ge.get(i.childNodes[n]);e instanceof kt&&(t=e.domAtPos(0))}for(let n=e.offset-1;!t&&n>=0;n--){let e=Ge.get(i.childNodes[n]);e instanceof kt&&(t=e.domAtPos(e.length))}return t?new Ke(t.node,t.offset,!0):e}nearest(e){for(let t=e;t;){let e=Ge.get(t);if(e&&e.rootView==this)return e;t=t.parentNode}return null}posFromDOM(e,t){let i=this.nearest(e);if(!i)throw new RangeError("Trying to find position for a DOM position outside of the document");return i.localPosFromDOM(e,t)+i.posAtStart}domAtPos(e){let{i:t,off:i}=this.childCursor().findPos(e,-1);for(;t<this.children.length-1;){let e=this.children[t];if(i<e.length||e instanceof kt)break;t++,i=0}return this.children[t].domAtPos(i)}coordsAt(e,t){let i=null,n=0;for(let s=this.length,r=this.children.length-1;r>=0;r--){let o=this.children[r],l=s-o.breakAfter,a=l-o.length;if(l<e)break;a<=e&&(a<e||o.covers(-1))&&(l>e||o.covers(1))&&(!i||o instanceof kt&&!(i instanceof kt&&t>=0))&&(i=o,n=a),s=a}return i?i.coordsAt(e-n,t):null}coordsForChar(e){let{i:t,off:i}=this.childPos(e,1),n=this.children[t];if(!(n instanceof kt))return null;for(;n.children.length;){let{i:e,off:t}=n.childPos(i,1);for(;;e++){if(e==n.children.length)return null;if((n=n.children[e]).length)break}i=t}if(!(n instanceof ct))return null;let s=O(n.text,i);if(s==i)return null;let r=_e(n.dom,i,s).getClientRects();for(let e=0;e<r.length;e++){let t=r[e];if(e==r.length-1||t.top<t.bottom&&t.left<t.right)return t}return null}measureVisibleLineHeights(e){let t=[],{from:i,to:n}=e,s=this.view.contentDOM.clientWidth,r=s>Math.max(this.view.scrollDOM.clientWidth,this.minWidth)+1,o=-1,l=this.view.textDirection==hi.LTR;for(let e=0,a=0;a<this.children.length;a++){let h=this.children[a],c=e+h.length;if(c>n)break;if(e>=i){let i=h.dom.getBoundingClientRect();if(t.push(i.height),r){let t=h.dom.lastChild,n=t?De(t):[];if(n.length){let t=n[n.length-1],r=l?t.right-i.left:i.right-t.left;r>o&&(o=r,this.minWidth=s,this.minWidthFrom=e,this.minWidthTo=c)}}}e=c+h.breakAfter}return t}textDirectionAt(e){let{i:t}=this.childPos(e,1);return"rtl"==getComputedStyle(this.children[t].dom).direction?hi.RTL:hi.LTR}measureTextSize(){for(let e of this.children)if(e instanceof kt){let t=e.measureTextSize();if(t)return t}let e,t,i,n=document.createElement("div");return n.className="cm-line",n.style.width="99999px",n.style.position="absolute",n.textContent="abc def ghi jkl mno pqr stu",this.view.observer.ignore((()=>{this.dom.appendChild(n);let s=De(n.firstChild)[0];e=n.getBoundingClientRect().height,t=s?s.width/27:7,i=s?s.height:e,n.remove()})),{lineHeight:e,charWidth:t,textHeight:i}}childCursor(e=this.length){let t=this.children.length;return t&&(e-=this.children[--t].length),new Ue(this.children,e,t)}computeBlockGapDeco(){let e=[],t=this.view.viewState;for(let i=0,n=0;;n++){let s=n==t.viewports.length?null:t.viewports[n],r=s?s.from-1:this.length;if(r>i){let n=(t.lineBlockAt(r).bottom-t.lineBlockAt(i).top)/this.view.scaleY;e.push(Mt.replace({widget:new Ti(n),block:!0,inclusive:!0,isBlockGap:!0}).range(i,r))}if(!s)break;i=s.to+1}return Mt.set(e)}updateDeco(){let e=this.view.state.facet(ei).map(((e,t)=>(this.dynamicDecorationMap[t]="function"==typeof e)?e(this.view):e));for(let t=e.length;t<e.length+3;t++)this.dynamicDecorationMap[t]=!1;return this.decorations=[...e,this.computeBlockGapDeco(),this.view.viewState.lineGapDeco]}scrollIntoView(e){let t,{range:i}=e,n=this.coordsAt(i.head,i.empty?i.assoc:i.head>i.anchor?-1:1);if(!n)return;!i.empty&&(t=this.coordsAt(i.anchor,i.anchor>i.head?-1:1))&&(n={left:Math.min(n.left,t.left),top:Math.min(n.top,t.top),right:Math.max(n.right,t.right),bottom:Math.max(n.bottom,t.bottom)});let s=ri(this.view),r={left:n.left-s.left,top:n.top-s.top,right:n.right+s.right,bottom:n.bottom+s.bottom};!function(e,t,i,n,s,r,o,l){let a=e.ownerDocument,h=a.defaultView||window;for(let c=e,d=!1;c&&!d;)if(1==c.nodeType){let e,u=c==a.body,f=1,g=1;if(u)e=He(h);else{if(/^(fixed|sticky)$/.test(getComputedStyle(c).position)&&(d=!0),c.scrollHeight<=c.clientHeight&&c.scrollWidth<=c.clientWidth){c=c.assignedSlot||c.parentNode;continue}let t=c.getBoundingClientRect();f=t.width/c.offsetWidth,g=t.height/c.offsetHeight,e={left:t.left,right:t.left+c.clientWidth*f,top:t.top,bottom:t.top+c.clientHeight*g}}let p=0,m=0;if("nearest"==s)t.top<e.top?(m=-(e.top-t.top+o),i>0&&t.bottom>e.bottom+m&&(m=t.bottom-e.bottom+m+o)):t.bottom>e.bottom&&(m=t.bottom-e.bottom+o,i<0&&t.top-m<e.top&&(m=-(e.top+m-t.top+o)));else{let n=t.bottom-t.top,r=e.bottom-e.top;m=("center"==s&&n<=r?t.top+n/2-r/2:"start"==s||"center"==s&&i<0?t.top-o:t.bottom-r+o)-e.top}if("nearest"==n?t.left<e.left?(p=-(e.left-t.left+r),i>0&&t.right>e.right+p&&(p=t.right-e.right+p+r)):t.right>e.right&&(p=t.right-e.right+r,i<0&&t.left<e.left+p&&(p=-(e.left+p-t.left+r))):p=("center"==n?t.left+(t.right-t.left)/2-(e.right-e.left)/2:"start"==n==l?t.left-r:t.right-(e.right-e.left)+r)-e.left,p||m)if(u)h.scrollBy(p,m);else{let e=0,i=0;if(m){let e=c.scrollTop;c.scrollTop+=m/g,i=(c.scrollTop-e)*g}if(p){let t=c.scrollLeft;c.scrollLeft+=p/f,e=(c.scrollLeft-t)*f}t={left:t.left-e,top:t.top-i,right:t.right-e,bottom:t.bottom-i},e&&Math.abs(e-p)<1&&(n="nearest"),i&&Math.abs(i-m)<1&&(s="nearest")}if(u)break;c=c.assignedSlot||c.parentNode}else{if(11!=c.nodeType)break;c=c.host}}(this.view.scrollDOM,r,i.head<i.anchor?-1:1,e.x,e.y,e.xMargin,e.yMargin,this.view.textDirection==hi.LTR)}}class Ti extends Ct{constructor(e){super(),this.height=e}toDOM(){let e=document.createElement("div");return this.updateDOM(e),e}eq(e){return e.height==this.height}updateDOM(e){return e.style.height=this.height+"px",!0}get estimatedHeight(){return this.height}}function Oi(e,t){let i=e.observer.selectionRange,n=i.focusNode&&Ni(i.focusNode,i.focusOffset,0);if(!n)return null;let s=t-n.offset;return{from:s,to:s+n.node.nodeValue.length,node:n.node}}function Ni(e,t,i){if(i<=0)for(let i=e,n=t;;){if(3==i.nodeType)return{node:i,offset:n};if(!(1==i.nodeType&&n>0))break;i=i.childNodes[n-1],n=Pe(i)}if(i>=0)for(let n=e,s=t;;){if(3==n.nodeType)return{node:n,offset:s};if(!(1==n.nodeType&&s<n.childNodes.length&&i>=0))break;n=n.childNodes[s],s=0}return null}let Di=class{constructor(){this.changes=[]}compareRange(e,t){Et(e,t,this.changes)}comparePoint(e,t){Et(e,t,this.changes)}};function Ei(e,t){return t.left>e?t.left-e:Math.max(0,e-t.right)}function Bi(e,t){return t.top>e?t.top-e:Math.max(0,e-t.bottom)}function Li(e,t){return e.top<t.bottom-1&&e.bottom>t.top+1}function Pi(e,t){return t<e.top?{top:t,left:e.left,right:e.right,bottom:e.bottom}:e}function Ri(e,t){return t>e.bottom?{top:e.top,left:e.left,right:e.right,bottom:t}:e}function Hi(e,t,i){let n,s,r,o,l,a,h,c,d=!1;for(let u=e.firstChild;u;u=u.nextSibling){let e=De(u);for(let f=0;f<e.length;f++){let g=e[f];s&&Li(s,g)&&(g=Pi(Ri(g,s.bottom),s.top));let p=Ei(t,g),m=Bi(i,g);if(0==p&&0==m)return 3==u.nodeType?Wi(u,t,i):Hi(u,t,i);if(!n||o>m||o==m&&r>p){n=u,s=g,r=p,o=m;let l=m?i<g.top?-1:1:p?t<g.left?-1:1:0;d=!l||(l>0?f<e.length-1:f>0)}0==p?i>g.bottom&&(!h||h.bottom<g.bottom)?(l=u,h=g):i<g.top&&(!c||c.top>g.top)&&(a=u,c=g):h&&Li(h,g)?h=Ri(h,g.bottom):c&&Li(c,g)&&(c=Pi(c,g.top))}}if(h&&h.bottom>=i?(n=l,s=h):c&&c.top<=i&&(n=a,s=c),!n)return{node:e,offset:0};let u=Math.max(s.left,Math.min(s.right,t));return 3==n.nodeType?Wi(n,u,i):d&&"false"!=n.contentEditable?Hi(n,u,i):{node:e,offset:Array.prototype.indexOf.call(e.childNodes,n)+(t>=(s.left+s.right)/2?1:0)}}function Wi(e,t,i){let n=e.nodeValue.length,s=-1,r=1e9,o=0;for(let l=0;l<n;l++){let n=_e(e,l,l+1).getClientRects();for(let a=0;a<n.length;a++){let h=n[a];if(h.top==h.bottom)continue;o||(o=t-h.left);let c=(h.top>i?h.top-i:i-h.bottom)-1;if(h.left-1<=t&&h.right+1>=t&&c<r){let i=t>=(h.left+h.right)/2,n=i;if(ht.chrome||ht.gecko){_e(e,l).getBoundingClientRect().left==h.right&&(n=!i)}if(c<=0)return{node:e,offset:l+(n?1:0)};s=l+(n?1:0),r=c}}}return{node:e,offset:s>-1?s:o>0?e.nodeValue.length:0}}function Vi(e,t,i,n=-1){var s,r;let o,l=e.contentDOM.getBoundingClientRect(),a=l.top+e.viewState.paddingTop,{docHeight:h}=e.viewState,{x:c,y:d}=t,u=d-a;if(u<0)return 0;if(u>h)return e.state.doc.length;for(let t=e.viewState.heightOracle.textHeight/2,s=!1;o=e.elementAtHeight(u),o.type!=At.Text;)for(;u=n>0?o.bottom+t:o.top-t,!(u>=0&&u<=h);){if(s)return i?null:0;s=!0,n=-n}d=a+u;let f=o.from;if(f<e.viewport.from)return 0==e.viewport.from?0:i?null:zi(e,l,o,c,d);if(f>e.viewport.to)return e.viewport.to==e.state.doc.length?e.state.doc.length:i?null:zi(e,l,o,c,d);let g=e.dom.ownerDocument,p=e.root.elementFromPoint?e.root:g,m=p.elementFromPoint(c,d);m&&!e.contentDOM.contains(m)&&(m=null),m||(c=Math.max(l.left+1,Math.min(l.right-1,c)),m=p.elementFromPoint(c,d),m&&!e.contentDOM.contains(m)&&(m=null));let b,v=-1;if(m&&0!=(null===(s=e.docView.nearest(m))||void 0===s?void 0:s.isEditable))if(g.caretPositionFromPoint){let e=g.caretPositionFromPoint(c,d);e&&({offsetNode:b,offset:v}=e)}else if(g.caretRangeFromPoint){let t=g.caretRangeFromPoint(c,d);t&&(({startContainer:b,startOffset:v}=t),(!e.contentDOM.contains(b)||ht.safari&&function(e,t,i){let n;if(3!=e.nodeType||t!=(n=e.nodeValue.length))return!1;for(let t=e.nextSibling;t;t=t.nextSibling)if(1!=t.nodeType||"BR"!=t.nodeName)return!1;return _e(e,n-1,n).getBoundingClientRect().left>i}(b,v,c)||ht.chrome&&function(e,t,i){if(0!=t)return!1;for(let t=e;;){let e=t.parentNode;if(!e||1!=e.nodeType||e.firstChild!=t)return!1;if(e.classList.contains("cm-line"))break;t=e}let n=1==e.nodeType?e.getBoundingClientRect():_e(e,0,Math.max(e.nodeValue.length,1)).getBoundingClientRect();return i-n.left>5}(b,v,c))&&(b=void 0))}if(!b||!e.docView.dom.contains(b)){let t=kt.find(e.docView,f);if(!t)return u>o.top+o.height/2?o.to:o.from;({node:b,offset:v}=Hi(t.dom,c,d))}let w=e.docView.nearest(b);if(!w)return null;if(w.isWidget&&1==(null===(r=w.dom)||void 0===r?void 0:r.nodeType)){let e=w.dom.getBoundingClientRect();return t.y<e.top||t.y<=e.bottom&&t.x<=(e.left+e.right)/2?w.posAtStart:w.posAtEnd}return w.localPosFromDOM(b,v)+w.posAtStart}function zi(e,t,i,n,s){let r=Math.round((n-t.left)*e.defaultCharacterWidth);if(e.lineWrapping&&i.height>1.5*e.defaultLineHeight){let t=e.viewState.heightOracle.textHeight;r+=Math.floor((s-i.top-.5*(e.defaultLineHeight-t))/t)*e.viewState.heightOracle.lineLength}let o=e.state.sliceDoc(i.from,i.to);return i.from+N(o,r,e.state.tabSize)}function Fi(e,t,i,n){let s=function(e,t){let i=e.lineBlockAt(t);if(Array.isArray(i.type))for(let e of i.type)if(e.to>t||e.to==t&&(e.to==i.to||e.type==At.Text))return e;return i}(e,t.head),r=n&&s.type==At.Text&&(e.lineWrapping||s.widgetLineBreaks)?e.coordsAtPos(t.assoc<0&&t.head>s.from?t.head-1:t.head):null;if(r){let t=e.dom.getBoundingClientRect(),n=e.textDirectionAt(s.from),o=e.posAtCoords({x:i==(n==hi.LTR)?t.right-1:t.left+1,y:(r.top+r.bottom)/2});if(null!=o)return y.cursor(o,i?-1:1)}return y.cursor(i?s.to:s.from,i?-1:1)}function _i(e,t,i,n){let s=e.state.doc.lineAt(t.head),r=e.bidiSpans(s),o=e.textDirectionAt(s.from);for(let l=t,a=null;;){let t=Ai(s,r,o,l,i),h=Ci;if(!t){if(s.number==(i?e.state.doc.lines:1))return l;h="\n",s=e.state.doc.line(s.number+(i?1:-1)),r=e.bidiSpans(s),t=y.cursor(i?s.from:s.to)}if(a){if(!a(h))return l}else{if(!n)return t;a=n(h)}l=t}}function Ii(e,t,i){for(;;){let n=0;for(let s of e)s.between(t-1,t+1,((e,s,r)=>{if(t>e&&t<s){let r=n||i||(t-e<s-t?-1:1);t=r<0?e:s,n=r}}));if(!n)return t}}function $i(e,t,i){let n=Ii(e.state.facet(ti).map((t=>t(e))),i.from,t.head>i.from?-1:1);return n==i.from?i:y.cursor(n,n<i.from?1:-1)}class qi{setSelectionOrigin(e){this.lastSelectionOrigin=e,this.lastSelectionTime=Date.now()}constructor(e){this.view=e,this.lastKeyCode=0,this.lastKeyTime=0,this.lastTouchTime=0,this.lastFocusTime=0,this.lastScrollTop=0,this.lastScrollLeft=0,this.pendingIOSKey=void 0,this.lastSelectionOrigin=null,this.lastSelectionTime=0,this.lastEscPress=0,this.lastContextMenu=0,this.scrollHandlers=[],this.handlers=Object.create(null),this.composing=-1,this.compositionFirstChange=null,this.compositionEndedAt=0,this.compositionPendingKey=!1,this.compositionPendingChange=!1,this.mouseSelection=null,this.handleEvent=this.handleEvent.bind(this),this.notifiedFocused=e.hasFocus,ht.safari&&e.contentDOM.addEventListener("input",(()=>null)),ht.gecko&&function(e){vn.has(e)||(vn.add(e),e.addEventListener("copy",(()=>{})),e.addEventListener("cut",(()=>{})))}(e.contentDOM.ownerDocument)}handleEvent(e){(function(e,t){if(!t.bubbles)return!0;if(t.defaultPrevented)return!1;for(let i,n=t.target;n!=e.contentDOM;n=n.parentNode)if(!n||11==n.nodeType||(i=Ge.get(n))&&i.ignoreEvent(t))return!1;return!0})(this.view,e)&&!this.ignoreDuringComposition(e)&&("keydown"==e.type&&this.keydown(e)||this.runHandlers(e.type,e))}runHandlers(e,t){let i=this.handlers[e];if(i){for(let e of i.observers)e(this.view,t);for(let e of i.handlers){if(t.defaultPrevented)break;if(e(this.view,t)){t.preventDefault();break}}}}ensureHandlers(e){let t=ji(e),i=this.handlers,n=this.view.contentDOM;for(let e in t)if("scroll"!=e){let s=!t[e].handlers.length,r=i[e];r&&s!=!r.handlers.length&&(n.removeEventListener(e,this.handleEvent),r=null),r||n.addEventListener(e,this.handleEvent,{passive:s})}for(let e in i)"scroll"==e||t[e]||n.removeEventListener(e,this.handleEvent);this.handlers=t}keydown(e){if(this.lastKeyCode=e.keyCode,this.lastKeyTime=Date.now(),9==e.keyCode&&Date.now()<this.lastEscPress+2e3)return!0;if(27!=e.keyCode&&Ui.indexOf(e.keyCode)<0&&(this.view.inputState.lastEscPress=0),ht.android&&ht.chrome&&!e.synthetic&&(13==e.keyCode||8==e.keyCode))return this.view.observer.delayAndroidKey(e.key,e.keyCode),!0;let t;return!ht.ios||e.synthetic||e.altKey||e.metaKey||!((t=Gi.find((t=>t.keyCode==e.keyCode)))&&!e.ctrlKey||Yi.indexOf(e.key)>-1&&e.ctrlKey&&!e.shiftKey)?(229!=e.keyCode&&this.view.observer.forceFlush(),!1):(this.pendingIOSKey=t||e,setTimeout((()=>this.flushIOSKey()),250),!0)}flushIOSKey(){let e=this.pendingIOSKey;return!!e&&(this.pendingIOSKey=void 0,Ie(this.view.contentDOM,e.key,e.keyCode))}ignoreDuringComposition(e){return!!/^key/.test(e.type)&&(this.composing>0||!!(ht.safari&&!ht.ios&&this.compositionPendingKey&&Date.now()-this.compositionEndedAt<100)&&(this.compositionPendingKey=!1,!0))}startMouseSelection(e){this.mouseSelection&&this.mouseSelection.destroy(),this.mouseSelection=e}update(e){this.mouseSelection&&this.mouseSelection.update(e),e.transactions.length&&(this.lastKeyCode=this.lastSelectionTime=0)}destroy(){this.mouseSelection&&this.mouseSelection.destroy()}}function Ki(e,t){return(i,n)=>{try{return t.call(e,n,i)}catch(e){jt(i.state,e)}}}function ji(e){let t=Object.create(null);function i(e){return t[e]||(t[e]={observers:[],handlers:[]})}for(let t of e){let e=t.spec;if(e&&e.domEventHandlers)for(let n in e.domEventHandlers){let s=e.domEventHandlers[n];s&&i(n).handlers.push(Ki(t.value,s))}if(e&&e.domEventObservers)for(let n in e.domEventObservers){let s=e.domEventObservers[n];s&&i(n).observers.push(Ki(t.value,s))}}for(let e in Ji)i(e).handlers.push(Ji[e]);for(let e in Qi)i(e).observers.push(Qi[e]);return t}const Gi=[{key:"Backspace",keyCode:8,inputType:"deleteContentBackward"},{key:"Enter",keyCode:13,inputType:"insertParagraph"},{key:"Enter",keyCode:13,inputType:"insertLineBreak"},{key:"Delete",keyCode:46,inputType:"deleteContentForward"}],Yi="dthko",Ui=[16,17,18,20,91,92,224,225];function Xi(e){return.7*Math.max(0,e)+8}class Zi{constructor(e,t,i,n){this.view=e,this.startEvent=t,this.style=i,this.mustSelect=n,this.scrollSpeed={x:0,y:0},this.scrolling=-1,this.lastEvent=t,this.scrollParent=function(e){let t=e.ownerDocument;for(let i=e.parentNode;i&&i!=t.body;)if(1==i.nodeType){if(i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)return i;i=i.assignedSlot||i.parentNode}else{if(11!=i.nodeType)break;i=i.host}return null}(e.contentDOM),this.atoms=e.state.facet(ti).map((t=>t(e)));let s=e.contentDOM.ownerDocument;s.addEventListener("mousemove",this.move=this.move.bind(this)),s.addEventListener("mouseup",this.up=this.up.bind(this)),this.extend=t.shiftKey,this.multiple=e.state.facet(x.allowMultipleSelections)&&function(e,t){let i=e.state.facet(Rt);return i.length?i[0](t):ht.mac?t.metaKey:t.ctrlKey}(e,t),this.dragging=!(!function(e,t){let{main:i}=e.state.selection;if(i.empty)return!1;let n=Te(e.root);if(!n||0==n.rangeCount)return!0;let s=n.getRangeAt(0).getClientRects();for(let e=0;e<s.length;e++){let i=s[e];if(i.left<=t.clientX&&i.right>=t.clientX&&i.top<=t.clientY&&i.bottom>=t.clientY)return!0}return!1}(e,t)||1!=un(t))&&null}start(e){!1===this.dragging&&this.select(e)}move(e){var t,i,n;if(0==e.buttons)return this.destroy();if(this.dragging||null==this.dragging&&(i=this.startEvent,n=e,Math.max(Math.abs(i.clientX-n.clientX),Math.abs(i.clientY-n.clientY))<10))return;this.select(this.lastEvent=e);let s=0,r=0,o=(null===(t=this.scrollParent)||void 0===t?void 0:t.getBoundingClientRect())||{left:0,top:0,right:this.view.win.innerWidth,bottom:this.view.win.innerHeight},l=ri(this.view);e.clientX-l.left<=o.left+6?s=-Xi(o.left-e.clientX):e.clientX+l.right>=o.right-6&&(s=Xi(e.clientX-o.right)),e.clientY-l.top<=o.top+6?r=-Xi(o.top-e.clientY):e.clientY+l.bottom>=o.bottom-6&&(r=Xi(e.clientY-o.bottom)),this.setScrollSpeed(s,r)}up(e){null==this.dragging&&this.select(this.lastEvent),this.dragging||e.preventDefault(),this.destroy()}destroy(){this.setScrollSpeed(0,0);let e=this.view.contentDOM.ownerDocument;e.removeEventListener("mousemove",this.move),e.removeEventListener("mouseup",this.up),this.view.inputState.mouseSelection=null}setScrollSpeed(e,t){this.scrollSpeed={x:e,y:t},e||t?this.scrolling<0&&(this.scrolling=setInterval((()=>this.scroll()),50)):this.scrolling>-1&&(clearInterval(this.scrolling),this.scrolling=-1)}scroll(){this.scrollParent?(this.scrollParent.scrollLeft+=this.scrollSpeed.x,this.scrollParent.scrollTop+=this.scrollSpeed.y):this.view.win.scrollBy(this.scrollSpeed.x,this.scrollSpeed.y),!1===this.dragging&&this.select(this.lastEvent)}skipAtoms(e){let t=null;for(let i=0;i<e.ranges.length;i++){let n=e.ranges[i],s=null;if(n.empty){let e=Ii(this.atoms,n.from,0);e!=n.from&&(s=y.cursor(e,-1))}else{let e=Ii(this.atoms,n.from,-1),t=Ii(this.atoms,n.to,1);e==n.from&&t==n.to||(s=y.range(n.from==n.anchor?e:t,n.from==n.head?e:t))}s&&(t||(t=e.ranges.slice()),t[i]=s)}return t?y.create(t,e.mainIndex):e}select(e){let{view:t}=this,i=this.skipAtoms(this.style.get(e,this.extend,this.multiple));(this.mustSelect||!i.eq(t.state.selection)||i.main.assoc!=t.state.selection.main.assoc&&!1===this.dragging)&&this.view.dispatch({selection:i,userEvent:"select.pointer"}),this.mustSelect=!1}update(e){e.docChanged&&this.dragging&&(this.dragging=this.dragging.map(e.changes)),this.style.update(e)&&setTimeout((()=>this.select(this.lastEvent)),20)}}const Ji=Object.create(null),Qi=Object.create(null),en=ht.ie&&ht.ie_version<15||ht.ios&&ht.webkit_version<604;function tn(e,t){let i,{state:n}=e,s=1,r=n.toText(t),o=r.lines==n.selection.ranges.length;if(null!=gn&&n.selection.ranges.every((e=>e.empty))&&gn==r.toString()){let e=-1;i=n.changeByRange((i=>{let l=n.doc.lineAt(i.from);if(l.from==e)return{range:i};e=l.from;let a=n.toText((o?r.line(s++).text:t)+n.lineBreak);return{changes:{from:l.from,insert:a},range:y.cursor(i.from+a.length)}}))}else i=o?n.changeByRange((e=>{let t=r.line(s++);return{changes:{from:e.from,to:e.to,insert:t.text},range:y.cursor(e.from+t.length)}})):n.replaceSelection(r);e.dispatch(i,{userEvent:"input.paste",scrollIntoView:!0})}function nn(e,t,i,n){if(1==n)return y.cursor(t,i);if(2==n)return function(e,t,i=1){let n=e.charCategorizer(t),s=e.doc.lineAt(t),r=t-s.from;if(0==s.length)return y.cursor(t);0==r?i=1:r==s.length&&(i=-1);let o=r,l=r;i<0?o=O(s.text,r,!1):l=O(s.text,r);let a=n(s.text.slice(o,l));for(;o>0;){let e=O(s.text,o,!1);if(n(s.text.slice(e,o))!=a)break;o=e}for(;l<s.length;){let e=O(s.text,l);if(n(s.text.slice(l,e))!=a)break;l=e}return y.range(o+s.from,l+s.from)}(e.state,t,i);{let i=kt.find(e.docView,t),n=e.state.doc.lineAt(i?i.posAtEnd:t),s=i?i.posAtStart:n.from,r=i?i.posAtEnd:n.to;return r<e.state.doc.length&&r==n.to&&r++,y.range(s,r)}}Qi.scroll=e=>{e.inputState.lastScrollTop=e.scrollDOM.scrollTop,e.inputState.lastScrollLeft=e.scrollDOM.scrollLeft},Ji.keydown=(e,t)=>(e.inputState.setSelectionOrigin("select"),27==t.keyCode&&(e.inputState.lastEscPress=Date.now()),!1),Qi.touchstart=(e,t)=>{e.inputState.lastTouchTime=Date.now(),e.inputState.setSelectionOrigin("select.pointer")},Qi.touchmove=e=>{e.inputState.setSelectionOrigin("select.pointer")},Ji.mousedown=(e,t)=>{if(e.observer.flush(),e.inputState.lastTouchTime>Date.now()-2e3)return!1;let i=null;for(let n of e.state.facet(Wt))if(i=n(e,t),i)break;if(i||0!=t.button||(i=function(e,t){let i=ln(e,t),n=un(t),s=e.state.selection;return{update(e){e.docChanged&&(i.pos=e.changes.mapPos(i.pos),s=s.map(e.changes))},get(t,r,o){let l,a=ln(e,t),h=nn(e,a.pos,a.bias,n);if(i.pos!=a.pos&&!r){let t=nn(e,i.pos,i.bias,n),s=Math.min(t.from,h.from),r=Math.max(t.to,h.to);h=s<h.from?y.range(s,r):y.range(r,s)}return r?s.replaceRange(s.main.extend(h.from,h.to)):o&&1==n&&s.ranges.length>1&&(l=function(e,t){for(let i=0;i<e.ranges.length;i++){let{from:n,to:s}=e.ranges[i];if(n<=t&&s>=t)return y.create(e.ranges.slice(0,i).concat(e.ranges.slice(i+1)),e.mainIndex==i?0:e.mainIndex-(e.mainIndex>i?1:0))}return null}(s,a.pos))?l:o?s.addRange(h):y.create([h])}}}(e,t)),i){let n=!e.hasFocus;e.inputState.startMouseSelection(new Zi(e,t,i,n)),n&&e.observer.ignore((()=>Fe(e.contentDOM)));let s=e.inputState.mouseSelection;if(s)return s.start(t),!1===s.dragging}return!1};let sn=(e,t)=>e>=t.top&&e<=t.bottom,rn=(e,t,i)=>sn(t,i)&&e>=i.left&&e<=i.right;function on(e,t,i,n){let s=kt.find(e.docView,t);if(!s)return 1;let r=t-s.posAtStart;if(0==r)return 1;if(r==s.length)return-1;let o=s.coordsAt(r,-1);if(o&&rn(i,n,o))return-1;let l=s.coordsAt(r,1);return l&&rn(i,n,l)?1:o&&sn(n,o)?-1:1}function ln(e,t){let i=e.posAtCoords({x:t.clientX,y:t.clientY},!1);return{pos:i,bias:on(e,i,t.clientX,t.clientY)}}const an=ht.ie&&ht.ie_version<=11;let hn=null,cn=0,dn=0;function un(e){if(!an)return e.detail;let t=hn,i=dn;return hn=e,dn=Date.now(),cn=!t||i>Date.now()-400&&Math.abs(t.clientX-e.clientX)<2&&Math.abs(t.clientY-e.clientY)<2?(cn+1)%3:1}function fn(e,t,i,n){if(!i)return;let s=e.posAtCoords({x:t.clientX,y:t.clientY},!1),{mouseSelection:r}=e.inputState,o=n&&r&&r.dragging&&function(e,t){let i=e.state.facet(Ht);return i.length?i[0](t):ht.mac?!t.altKey:!t.ctrlKey}(e,t)?{from:r.dragging.from,to:r.dragging.to}:null,l={from:s,insert:i},a=e.state.changes(o?[o,l]:l);e.focus(),e.dispatch({changes:a,selection:{anchor:a.mapPos(s,-1),head:a.mapPos(s,1)},userEvent:o?"move.drop":"input.drop"})}Ji.dragstart=(e,t)=>{let{selection:{main:i}}=e.state,{mouseSelection:n}=e.inputState;return n&&(n.dragging=i),t.dataTransfer&&(t.dataTransfer.setData("Text",e.state.sliceDoc(i.from,i.to)),t.dataTransfer.effectAllowed="copyMove"),!1},Ji.drop=(e,t)=>{if(!t.dataTransfer)return!1;if(e.state.readOnly)return!0;let i=t.dataTransfer.files;if(i&&i.length){let n=Array(i.length),s=0,r=()=>{++s==i.length&&fn(e,t,n.filter((e=>null!=e)).join(e.state.lineBreak),!1)};for(let e=0;e<i.length;e++){let t=new FileReader;t.onerror=r,t.onload=()=>{/[\x00-\x08\x0e-\x1f]{2}/.test(t.result)||(n[e]=t.result),r()},t.readAsText(i[e])}return!0}{let i=t.dataTransfer.getData("Text");if(i)return fn(e,t,i,!0),!0}return!1},Ji.paste=(e,t)=>{if(e.state.readOnly)return!0;e.observer.flush();let i=en?null:t.clipboardData;return i?(tn(e,i.getData("text/plain")||i.getData("text/uri-text")),!0):(function(e){let t=e.dom.parentNode;if(!t)return;let i=t.appendChild(document.createElement("textarea"));i.style.cssText="position: fixed; left: -10000px; top: 10px",i.focus(),setTimeout((()=>{e.focus(),i.remove(),tn(e,i.value)}),50)}(e),!1)};let gn=null;Ji.copy=Ji.cut=(e,t)=>{let{text:i,ranges:n,linewise:s}=function(e){let t=[],i=[],n=!1;for(let n of e.selection.ranges)n.empty||(t.push(e.sliceDoc(n.from,n.to)),i.push(n));if(!t.length){let s=-1;for(let{from:n}of e.selection.ranges){let r=e.doc.lineAt(n);r.number>s&&(t.push(r.text),i.push({from:r.from,to:Math.min(e.doc.length,r.to+1)})),s=r.number}n=!0}return{text:t.join(e.lineBreak),ranges:i,linewise:n}}(e.state);if(!i&&!s)return!1;gn=s?i:null,"cut"!=t.type||e.state.readOnly||e.dispatch({changes:n,scrollIntoView:!0,userEvent:"delete.cut"});let r=en?null:t.clipboardData;return r?(r.clearData(),r.setData("text/plain",i),!0):(function(e,t){let i=e.dom.parentNode;if(!i)return;let n=i.appendChild(document.createElement("textarea"));n.style.cssText="position: fixed; left: -10000px; top: 10px",n.value=t,n.focus(),n.selectionEnd=t.length,n.selectionStart=0,setTimeout((()=>{n.remove(),e.focus()}),50)}(e,i),!1)};const pn=D.define();function mn(e,t){let i=[];for(let n of e.facet(_t)){let s=n(e,t);s&&i.push(s)}return i?e.update({effects:i,annotations:pn.of(!0)}):null}function bn(e){setTimeout((()=>{let t=e.hasFocus;if(t!=e.inputState.notifiedFocused){let i=mn(e.state,t);i?e.dispatch(i):e.update([])}}),10)}Qi.focus=e=>{e.inputState.lastFocusTime=Date.now(),e.scrollDOM.scrollTop||!e.inputState.lastScrollTop&&!e.inputState.lastScrollLeft||(e.scrollDOM.scrollTop=e.inputState.lastScrollTop,e.scrollDOM.scrollLeft=e.inputState.lastScrollLeft),bn(e)},Qi.blur=e=>{e.observer.clearSelectionRange(),bn(e)},Qi.compositionstart=Qi.compositionupdate=e=>{null==e.inputState.compositionFirstChange&&(e.inputState.compositionFirstChange=!0),e.inputState.composing<0&&(e.inputState.composing=0)},Qi.compositionend=e=>{e.inputState.composing=-1,e.inputState.compositionEndedAt=Date.now(),e.inputState.compositionPendingKey=!0,e.inputState.compositionPendingChange=e.observer.pendingRecords().length>0,e.inputState.compositionFirstChange=null,ht.chrome&&ht.android?e.observer.flushSoon():e.inputState.compositionPendingChange?Promise.resolve().then((()=>e.observer.flush())):setTimeout((()=>{e.inputState.composing<0&&e.docView.hasComposition&&e.update([])}),50)},Qi.contextmenu=e=>{e.inputState.lastContextMenu=Date.now()},Ji.beforeinput=(e,t)=>{var i;let n;if(ht.chrome&&ht.android&&(n=Gi.find((e=>e.inputType==t.inputType)))&&(e.observer.delayAndroidKey(n.key,n.keyCode),"Backspace"==n.key||"Delete"==n.key)){let t=(null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0;setTimeout((()=>{var i;((null===(i=window.visualViewport)||void 0===i?void 0:i.height)||0)>t+10&&e.hasFocus&&(e.contentDOM.blur(),e.focus())}),100)}return!1};const vn=new Set;const wn=["pre-wrap","normal","pre-line","break-spaces"];class yn{constructor(e){this.lineWrapping=e,this.doc=E.empty,this.heightSamples={},this.lineHeight=14,this.charWidth=7,this.textHeight=14,this.lineLength=30,this.heightChanged=!1}heightForGap(e,t){let i=this.doc.lineAt(t).number-this.doc.lineAt(e).number+1;return this.lineWrapping&&(i+=Math.max(0,Math.ceil((t-e-i*this.lineLength*.5)/this.lineLength))),this.lineHeight*i}heightForLine(e){if(!this.lineWrapping)return this.lineHeight;return(1+Math.max(0,Math.ceil((e-this.lineLength)/(this.lineLength-5))))*this.lineHeight}setDoc(e){return this.doc=e,this}mustRefreshForWrapping(e){return wn.indexOf(e)>-1!=this.lineWrapping}mustRefreshForHeights(e){let t=!1;for(let i=0;i<e.length;i++){let n=e[i];n<0?i++:this.heightSamples[Math.floor(10*n)]||(t=!0,this.heightSamples[Math.floor(10*n)]=!0)}return t}refresh(e,t,i,n,s,r){let o=wn.indexOf(e)>-1,l=Math.round(t)!=Math.round(this.lineHeight)||this.lineWrapping!=o;if(this.lineWrapping=o,this.lineHeight=t,this.charWidth=i,this.textHeight=n,this.lineLength=s,l){this.heightSamples={};for(let e=0;e<r.length;e++){let t=r[e];t<0?e++:this.heightSamples[Math.floor(10*t)]=!0}}return l}}class xn{constructor(e,t){this.from=e,this.heights=t,this.index=0}get more(){return this.index<this.heights.length}}class kn{constructor(e,t,i,n,s){this.from=e,this.length=t,this.top=i,this.height=n,this._content=s}get type(){return"number"==typeof this._content?At.Text:Array.isArray(this._content)?this._content:this._content.type}get to(){return this.from+this.length}get bottom(){return this.top+this.height}get widget(){return this._content instanceof Nt?this._content.widget:null}get widgetLineBreaks(){return"number"==typeof this._content?this._content:0}join(e){let t=(Array.isArray(this._content)?this._content:[this]).concat(Array.isArray(e._content)?e._content:[e]);return new kn(this.from,this.length+e.length,this.top,this.height+e.height,t)}}var Sn=function(e){return e[e.ByPos=0]="ByPos",e[e.ByHeight=1]="ByHeight",e[e.ByPosNoHeight=2]="ByPosNoHeight",e}(Sn||(Sn={}));const Cn=.001;class An{constructor(e,t,i=2){this.length=e,this.height=t,this.flags=i}get outdated(){return(2&this.flags)>0}set outdated(e){this.flags=(e?2:0)|-3&this.flags}setHeight(e,t){this.height!=t&&(Math.abs(this.height-t)>Cn&&(e.heightChanged=!0),this.height=t)}replace(e,t,i){return An.of(i)}decomposeLeft(e,t){t.push(this)}decomposeRight(e,t){t.push(this)}applyChanges(e,t,i,n){let s=this,r=i.doc;for(let o=n.length-1;o>=0;o--){let{fromA:l,toA:a,fromB:h,toB:c}=n[o],d=s.lineAt(l,Sn.ByPosNoHeight,i.setDoc(t),0,0),u=d.to>=a?d:s.lineAt(a,Sn.ByPosNoHeight,i,0,0);for(c+=u.to-a,a=u.to;o>0&&d.from<=n[o-1].toA;)l=n[o-1].fromA,h=n[o-1].fromB,o--,l<d.from&&(d=s.lineAt(l,Sn.ByPosNoHeight,i,0,0));h+=d.from-l,l=d.from;let f=En.build(i.setDoc(r),e,h,c);s=s.replace(l,a,f)}return s.updateHeight(i,0)}static empty(){return new Tn(0,0)}static of(e){if(1==e.length)return e[0];let t=0,i=e.length,n=0,s=0;for(;;)if(t==i)if(n>2*s){let s=e[t-1];s.break?e.splice(--t,1,s.left,null,s.right):e.splice(--t,1,s.left,s.right),i+=1+s.break,n-=s.size}else{if(!(s>2*n))break;{let t=e[i];t.break?e.splice(i,1,t.left,null,t.right):e.splice(i,1,t.left,t.right),i+=2+t.break,s-=t.size}}else if(n<s){let i=e[t++];i&&(n+=i.size)}else{let t=e[--i];t&&(s+=t.size)}let r=0;return null==e[t-1]?(r=1,t--):null==e[t]&&(r=1,i++),new Nn(An.of(e.slice(0,t)),r,An.of(e.slice(i)))}}An.prototype.size=1;class Mn extends An{constructor(e,t,i){super(e,t),this.deco=i}blockAt(e,t,i,n){return new kn(n,this.length,i,this.height,this.deco||0)}lineAt(e,t,i,n,s){return this.blockAt(0,i,n,s)}forEachLine(e,t,i,n,s,r){e<=s+this.length&&t>=s&&r(this.blockAt(0,i,n,s))}updateHeight(e,t=0,i=!1,n){return n&&n.from<=t&&n.more&&this.setHeight(e,n.heights[n.index++]),this.outdated=!1,this}toString(){return`block(${this.length})`}}class Tn extends Mn{constructor(e,t){super(e,t,null),this.collapsed=0,this.widgetHeight=0,this.breaks=0}blockAt(e,t,i,n){return new kn(n,this.length,i,this.height,this.breaks)}replace(e,t,i){let n=i[0];return 1==i.length&&(n instanceof Tn||n instanceof On&&4&n.flags)&&Math.abs(this.length-n.length)<10?(n instanceof On?n=new Tn(n.length,this.height):n.height=this.height,this.outdated||(n.outdated=!1),n):An.of(i)}updateHeight(e,t=0,i=!1,n){return n&&n.from<=t&&n.more?this.setHeight(e,n.heights[n.index++]):(i||this.outdated)&&this.setHeight(e,Math.max(this.widgetHeight,e.heightForLine(this.length-this.collapsed))+this.breaks*e.lineHeight),this.outdated=!1,this}toString(){return`line(${this.length}${this.collapsed?-this.collapsed:""}${this.widgetHeight?":"+this.widgetHeight:""})`}}class On extends An{constructor(e){super(e,0)}heightMetrics(e,t){let i,n=e.doc.lineAt(t).number,s=e.doc.lineAt(t+this.length).number,r=s-n+1,o=0;if(e.lineWrapping){let t=Math.min(this.height,e.lineHeight*r);i=t/r,this.length>r+1&&(o=(this.height-t)/(this.length-r-1))}else i=this.height/r;return{firstLine:n,lastLine:s,perLine:i,perChar:o}}blockAt(e,t,i,n){let{firstLine:s,lastLine:r,perLine:o,perChar:l}=this.heightMetrics(t,n);if(t.lineWrapping){let s=n+Math.round(Math.max(0,Math.min(1,(e-i)/this.height))*this.length),r=t.doc.lineAt(s),a=o+r.length*l,h=Math.max(i,e-a/2);return new kn(r.from,r.length,h,a,0)}{let n=Math.max(0,Math.min(r-s,Math.floor((e-i)/o))),{from:l,length:a}=t.doc.line(s+n);return new kn(l,a,i+o*n,o,0)}}lineAt(e,t,i,n,s){if(t==Sn.ByHeight)return this.blockAt(e,i,n,s);if(t==Sn.ByPosNoHeight){let{from:t,to:n}=i.doc.lineAt(e);return new kn(t,n-t,0,0,0)}let{firstLine:r,perLine:o,perChar:l}=this.heightMetrics(i,s),a=i.doc.lineAt(e),h=o+a.length*l,c=a.number-r,d=n+o*c+l*(a.from-s-c);return new kn(a.from,a.length,Math.max(n,Math.min(d,n+this.height-h)),h,0)}forEachLine(e,t,i,n,s,r){e=Math.max(e,s),t=Math.min(t,s+this.length);let{firstLine:o,perLine:l,perChar:a}=this.heightMetrics(i,s);for(let h=e,c=n;h<=t;){let t=i.doc.lineAt(h);if(h==e){let i=t.number-o;c+=l*i+a*(e-s-i)}let n=l+a*t.length;r(new kn(t.from,t.length,c,n,0)),c+=n,h=t.to+1}}replace(e,t,i){let n=this.length-t;if(n>0){let e=i[i.length-1];e instanceof On?i[i.length-1]=new On(e.length+n):i.push(null,new On(n-1))}if(e>0){let t=i[0];t instanceof On?i[0]=new On(e+t.length):i.unshift(new On(e-1),null)}return An.of(i)}decomposeLeft(e,t){t.push(new On(e-1),null)}decomposeRight(e,t){t.push(null,new On(this.length-e-1))}updateHeight(e,t=0,i=!1,n){let s=t+this.length;if(n&&n.from<=t+this.length&&n.more){let i=[],r=Math.max(t,n.from),o=-1;for(n.from>t&&i.push(new On(n.from-t-1).updateHeight(e,t));r<=s&&n.more;){let t=e.doc.lineAt(r).length;i.length&&i.push(null);let s=n.heights[n.index++];-1==o?o=s:Math.abs(s-o)>=Cn&&(o=-2);let l=new Tn(t,s);l.outdated=!1,i.push(l),r+=t+1}r<=s&&i.push(null,new On(s-r).updateHeight(e,r));let l=An.of(i);return(o<0||Math.abs(l.height-this.height)>=Cn||Math.abs(o-this.heightMetrics(e,t).perLine)>=Cn)&&(e.heightChanged=!0),l}return(i||this.outdated)&&(this.setHeight(e,e.heightForGap(t,t+this.length)),this.outdated=!1),this}toString(){return`gap(${this.length})`}}class Nn extends An{constructor(e,t,i){super(e.length+t+i.length,e.height+i.height,t|(e.outdated||i.outdated?2:0)),this.left=e,this.right=i,this.size=e.size+i.size}get break(){return 1&this.flags}blockAt(e,t,i,n){let s=i+this.left.height;return e<s?this.left.blockAt(e,t,i,n):this.right.blockAt(e,t,s,n+this.left.length+this.break)}lineAt(e,t,i,n,s){let r=n+this.left.height,o=s+this.left.length+this.break,l=t==Sn.ByHeight?e<r:e<o,a=l?this.left.lineAt(e,t,i,n,s):this.right.lineAt(e,t,i,r,o);if(this.break||(l?a.to<o:a.from>o))return a;let h=t==Sn.ByPosNoHeight?Sn.ByPosNoHeight:Sn.ByPos;return l?a.join(this.right.lineAt(o,h,i,r,o)):this.left.lineAt(o,h,i,n,s).join(a)}forEachLine(e,t,i,n,s,r){let o=n+this.left.height,l=s+this.left.length+this.break;if(this.break)e<l&&this.left.forEachLine(e,t,i,n,s,r),t>=l&&this.right.forEachLine(e,t,i,o,l,r);else{let a=this.lineAt(l,Sn.ByPos,i,n,s);e<a.from&&this.left.forEachLine(e,a.from-1,i,n,s,r),a.to>=e&&a.from<=t&&r(a),t>a.to&&this.right.forEachLine(a.to+1,t,i,o,l,r)}}replace(e,t,i){let n=this.left.length+this.break;if(t<n)return this.balanced(this.left.replace(e,t,i),this.right);if(e>this.left.length)return this.balanced(this.left,this.right.replace(e-n,t-n,i));let s=[];e>0&&this.decomposeLeft(e,s);let r=s.length;for(let e of i)s.push(e);if(e>0&&Dn(s,r-1),t<this.length){let e=s.length;this.decomposeRight(t,s),Dn(s,e)}return An.of(s)}decomposeLeft(e,t){let i=this.left.length;if(e<=i)return this.left.decomposeLeft(e,t);t.push(this.left),this.break&&(i++,e>=i&&t.push(null)),e>i&&this.right.decomposeLeft(e-i,t)}decomposeRight(e,t){let i=this.left.length,n=i+this.break;if(e>=n)return this.right.decomposeRight(e-n,t);e<i&&this.left.decomposeRight(e,t),this.break&&e<n&&t.push(null),t.push(this.right)}balanced(e,t){return e.size>2*t.size||t.size>2*e.size?An.of(this.break?[e,null,t]:[e,t]):(this.left=e,this.right=t,this.height=e.height+t.height,this.outdated=e.outdated||t.outdated,this.size=e.size+t.size,this.length=e.length+this.break+t.length,this)}updateHeight(e,t=0,i=!1,n){let{left:s,right:r}=this,o=t+s.length+this.break,l=null;return n&&n.from<=t+s.length&&n.more?l=s=s.updateHeight(e,t,i,n):s.updateHeight(e,t,i),n&&n.from<=o+r.length&&n.more?l=r=r.updateHeight(e,o,i,n):r.updateHeight(e,o,i),l?this.balanced(s,r):(this.height=this.left.height+this.right.height,this.outdated=!1,this)}toString(){return this.left+(this.break?" ":"-")+this.right}}function Dn(e,t){let i,n;null==e[t]&&(i=e[t-1])instanceof On&&(n=e[t+1])instanceof On&&e.splice(t-1,3,new On(i.length+1+n.length))}class En{constructor(e,t){this.pos=e,this.oracle=t,this.nodes=[],this.lineStart=-1,this.lineEnd=-1,this.covering=null,this.writtenTo=e}get isCovered(){return this.covering&&this.nodes[this.nodes.length-1]==this.covering}span(e,t){if(this.lineStart>-1){let e=Math.min(t,this.lineEnd),i=this.nodes[this.nodes.length-1];i instanceof Tn?i.length+=e-this.pos:(e>this.pos||!this.isCovered)&&this.nodes.push(new Tn(e-this.pos,-1)),this.writtenTo=e,t>e&&(this.nodes.push(null),this.writtenTo++,this.lineStart=-1)}this.pos=t}point(e,t,i){if(e<t||i.heightRelevant){let n=i.widget?i.widget.estimatedHeight:0,s=i.widget?i.widget.lineBreaks:0;n<0&&(n=this.oracle.lineHeight);let r=t-e;i.block?this.addBlock(new Mn(r,n,i)):(r||s||n>=5)&&this.addLineDeco(n,s,r)}else t>e&&this.span(e,t);this.lineEnd>-1&&this.lineEnd<this.pos&&(this.lineEnd=this.oracle.doc.lineAt(this.pos).to)}enterLine(){if(this.lineStart>-1)return;let{from:e,to:t}=this.oracle.doc.lineAt(this.pos);this.lineStart=e,this.lineEnd=t,this.writtenTo<e&&((this.writtenTo<e-1||null==this.nodes[this.nodes.length-1])&&this.nodes.push(this.blankContent(this.writtenTo,e-1)),this.nodes.push(null)),this.pos>e&&this.nodes.push(new Tn(this.pos-e,-1)),this.writtenTo=this.pos}blankContent(e,t){let i=new On(t-e);return this.oracle.doc.lineAt(e).to==t&&(i.flags|=4),i}ensureLine(){this.enterLine();let e=this.nodes.length?this.nodes[this.nodes.length-1]:null;if(e instanceof Tn)return e;let t=new Tn(0,-1);return this.nodes.push(t),t}addBlock(e){this.enterLine();let t=e.deco;t&&t.startSide>0&&!this.isCovered&&this.ensureLine(),this.nodes.push(e),this.writtenTo=this.pos=this.pos+e.length,t&&t.endSide>0&&(this.covering=e)}addLineDeco(e,t,i){let n=this.ensureLine();n.length+=i,n.collapsed+=i,n.widgetHeight=Math.max(n.widgetHeight,e),n.breaks+=t,this.writtenTo=this.pos=this.pos+i}finish(e){let t=0==this.nodes.length?null:this.nodes[this.nodes.length-1];!(this.lineStart>-1)||t instanceof Tn||this.isCovered?(this.writtenTo<this.pos||null==t)&&this.nodes.push(this.blankContent(this.writtenTo,this.pos)):this.nodes.push(new Tn(0,-1));let i=e;for(let e of this.nodes)e instanceof Tn&&e.updateHeight(this.oracle,i),i+=e?e.length:1;return this.nodes}static build(e,t,i,n){let s=new En(i,e);return v.spans(t,i,n,s,0),s.finish(i)}}class Bn{constructor(){this.changes=[]}compareRange(){}comparePoint(e,t,i,n){(e<t||i&&i.heightRelevant||n&&n.heightRelevant)&&Et(e,t,this.changes,5)}}function Ln(e,t){let i=e.getBoundingClientRect(),n=e.ownerDocument,s=n.defaultView||window,r=Math.max(0,i.left),o=Math.min(s.innerWidth,i.right),l=Math.max(0,i.top),a=Math.min(s.innerHeight,i.bottom);for(let t=e.parentNode;t&&t!=n.body;)if(1==t.nodeType){let i=t,n=window.getComputedStyle(i);if((i.scrollHeight>i.clientHeight||i.scrollWidth>i.clientWidth)&&"visible"!=n.overflow){let n=i.getBoundingClientRect();r=Math.max(r,n.left),o=Math.min(o,n.right),l=Math.max(l,n.top),a=t==e.parentNode?n.bottom:Math.min(a,n.bottom)}t="absolute"==n.position||"fixed"==n.position?i.offsetParent:i.parentNode}else{if(11!=t.nodeType)break;t=t.host}return{left:r-i.left,right:Math.max(r,o)-i.left,top:l-(i.top+t),bottom:Math.max(l,a)-(i.top+t)}}function Pn(e,t){let i=e.getBoundingClientRect();return{left:0,right:i.right-i.left,top:t,bottom:i.bottom-(i.top+t)}}class Rn{constructor(e,t,i){this.from=e,this.to=t,this.size=i}static same(e,t){if(e.length!=t.length)return!1;for(let i=0;i<e.length;i++){let n=e[i],s=t[i];if(n.from!=s.from||n.to!=s.to||n.size!=s.size)return!1}return!0}draw(e,t){return Mt.replace({widget:new Hn(this.size*(t?e.scaleY:e.scaleX),t)}).range(this.from,this.to)}}class Hn extends Ct{constructor(e,t){super(),this.size=e,this.vertical=t}eq(e){return e.size==this.size&&e.vertical==this.vertical}toDOM(){let e=document.createElement("div");return this.vertical?e.style.height=this.size+"px":(e.style.width=this.size+"px",e.style.height="2px",e.style.display="inline-block"),e}get estimatedHeight(){return this.vertical?this.size:-1}}class Wn{constructor(e){this.state=e,this.pixelViewport={left:0,right:window.innerWidth,top:0,bottom:0},this.inView=!0,this.paddingTop=0,this.paddingBottom=0,this.contentDOMWidth=0,this.contentDOMHeight=0,this.editorHeight=0,this.editorWidth=0,this.scrollTop=0,this.scrolledToBottom=!0,this.scaleX=1,this.scaleY=1,this.scrollAnchorPos=0,this.scrollAnchorHeight=-1,this.scaler=In,this.scrollTarget=null,this.printing=!1,this.mustMeasureContent=!0,this.defaultTextDirection=hi.LTR,this.visibleRanges=[],this.mustEnforceCursorAssoc=!1;let t=e.facet(Qt).some((e=>"function"!=typeof e&&"cm-lineWrapping"==e.class));this.heightOracle=new yn(t),this.stateDeco=e.facet(ei).filter((e=>"function"!=typeof e)),this.heightMap=An.empty().applyChanges(this.stateDeco,E.empty,this.heightOracle.setDoc(e.doc),[new li(0,0,0,e.doc.length)]),this.viewport=this.getViewport(0,null),this.updateViewportLines(),this.updateForViewport(),this.lineGaps=this.ensureLineGaps([]),this.lineGapDeco=Mt.set(this.lineGaps.map((e=>e.draw(this,!1)))),this.computeVisibleRanges()}updateForViewport(){let e=[this.viewport],{main:t}=this.state.selection;for(let i=0;i<=1;i++){let n=i?t.head:t.anchor;if(!e.some((({from:e,to:t})=>n>=e&&n<=t))){let{from:t,to:i}=this.lineBlockAt(n);e.push(new Vn(t,i))}}this.viewports=e.sort(((e,t)=>e.from-t.from)),this.scaler=this.heightMap.height<=7e6?In:new $n(this.heightOracle,this.heightMap,this.viewports)}updateViewportLines(){this.viewportLines=[],this.heightMap.forEachLine(this.viewport.from,this.viewport.to,this.heightOracle.setDoc(this.state.doc),0,0,(e=>{this.viewportLines.push(1==this.scaler.scale?e:qn(e,this.scaler))}))}update(e,t=null){this.state=e.state;let i=this.stateDeco;this.stateDeco=this.state.facet(ei).filter((e=>"function"!=typeof e));let n=e.changedRanges,s=li.extendWithRanges(n,function(e,t,i){let n=new Bn;return v.compare(e,t,i,n,0),n.changes}(i,this.stateDeco,e?e.changes:T.empty(this.state.doc.length))),r=this.heightMap.height,o=this.scrolledToBottom?null:this.scrollAnchorAt(this.scrollTop);this.heightMap=this.heightMap.applyChanges(this.stateDeco,e.startState.doc,this.heightOracle.setDoc(this.state.doc),s),this.heightMap.height!=r&&(e.flags|=2),o?(this.scrollAnchorPos=e.changes.mapPos(o.from,-1),this.scrollAnchorHeight=o.top):(this.scrollAnchorPos=-1,this.scrollAnchorHeight=this.heightMap.height);let l=s.length?this.mapViewport(this.viewport,e.changes):this.viewport;(t&&(t.range.head<l.from||t.range.head>l.to)||!this.viewportIsAppropriate(l))&&(l=this.getViewport(0,t));let a=!e.changes.empty||2&e.flags||l.from!=this.viewport.from||l.to!=this.viewport.to;this.viewport=l,this.updateForViewport(),a&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps,e.changes))),e.flags|=this.computeVisibleRanges(),t&&(this.scrollTarget=t),!this.mustEnforceCursorAssoc&&e.selectionSet&&e.view.lineWrapping&&e.state.selection.main.empty&&e.state.selection.main.assoc&&!e.state.facet($t)&&(this.mustEnforceCursorAssoc=!0)}measure(e){let t=e.contentDOM,i=window.getComputedStyle(t),n=this.heightOracle,s=i.whiteSpace;this.defaultTextDirection="rtl"==i.direction?hi.RTL:hi.LTR;let r=this.heightOracle.mustRefreshForWrapping(s),o=t.getBoundingClientRect(),l=r||this.mustMeasureContent||this.contentDOMHeight!=o.height;this.contentDOMHeight=o.height,this.mustMeasureContent=!1;let a=0,h=0;if(o.width&&o.height){let e=o.width/t.offsetWidth,i=o.height/t.offsetHeight;(e>.995&&e<1.005||!isFinite(e)||Math.abs(o.width-t.offsetWidth)<1)&&(e=1),(i>.995&&i<1.005||!isFinite(i)||Math.abs(o.height-t.offsetHeight)<1)&&(i=1),this.scaleX==e&&this.scaleY==i||(this.scaleX=e,this.scaleY=i,a|=8,r=l=!0)}let c=(parseInt(i.paddingTop)||0)*this.scaleY,d=(parseInt(i.paddingBottom)||0)*this.scaleY;this.paddingTop==c&&this.paddingBottom==d||(this.paddingTop=c,this.paddingBottom=d,a|=10),this.editorWidth!=e.scrollDOM.clientWidth&&(n.lineWrapping&&(l=!0),this.editorWidth=e.scrollDOM.clientWidth,a|=8);let u=e.scrollDOM.scrollTop*this.scaleY;this.scrollTop!=u&&(this.scrollAnchorHeight=-1,this.scrollTop=u),this.scrolledToBottom=qe(e.scrollDOM);let f=(this.printing?Pn:Ln)(t,this.paddingTop),g=f.top-this.pixelViewport.top,p=f.bottom-this.pixelViewport.bottom;this.pixelViewport=f;let m=this.pixelViewport.bottom>this.pixelViewport.top&&this.pixelViewport.right>this.pixelViewport.left;if(m!=this.inView&&(this.inView=m,m&&(l=!0)),!this.inView&&!this.scrollTarget)return 0;let b=o.width;if(this.contentDOMWidth==b&&this.editorHeight==e.scrollDOM.clientHeight||(this.contentDOMWidth=o.width,this.editorHeight=e.scrollDOM.clientHeight,a|=8),l){let t=e.docView.measureVisibleLineHeights(this.viewport);if(n.mustRefreshForHeights(t)&&(r=!0),r||n.lineWrapping&&Math.abs(b-this.contentDOMWidth)>n.charWidth){let{lineHeight:i,charWidth:o,textHeight:l}=e.docView.measureTextSize();r=i>0&&n.refresh(s,i,o,l,b/o,t),r&&(e.docView.minWidth=0,a|=8)}g>0&&p>0?h=Math.max(g,p):g<0&&p<0&&(h=Math.min(g,p)),n.heightChanged=!1;for(let i of this.viewports){let s=i.from==this.viewport.from?t:e.docView.measureVisibleLineHeights(i);this.heightMap=(r?An.empty().applyChanges(this.stateDeco,E.empty,this.heightOracle,[new li(0,0,0,e.state.doc.length)]):this.heightMap).updateHeight(n,0,r,new xn(i.from,s))}n.heightChanged&&(a|=2)}let v=!this.viewportIsAppropriate(this.viewport,h)||this.scrollTarget&&(this.scrollTarget.range.head<this.viewport.from||this.scrollTarget.range.head>this.viewport.to);return v&&(this.viewport=this.getViewport(h,this.scrollTarget)),this.updateForViewport(),(2&a||v)&&this.updateViewportLines(),(this.lineGaps.length||this.viewport.to-this.viewport.from>4e3)&&this.updateLineGaps(this.ensureLineGaps(r?[]:this.lineGaps,e)),a|=this.computeVisibleRanges(),this.mustEnforceCursorAssoc&&(this.mustEnforceCursorAssoc=!1,e.docView.enforceCursorAssoc()),a}get visibleTop(){return this.scaler.fromDOM(this.pixelViewport.top)}get visibleBottom(){return this.scaler.fromDOM(this.pixelViewport.bottom)}getViewport(e,t){let i=.5-Math.max(-.5,Math.min(.5,e/1e3/2)),n=this.heightMap,s=this.heightOracle,{visibleTop:r,visibleBottom:o}=this,l=new Vn(n.lineAt(r-1e3*i,Sn.ByHeight,s,0,0).from,n.lineAt(o+1e3*(1-i),Sn.ByHeight,s,0,0).to);if(t){let{head:e}=t.range;if(e<l.from||e>l.to){let i,r=Math.min(this.editorHeight,this.pixelViewport.bottom-this.pixelViewport.top),o=n.lineAt(e,Sn.ByPos,s,0,0);i="center"==t.y?(o.top+o.bottom)/2-r/2:"start"==t.y||"nearest"==t.y&&e<l.from?o.top:o.bottom-r,l=new Vn(n.lineAt(i-500,Sn.ByHeight,s,0,0).from,n.lineAt(i+r+500,Sn.ByHeight,s,0,0).to)}}return l}mapViewport(e,t){let i=t.mapPos(e.from,-1),n=t.mapPos(e.to,1);return new Vn(this.heightMap.lineAt(i,Sn.ByPos,this.heightOracle,0,0).from,this.heightMap.lineAt(n,Sn.ByPos,this.heightOracle,0,0).to)}viewportIsAppropriate({from:e,to:t},i=0){if(!this.inView)return!0;let{top:n}=this.heightMap.lineAt(e,Sn.ByPos,this.heightOracle,0,0),{bottom:s}=this.heightMap.lineAt(t,Sn.ByPos,this.heightOracle,0,0),{visibleTop:r,visibleBottom:o}=this;return(0==e||n<=r-Math.max(10,Math.min(-i,250)))&&(t==this.state.doc.length||s>=o+Math.max(10,Math.min(i,250)))&&n>r-2e3&&s<o+2e3}mapLineGaps(e,t){if(!e.length||t.empty)return e;let i=[];for(let n of e)t.touchesRange(n.from,n.to)||i.push(new Rn(t.mapPos(n.from),t.mapPos(n.to),n.size));return i}ensureLineGaps(e,t){let i=this.heightOracle.lineWrapping,n=i?1e4:2e3,s=n>>1,r=n<<1;if(this.defaultTextDirection!=hi.LTR&&!i)return[];let o=[],l=(n,r,a,h)=>{if(r-n<s)return;let c=this.state.selection.main,d=[c.from];c.empty||d.push(c.to);for(let e of d)if(e>n&&e<r)return l(n,e-10,a,h),void l(e+10,r,a,h);let u=function(e,t){for(let i of e)if(t(i))return i;return}(e,(e=>e.from>=a.from&&e.to<=a.to&&Math.abs(e.from-n)<s&&Math.abs(e.to-r)<s&&!d.some((t=>e.from<t&&e.to>t))));if(!u){if(r<a.to&&t&&i&&t.visibleRanges.some((e=>e.from<=r&&e.to>=r))){let e=t.moveToLineBoundary(y.cursor(r),!1,!0).head;e>n&&(r=e)}u=new Rn(n,r,this.gapSize(a,n,r,h))}o.push(u)};for(let e of this.viewportLines){if(e.length<r)continue;let t=zn(e.from,e.to,this.stateDeco);if(t.total<r)continue;let s,o,a=this.scrollTarget?this.scrollTarget.range.head:null;if(i){let i,r,l=n/this.heightOracle.lineLength*this.heightOracle.lineHeight;if(null!=a){let n=_n(t,a),s=((this.visibleBottom-this.visibleTop)/2+l)/e.height;i=n-s,r=n+s}else i=(this.visibleTop-e.top-l)/e.height,r=(this.visibleBottom-e.top+l)/e.height;s=Fn(t,i),o=Fn(t,r)}else{let e,i,r=t.total*this.heightOracle.charWidth,l=n*this.heightOracle.charWidth;if(null!=a){let n=_n(t,a),s=((this.pixelViewport.right-this.pixelViewport.left)/2+l)/r;e=n-s,i=n+s}else e=(this.pixelViewport.left-l)/r,i=(this.pixelViewport.right+l)/r;s=Fn(t,e),o=Fn(t,i)}s>e.from&&l(e.from,s,e,t),o<e.to&&l(o,e.to,e,t)}return o}gapSize(e,t,i,n){let s=_n(n,i)-_n(n,t);return this.heightOracle.lineWrapping?e.height*s:n.total*this.heightOracle.charWidth*s}updateLineGaps(e){Rn.same(e,this.lineGaps)||(this.lineGaps=e,this.lineGapDeco=Mt.set(e.map((e=>e.draw(this,this.heightOracle.lineWrapping)))))}computeVisibleRanges(){let e=this.stateDeco;this.lineGaps.length&&(e=e.concat(this.lineGapDeco));let t=[];v.spans(e,this.viewport.from,this.viewport.to,{span(e,i){t.push({from:e,to:i})},point(){}},20);let i=t.length!=this.visibleRanges.length||this.visibleRanges.some(((e,i)=>e.from!=t[i].from||e.to!=t[i].to));return this.visibleRanges=t,i?4:0}lineBlockAt(e){return e>=this.viewport.from&&e<=this.viewport.to&&this.viewportLines.find((t=>t.from<=e&&t.to>=e))||qn(this.heightMap.lineAt(e,Sn.ByPos,this.heightOracle,0,0),this.scaler)}lineBlockAtHeight(e){return qn(this.heightMap.lineAt(this.scaler.fromDOM(e),Sn.ByHeight,this.heightOracle,0,0),this.scaler)}scrollAnchorAt(e){let t=this.lineBlockAtHeight(e+8);return t.from>=this.viewport.from||this.viewportLines[0].top-e>200?t:this.viewportLines[0]}elementAtHeight(e){return qn(this.heightMap.blockAt(this.scaler.fromDOM(e),this.heightOracle,0,0),this.scaler)}get docHeight(){return this.scaler.toDOM(this.heightMap.height)}get contentHeight(){return this.docHeight+this.paddingTop+this.paddingBottom}}class Vn{constructor(e,t){this.from=e,this.to=t}}function zn(e,t,i){let n=[],s=e,r=0;return v.spans(i,e,t,{span(){},point(e,t){e>s&&(n.push({from:s,to:e}),r+=e-s),s=t}},20),s<t&&(n.push({from:s,to:t}),r+=t-s),{total:r,ranges:n}}function Fn({total:e,ranges:t},i){if(i<=0)return t[0].from;if(i>=1)return t[t.length-1].to;let n=Math.floor(e*i);for(let e=0;;e++){let{from:i,to:s}=t[e],r=s-i;if(n<=r)return i+n;n-=r}}function _n(e,t){let i=0;for(let{from:n,to:s}of e.ranges){if(t<=s){i+=t-n;break}i+=s-n}return i/e.total}const In={toDOM:e=>e,fromDOM:e=>e,scale:1};class $n{constructor(e,t,i){let n=0,s=0,r=0;this.viewports=i.map((({from:i,to:s})=>{let r=t.lineAt(i,Sn.ByPos,e,0,0).top,o=t.lineAt(s,Sn.ByPos,e,0,0).bottom;return n+=o-r,{from:i,to:s,top:r,bottom:o,domTop:0,domBottom:0}})),this.scale=(7e6-n)/(t.height-n);for(let e of this.viewports)e.domTop=r+(e.top-s)*this.scale,r=e.domBottom=e.domTop+(e.bottom-e.top),s=e.bottom}toDOM(e){for(let t=0,i=0,n=0;;t++){let s=t<this.viewports.length?this.viewports[t]:null;if(!s||e<s.top)return n+(e-i)*this.scale;if(e<=s.bottom)return s.domTop+(e-s.top);i=s.bottom,n=s.domBottom}}fromDOM(e){for(let t=0,i=0,n=0;;t++){let s=t<this.viewports.length?this.viewports[t]:null;if(!s||e<s.domTop)return i+(e-n)/this.scale;if(e<=s.domBottom)return s.top+(e-s.domTop);i=s.bottom,n=s.domBottom}}}function qn(e,t){if(1==t.scale)return e;let i=t.toDOM(e.top),n=t.toDOM(e.bottom);return new kn(e.from,e.length,i,n-i,Array.isArray(e._content)?e._content.map((e=>qn(e,t))):e._content)}const Kn=C.define({combine:e=>e.join(" ")}),jn=C.define({combine:e=>e.indexOf(!0)>-1}),Gn=ye.newName(),Yn=ye.newName(),Un=ye.newName(),Xn={"&light":"."+Yn,"&dark":"."+Un};function Zn(e,t,i){return new ye(t,{finish:t=>/&/.test(t)?t.replace(/&\w*/,(t=>{if("&"==t)return e;if(!i||!i[t])throw new RangeError(`Unsupported selector: ${t}`);return i[t]})):e+" "+t})}const Jn=Zn("."+Gn,{"&":{position:"relative !important",boxSizing:"border-box","&.cm-focused":{outline:"1px dotted #212121"},display:"flex !important",flexDirection:"column"},".cm-scroller":{display:"flex !important",alignItems:"flex-start !important",fontFamily:"monospace",lineHeight:1.4,height:"100%",overflowX:"auto",position:"relative",zIndex:0},".cm-content":{margin:0,flexGrow:2,flexShrink:0,display:"block",whiteSpace:"pre",wordWrap:"normal",boxSizing:"border-box",minHeight:"100%",padding:"4px 0",outline:"none","&[contenteditable=true]":{WebkitUserModify:"read-write-plaintext-only"}},".cm-lineWrapping":{whiteSpace_fallback:"pre-wrap",whiteSpace:"break-spaces",wordBreak:"break-word",overflowWrap:"anywhere",flexShrink:1},"&light .cm-content":{caretColor:"black"},"&dark .cm-content":{caretColor:"white"},".cm-line":{display:"block",padding:"0 2px 0 6px"},".cm-layer":{position:"absolute",left:0,top:0,contain:"size style","& > *":{position:"absolute"}},"&light .cm-selectionBackground":{background:"#d9d9d9"},"&dark .cm-selectionBackground":{background:"#222"},"&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#d7d4f0"},"&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground":{background:"#233"},".cm-cursorLayer":{pointerEvents:"none"},"&.cm-focused > .cm-scroller > .cm-cursorLayer":{animation:"steps(1) cm-blink 1.2s infinite"},"@keyframes cm-blink":{"0%":{},"50%":{opacity:0},"100%":{}},"@keyframes cm-blink2":{"0%":{},"50%":{opacity:0},"100%":{}},".cm-cursor, .cm-dropCursor":{borderLeft:"1.2px solid black",marginLeft:"-0.6px",pointerEvents:"none"},".cm-cursor":{display:"none"},"&dark .cm-cursor":{borderLeftColor:"#444"},".cm-dropCursor":{position:"absolute"},"&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor":{display:"block"},"&light .cm-activeLine":{backgroundColor:"#cceeff44"},"&dark .cm-activeLine":{backgroundColor:"#99eeff33"},"&light .cm-specialChar":{color:"red"},"&dark .cm-specialChar":{color:"#f78"},".cm-gutters":{flexShrink:0,display:"flex",height:"100%",boxSizing:"border-box",insetInlineStart:0,zIndex:200},"&light .cm-gutters":{backgroundColor:"#f5f5f5",color:"#6c6c6c",borderRight:"1px solid #ddd"},"&dark .cm-gutters":{backgroundColor:"#333338",color:"#ccc"},".cm-gutter":{display:"flex !important",flexDirection:"column",flexShrink:0,boxSizing:"border-box",minHeight:"100%",overflow:"hidden"},".cm-gutterElement":{boxSizing:"border-box"},".cm-lineNumbers .cm-gutterElement":{padding:"0 3px 0 5px",minWidth:"20px",textAlign:"right",whiteSpace:"nowrap"},"&light .cm-activeLineGutter":{backgroundColor:"#e2f2ff"},"&dark .cm-activeLineGutter":{backgroundColor:"#222227"},".cm-panels":{boxSizing:"border-box",position:"sticky",left:0,right:0},"&light .cm-panels":{backgroundColor:"#f5f5f5",color:"black"},"&light .cm-panels-top":{borderBottom:"1px solid #ddd"},"&light .cm-panels-bottom":{borderTop:"1px solid #ddd"},"&dark .cm-panels":{backgroundColor:"#333338",color:"white"},".cm-tab":{display:"inline-block",overflow:"hidden",verticalAlign:"bottom"},".cm-widgetBuffer":{verticalAlign:"text-top",height:"1em",width:0,display:"inline"},".cm-placeholder":{color:"#888",display:"inline-block",verticalAlign:"top"},".cm-highlightSpace:before":{content:"attr(data-display)",position:"absolute",pointerEvents:"none",color:"#888"},".cm-highlightTab":{backgroundImage:'url(\'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>\')',backgroundSize:"auto 100%",backgroundPosition:"right 90%",backgroundRepeat:"no-repeat"},".cm-trailingSpace":{backgroundColor:"#ff332255"},".cm-button":{verticalAlign:"middle",color:"inherit",fontSize:"70%",padding:".2em 1em",borderRadius:"1px"},"&light .cm-button":{backgroundImage:"linear-gradient(#eff1f5, #d9d9df)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#b4b4b4, #d0d3d6)"}},"&dark .cm-button":{backgroundImage:"linear-gradient(#393939, #111)",border:"1px solid #888","&:active":{backgroundImage:"linear-gradient(#111, #333)"}},".cm-textfield":{verticalAlign:"middle",color:"inherit",fontSize:"70%",border:"1px solid silver",padding:".2em .5em"},"&light .cm-textfield":{backgroundColor:"white"},"&dark .cm-textfield":{border:"1px solid #555",backgroundColor:"inherit"}},Xn),Qn="￿";class es{constructor(e,t){this.points=e,this.text="",this.lineSeparator=t.facet(x.lineSeparator)}append(e){this.text+=e}lineBreak(){this.text+=Qn}readRange(e,t){if(!e)return this;let i=e.parentNode;for(let n=e;;){this.findPointBefore(i,n);let e=this.text.length;this.readNode(n);let s=n.nextSibling;if(s==t)break;let r=Ge.get(n),o=Ge.get(s);(r&&o?r.breakAfter:(r?r.breakAfter:is(n))||is(s)&&("BR"!=n.nodeName||n.cmIgnore)&&this.text.length>e)&&this.lineBreak(),n=s}return this.findPointBefore(i,t),this}readTextNode(e){let t=e.nodeValue;for(let i of this.points)i.node==e&&(i.pos=this.text.length+Math.min(i.offset,t.length));for(let i=0,n=this.lineSeparator?null:/\r\n?|\n/g;;){let s,r=-1,o=1;if(this.lineSeparator?(r=t.indexOf(this.lineSeparator,i),o=this.lineSeparator.length):(s=n.exec(t))&&(r=s.index,o=s[0].length),this.append(t.slice(i,r<0?t.length:r)),r<0)break;if(this.lineBreak(),o>1)for(let t of this.points)t.node==e&&t.pos>this.text.length&&(t.pos-=o-1);i=r+o}}readNode(e){if(e.cmIgnore)return;let t=Ge.get(e),i=t&&t.overrideDOMText;if(null!=i){this.findPointInside(e,i.length);for(let e=i.iter();!e.next().done;)e.lineBreak?this.lineBreak():this.append(e.value)}else 3==e.nodeType?this.readTextNode(e):"BR"==e.nodeName?e.nextSibling&&this.lineBreak():1==e.nodeType&&this.readRange(e.firstChild,null)}findPointBefore(e,t){for(let i of this.points)i.node==e&&e.childNodes[i.offset]==t&&(i.pos=this.text.length)}findPointInside(e,t){for(let i of this.points)(3==e.nodeType?i.node==e:e.contains(i.node))&&(i.pos=this.text.length+(ts(e,i.node,i.offset)?t:0))}}function ts(e,t,i){for(;;){if(!t||i<Pe(t))return!1;if(t==e)return!0;i=Be(t)+1,t=t.parentNode}}function is(e){return 1==e.nodeType&&/^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(e.nodeName)}class ns{constructor(e,t){this.node=e,this.offset=t,this.pos=-1}}class ss{constructor(e,t,i,n){this.typeOver=n,this.bounds=null,this.text="";let{impreciseHead:s,impreciseAnchor:r}=e.docView;if(e.state.readOnly&&t>-1)this.newSel=null;else if(t>-1&&(this.bounds=e.docView.domBoundsAround(t,i,0))){let t=s||r?[]:function(e){let t=[];if(e.root.activeElement!=e.contentDOM)return t;let{anchorNode:i,anchorOffset:n,focusNode:s,focusOffset:r}=e.observer.selectionRange;i&&(t.push(new ns(i,n)),s==i&&r==n||t.push(new ns(s,r)));return t}(e),i=new es(t,e.state);i.readRange(this.bounds.startDOM,this.bounds.endDOM),this.text=i.text,this.newSel=function(e,t){if(0==e.length)return null;let i=e[0].pos,n=2==e.length?e[1].pos:i;return i>-1&&n>-1?y.single(i+t,n+t):null}(t,this.bounds.from)}else{let t=e.observer.selectionRange,i=s&&s.node==t.focusNode&&s.offset==t.focusOffset||!Oe(e.contentDOM,t.focusNode)?e.state.selection.main.head:e.docView.posFromDOM(t.focusNode,t.focusOffset),n=r&&r.node==t.anchorNode&&r.offset==t.anchorOffset||!Oe(e.contentDOM,t.anchorNode)?e.state.selection.main.anchor:e.docView.posFromDOM(t.anchorNode,t.anchorOffset);this.newSel=y.single(n,i)}}}function rs(e,t){let i,{newSel:n}=t,s=e.state.selection.main,r=e.inputState.lastKeyTime>Date.now()-100?e.inputState.lastKeyCode:-1;if(t.bounds){let{from:n,to:o}=t.bounds,l=s.from,a=null;(8===r||ht.android&&t.text.length<o-n)&&(l=s.to,a="end");let h=function(e,t,i,n){let s=Math.min(e.length,t.length),r=0;for(;r<s&&e.charCodeAt(r)==t.charCodeAt(r);)r++;if(r==s&&e.length==t.length)return null;let o=e.length,l=t.length;for(;o>0&&l>0&&e.charCodeAt(o-1)==t.charCodeAt(l-1);)o--,l--;if("end"==n){i-=o+Math.max(0,r-Math.min(o,l))-r}if(o<r&&e.length<t.length){r-=i<=r&&i>=o?r-i:0,l=r+(l-o),o=r}else if(l<r){r-=i<=r&&i>=l?r-i:0,o=r+(o-l),l=r}return{from:r,toA:o,toB:l}}(e.state.doc.sliceString(n,o,Qn),t.text,l-n,a);h&&(ht.chrome&&13==r&&h.toB==h.from+2&&t.text.slice(h.from,h.toB)==Qn+Qn&&h.toB--,i={from:n+h.from,to:n+h.toA,insert:E.of(t.text.slice(h.from,h.toB).split(Qn))})}else n&&(!e.hasFocus&&e.state.facet(Gt)||n.main.eq(s))&&(n=null);if(!i&&!n)return!1;if(!i&&t.typeOver&&!s.empty&&n&&n.main.empty?i={from:s.from,to:s.to,insert:e.state.doc.slice(s.from,s.to)}:i&&i.from>=s.from&&i.to<=s.to&&(i.from!=s.from||i.to!=s.to)&&s.to-s.from-(i.to-i.from)<=4?i={from:s.from,to:s.to,insert:e.state.doc.slice(s.from,i.from).append(i.insert).append(e.state.doc.slice(i.to,s.to))}:(ht.mac||ht.android)&&i&&i.from==i.to&&i.from==s.head-1&&/^\. ?$/.test(i.insert.toString())&&"off"==e.contentDOM.getAttribute("autocorrect")?(n&&2==i.insert.length&&(n=y.single(n.main.anchor-1,n.main.head-1)),i={from:s.from,to:s.to,insert:E.of([" "])}):ht.chrome&&i&&i.from==i.to&&i.from==s.head&&"\n "==i.insert.toString()&&e.lineWrapping&&(n&&(n=y.single(n.main.anchor-1,n.main.head-1)),i={from:s.from,to:s.to,insert:E.of([" "])}),i){if(ht.ios&&e.inputState.flushIOSKey())return!0;if(ht.android&&(i.from==s.from&&i.to==s.to&&1==i.insert.length&&2==i.insert.lines&&Ie(e.contentDOM,"Enter",13)||(i.from==s.from-1&&i.to==s.to&&0==i.insert.length||8==r&&i.insert.length<i.to-i.from&&i.to>s.head)&&Ie(e.contentDOM,"Backspace",8)||i.from==s.from&&i.to==s.to+1&&0==i.insert.length&&Ie(e.contentDOM,"Delete",46)))return!0;let t,o=i.insert.toString();e.inputState.composing>=0&&e.inputState.composing++;let l=()=>t||(t=function(e,t,i){let n,s=e.state,r=s.selection.main;if(t.from>=r.from&&t.to<=r.to&&t.to-t.from>=(r.to-r.from)/3&&(!i||i.main.empty&&i.main.from==t.from+t.insert.length)&&e.inputState.composing<0){let i=r.from<t.from?s.sliceDoc(r.from,t.from):"",o=r.to>t.to?s.sliceDoc(t.to,r.to):"";n=s.replaceSelection(e.state.toText(i+t.insert.sliceString(0,void 0,e.state.lineBreak)+o))}else{let o=s.changes(t),l=i&&i.main.to<=o.newLength?i.main:void 0;if(s.selection.ranges.length>1&&e.inputState.composing>=0&&t.to<=r.to&&t.to>=r.to-10){let a,h=e.state.sliceDoc(t.from,t.to),c=i&&Oi(e,i.main.head);if(c){let e=t.insert.length-(t.to-t.from);a={from:c.from,to:c.to-e}}else a=e.state.doc.lineAt(r.head);let d=r.to-t.to,u=r.to-r.from;n=s.changeByRange((i=>{if(i.from==r.from&&i.to==r.to)return{changes:o,range:l||i.map(o)};let n=i.to-d,c=n-h.length;if(i.to-i.from!=u||e.state.sliceDoc(c,n)!=h||i.to>=a.from&&i.from<=a.to)return{range:i};let f=s.changes({from:c,to:n,insert:t.insert}),g=i.to-r.to;return{changes:f,range:l?y.range(Math.max(0,l.anchor+g),Math.max(0,l.head+g)):i.map(f)}}))}else n={changes:o,selection:l&&s.selection.replaceRange(l)}}let o="input.type";(e.composing||e.inputState.compositionPendingChange&&e.inputState.compositionEndedAt>Date.now()-50)&&(e.inputState.compositionPendingChange=!1,o+=".compose",e.inputState.compositionFirstChange&&(o+=".start",e.inputState.compositionFirstChange=!1));return s.update(n,{userEvent:o,scrollIntoView:!0})}(e,i,n));return e.state.facet(Ft).some((t=>t(e,i.from,i.to,o,l)))||e.dispatch(l()),!0}if(n&&!n.main.eq(s)){let t=!1,i="select";return e.inputState.lastSelectionTime>Date.now()-50&&("select"==e.inputState.lastSelectionOrigin&&(t=!0),i=e.inputState.lastSelectionOrigin),e.dispatch({selection:n,scrollIntoView:t,userEvent:i}),!0}return!1}const os={childList:!0,characterData:!0,subtree:!0,attributes:!0,characterDataOldValue:!0},ls=ht.ie&&ht.ie_version<=11;class as{constructor(e){this.view=e,this.active=!1,this.selectionRange=new We,this.selectionChanged=!1,this.delayedFlush=-1,this.resizeTimeout=-1,this.queue=[],this.delayedAndroidKey=null,this.flushingAndroidKey=-1,this.lastChange=0,this.scrollTargets=[],this.intersection=null,this.resizeScroll=null,this.intersecting=!1,this.gapIntersection=null,this.gaps=[],this.parentCheck=-1,this.dom=e.contentDOM,this.observer=new MutationObserver((t=>{for(let e of t)this.queue.push(e);(ht.ie&&ht.ie_version<=11||ht.ios&&e.composing)&&t.some((e=>"childList"==e.type&&e.removedNodes.length||"characterData"==e.type&&e.oldValue.length>e.target.nodeValue.length))?this.flushSoon():this.flush()})),ls&&(this.onCharData=e=>{this.queue.push({target:e.target,type:"characterData",oldValue:e.prevValue}),this.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.onResize=this.onResize.bind(this),this.onPrint=this.onPrint.bind(this),this.onScroll=this.onScroll.bind(this),"function"==typeof ResizeObserver&&(this.resizeScroll=new ResizeObserver((()=>{var e;(null===(e=this.view.docView)||void 0===e?void 0:e.lastUpdate)<Date.now()-75&&this.onResize()})),this.resizeScroll.observe(e.scrollDOM)),this.addWindowListeners(this.win=e.win),this.start(),"function"==typeof IntersectionObserver&&(this.intersection=new IntersectionObserver((e=>{this.parentCheck<0&&(this.parentCheck=setTimeout(this.listenForScroll.bind(this),1e3)),e.length>0&&e[e.length-1].intersectionRatio>0!=this.intersecting&&(this.intersecting=!this.intersecting,this.intersecting!=this.view.inView&&this.onScrollChanged(document.createEvent("Event")))}),{threshold:[0,.001]}),this.intersection.observe(this.dom),this.gapIntersection=new IntersectionObserver((e=>{e.length>0&&e[e.length-1].intersectionRatio>0&&this.onScrollChanged(document.createEvent("Event"))}),{})),this.listenForScroll(),this.readSelectionRange()}onScrollChanged(e){this.view.inputState.runHandlers("scroll",e),this.intersecting&&this.view.measure()}onScroll(e){this.intersecting&&this.flush(!1),this.onScrollChanged(e)}onResize(){this.resizeTimeout<0&&(this.resizeTimeout=setTimeout((()=>{this.resizeTimeout=-1,this.view.requestMeasure()}),50))}onPrint(){this.view.viewState.printing=!0,this.view.measure(),setTimeout((()=>{this.view.viewState.printing=!1,this.view.requestMeasure()}),500)}updateGaps(e){if(this.gapIntersection&&(e.length!=this.gaps.length||this.gaps.some(((t,i)=>t!=e[i])))){this.gapIntersection.disconnect();for(let t of e)this.gapIntersection.observe(t);this.gaps=e}}onSelectionChange(e){let t=this.selectionChanged;if(!this.readSelectionRange()||this.delayedAndroidKey)return;let{view:i}=this,n=this.selectionRange;if(i.state.facet(Gt)?i.root.activeElement!=this.dom:!Ne(i.dom,n))return;let s=n.anchorNode&&i.docView.nearest(n.anchorNode);s&&s.ignoreEvent(e)?t||(this.selectionChanged=!1):(ht.ie&&ht.ie_version<=11||ht.android&&ht.chrome)&&!i.state.selection.main.empty&&n.focusNode&&Ee(n.focusNode,n.focusOffset,n.anchorNode,n.anchorOffset)?this.flushSoon():this.flush(!1)}readSelectionRange(){let{view:e}=this,t=ht.safari&&11==e.root.nodeType&&function(e){let t=e.activeElement;for(;t&&t.shadowRoot;)t=t.shadowRoot.activeElement;return t}(this.dom.ownerDocument)==this.dom&&function(e){let t=null;function i(e){e.preventDefault(),e.stopImmediatePropagation(),t=e.getTargetRanges()[0]}if(e.contentDOM.addEventListener("beforeinput",i,!0),e.dom.ownerDocument.execCommand("indent"),e.contentDOM.removeEventListener("beforeinput",i,!0),!t)return null;let n=t.startContainer,s=t.startOffset,r=t.endContainer,o=t.endOffset,l=e.docView.domAtPos(e.state.selection.main.anchor);Ee(l.node,l.offset,r,o)&&([n,s,r,o]=[r,o,n,s]);return{anchorNode:n,anchorOffset:s,focusNode:r,focusOffset:o}}(this.view)||Te(e.root);if(!t||this.selectionRange.eq(t))return!1;let i=Ne(this.dom,t);return i&&!this.selectionChanged&&e.inputState.lastFocusTime>Date.now()-200&&e.inputState.lastTouchTime<Date.now()-300&&function(e,t){let i=t.focusNode,n=t.focusOffset;if(!i||t.anchorNode!=i||t.anchorOffset!=n)return!1;for(n=Math.min(n,Pe(i));;)if(n){if(1!=i.nodeType)return!1;let e=i.childNodes[n-1];"false"==e.contentEditable?n--:(i=e,n=Pe(i))}else{if(i==e)return!0;n=Be(i),i=i.parentNode}}(this.dom,t)?(this.view.inputState.lastFocusTime=0,e.docView.updateSelection(),!1):(this.selectionRange.setRange(t),i&&(this.selectionChanged=!0),!0)}setSelectionRange(e,t){this.selectionRange.set(e.node,e.offset,t.node,t.offset),this.selectionChanged=!1}clearSelectionRange(){this.selectionRange.set(null,0,null,0)}listenForScroll(){this.parentCheck=-1;let e=0,t=null;for(let i=this.dom;i;)if(1==i.nodeType)!t&&e<this.scrollTargets.length&&this.scrollTargets[e]==i?e++:t||(t=this.scrollTargets.slice(0,e)),t&&t.push(i),i=i.assignedSlot||i.parentNode;else{if(11!=i.nodeType)break;i=i.host}if(e<this.scrollTargets.length&&!t&&(t=this.scrollTargets.slice(0,e)),t){for(let e of this.scrollTargets)e.removeEventListener("scroll",this.onScroll);for(let e of this.scrollTargets=t)e.addEventListener("scroll",this.onScroll)}}ignore(e){if(!this.active)return e();try{return this.stop(),e()}finally{this.start(),this.clear()}}start(){this.active||(this.observer.observe(this.dom,os),ls&&this.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.active=!0)}stop(){this.active&&(this.active=!1,this.observer.disconnect(),ls&&this.dom.removeEventListener("DOMCharacterDataModified",this.onCharData))}clear(){this.processRecords(),this.queue.length=0,this.selectionChanged=!1}delayAndroidKey(e,t){var i;if(!this.delayedAndroidKey){let e=()=>{let e=this.delayedAndroidKey;if(e){this.clearDelayedAndroidKey(),this.view.inputState.lastKeyCode=e.keyCode,this.view.inputState.lastKeyTime=Date.now(),!this.flush()&&e.force&&Ie(this.dom,e.key,e.keyCode)}};this.flushingAndroidKey=this.view.win.requestAnimationFrame(e)}this.delayedAndroidKey&&"Enter"!=e||(this.delayedAndroidKey={key:e,keyCode:t,force:this.lastChange<Date.now()-50||!!(null===(i=this.delayedAndroidKey)||void 0===i?void 0:i.force)})}clearDelayedAndroidKey(){this.win.cancelAnimationFrame(this.flushingAndroidKey),this.delayedAndroidKey=null,this.flushingAndroidKey=-1}flushSoon(){this.delayedFlush<0&&(this.delayedFlush=this.view.win.requestAnimationFrame((()=>{this.delayedFlush=-1,this.flush()})))}forceFlush(){this.delayedFlush>=0&&(this.view.win.cancelAnimationFrame(this.delayedFlush),this.delayedFlush=-1),this.flush()}pendingRecords(){for(let e of this.observer.takeRecords())this.queue.push(e);return this.queue}processRecords(){let e=this.pendingRecords();e.length&&(this.queue=[]);let t=-1,i=-1,n=!1;for(let s of e){let e=this.readMutation(s);e&&(e.typeOver&&(n=!0),-1==t?({from:t,to:i}=e):(t=Math.min(e.from,t),i=Math.max(e.to,i)))}return{from:t,to:i,typeOver:n}}readChange(){let{from:e,to:t,typeOver:i}=this.processRecords(),n=this.selectionChanged&&Ne(this.dom,this.selectionRange);if(e<0&&!n)return null;e>-1&&(this.lastChange=Date.now()),this.view.inputState.lastFocusTime=0,this.selectionChanged=!1;let s=new ss(this.view,e,t,i);return this.view.docView.domChanged={newSel:s.newSel?s.newSel.main:null},s}flush(e=!0){if(this.delayedFlush>=0||this.delayedAndroidKey)return!1;e&&this.readSelectionRange();let t=this.readChange();if(!t)return this.view.requestMeasure(),!1;let i=this.view.state,n=rs(this.view,t);return this.view.state==i&&this.view.update([]),n}readMutation(e){let t=this.view.docView.nearest(e.target);if(!t||t.ignoreMutation(e))return null;if(t.markDirty("attributes"==e.type),"attributes"==e.type&&(t.flags|=4),"childList"==e.type){let i=hs(t,e.previousSibling||e.target.previousSibling,-1),n=hs(t,e.nextSibling||e.target.nextSibling,1);return{from:i?t.posAfter(i):t.posAtStart,to:n?t.posBefore(n):t.posAtEnd,typeOver:!1}}return"characterData"==e.type?{from:t.posAtStart,to:t.posAtEnd,typeOver:e.target.nodeValue==e.oldValue}:null}setWindow(e){e!=this.win&&(this.removeWindowListeners(this.win),this.win=e,this.addWindowListeners(this.win))}addWindowListeners(e){e.addEventListener("resize",this.onResize),e.addEventListener("beforeprint",this.onPrint),e.addEventListener("scroll",this.onScroll),e.document.addEventListener("selectionchange",this.onSelectionChange)}removeWindowListeners(e){e.removeEventListener("scroll",this.onScroll),e.removeEventListener("resize",this.onResize),e.removeEventListener("beforeprint",this.onPrint),e.document.removeEventListener("selectionchange",this.onSelectionChange)}destroy(){var e,t,i;this.stop(),null===(e=this.intersection)||void 0===e||e.disconnect(),null===(t=this.gapIntersection)||void 0===t||t.disconnect(),null===(i=this.resizeScroll)||void 0===i||i.disconnect();for(let e of this.scrollTargets)e.removeEventListener("scroll",this.onScroll);this.removeWindowListeners(this.win),clearTimeout(this.parentCheck),clearTimeout(this.resizeTimeout),this.win.cancelAnimationFrame(this.delayedFlush),this.win.cancelAnimationFrame(this.flushingAndroidKey)}}function hs(e,t,i){for(;t;){let n=Ge.get(t);if(n&&n.parent==e)return n;let s=t.parentNode;t=s!=e.dom?s:i>0?t.nextSibling:t.previousSibling}return null}class cs{get state(){return this.viewState.state}get viewport(){return this.viewState.viewport}get visibleRanges(){return this.viewState.visibleRanges}get inView(){return this.viewState.inView}get composing(){return this.inputState.composing>0}get compositionStarted(){return this.inputState.composing>=0}get root(){return this._root}get win(){return this.dom.ownerDocument.defaultView||window}constructor(e={}){this.plugins=[],this.pluginMap=new Map,this.editorAttrs={},this.contentAttrs={},this.bidiCache=[],this.destroyed=!1,this.updateState=2,this.measureScheduled=-1,this.measureRequests=[],this.contentDOM=document.createElement("div"),this.scrollDOM=document.createElement("div"),this.scrollDOM.tabIndex=-1,this.scrollDOM.className="cm-scroller",this.scrollDOM.appendChild(this.contentDOM),this.announceDOM=document.createElement("div"),this.announceDOM.style.cssText="position: fixed; top: -10000px",this.announceDOM.setAttribute("aria-live","polite"),this.dom=document.createElement("div"),this.dom.appendChild(this.announceDOM),this.dom.appendChild(this.scrollDOM);let{dispatch:t}=e;this.dispatchTransactions=e.dispatchTransactions||t&&(e=>e.forEach((e=>t(e,this))))||(e=>this.update(e)),this.dispatch=this.dispatch.bind(this),this._root=e.root||function(e){for(;e;){if(e&&(9==e.nodeType||11==e.nodeType&&e.host))return e;e=e.assignedSlot||e.parentNode}return null}(e.parent)||document,this.viewState=new Wn(e.state||x.create(e)),this.plugins=this.state.facet(Ut).map((e=>new Zt(e)));for(let e of this.plugins)e.update(this);this.observer=new as(this),this.inputState=new qi(this),this.inputState.ensureHandlers(this.plugins),this.docView=new Mi(this),this.mountStyles(),this.updateAttrs(),this.updateState=0,this.requestMeasure(),e.parent&&e.parent.appendChild(this.dom)}dispatch(...e){let t=1==e.length&&e[0]instanceof k?e:1==e.length&&Array.isArray(e[0])?e[0]:[this.state.update(...e)];this.dispatchTransactions(t,this)}update(e){if(0!=this.updateState)throw new Error("Calls to EditorView.update are not allowed while an update is in progress");let t,i=!1,n=!1,s=this.state;for(let t of e){if(t.startState!=s)throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");s=t.state}if(this.destroyed)return void(this.viewState.state=s);let r=this.hasFocus,o=0,l=null;e.some((e=>e.annotation(pn)))?(this.inputState.notifiedFocused=r,o=1):r!=this.inputState.notifiedFocused&&(this.inputState.notifiedFocused=r,l=mn(s,r),l||(o=1));let a=this.observer.delayedAndroidKey,h=null;if(a?(this.observer.clearDelayedAndroidKey(),h=this.observer.readChange(),(h&&!this.state.doc.eq(s.doc)||!this.state.selection.eq(s.selection))&&(h=null)):this.observer.clear(),s.facet(x.phrases)!=this.state.facet(x.phrases))return this.setState(s);t=ai.create(this,s,e),t.flags|=o;let c=this.viewState.scrollTarget;try{this.updateState=2;for(let t of e){if(c&&(c=c.map(t.changes)),t.scrollIntoView){let{main:e}=t.state.selection;c=new qt(e.empty?e:y.cursor(e.head,e.head>e.anchor?-1:1))}for(let e of t.effects)e.is(Kt)&&(c=e.value)}this.viewState.update(t,c),this.bidiCache=fs.update(this.bidiCache,t.changes),t.empty||(this.updatePlugins(t),this.inputState.update(t)),i=this.docView.update(t),this.state.facet(oi)!=this.styleModules&&this.mountStyles(),n=this.updateAttrs(),this.showAnnouncements(e),this.docView.updateSelection(i,e.some((e=>e.isUserEvent("select.pointer"))))}finally{this.updateState=0}if(t.startState.facet(Kn)!=t.state.facet(Kn)&&(this.viewState.mustMeasureContent=!0),(i||n||c||this.viewState.mustEnforceCursorAssoc||this.viewState.mustMeasureContent)&&this.requestMeasure(),!t.empty)for(let e of this.state.facet(zt))e(t);(l||h)&&Promise.resolve().then((()=>{l&&this.state==l.startState&&this.dispatch(l),h&&!rs(this,h)&&a.force&&Ie(this.contentDOM,a.key,a.keyCode)}))}setState(e){if(0!=this.updateState)throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");if(this.destroyed)return void(this.viewState.state=e);this.updateState=2;let t=this.hasFocus;try{for(let e of this.plugins)e.destroy(this);this.viewState=new Wn(e),this.plugins=e.facet(Ut).map((e=>new Zt(e))),this.pluginMap.clear();for(let e of this.plugins)e.update(this);this.docView=new Mi(this),this.inputState.ensureHandlers(this.plugins),this.mountStyles(),this.updateAttrs(),this.bidiCache=[]}finally{this.updateState=0}t&&this.focus(),this.requestMeasure()}updatePlugins(e){let t=e.startState.facet(Ut),i=e.state.facet(Ut);if(t!=i){let n=[];for(let s of i){let i=t.indexOf(s);if(i<0)n.push(new Zt(s));else{let t=this.plugins[i];t.mustUpdate=e,n.push(t)}}for(let t of this.plugins)t.mustUpdate!=e&&t.destroy(this);this.plugins=n,this.pluginMap.clear()}else for(let t of this.plugins)t.mustUpdate=e;for(let e=0;e<this.plugins.length;e++)this.plugins[e].update(this);t!=i&&this.inputState.ensureHandlers(this.plugins)}measure(e=!0){if(this.destroyed)return;if(this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.observer.delayedAndroidKey)return this.measureScheduled=-1,void this.requestMeasure();this.measureScheduled=0,e&&this.observer.forceFlush();let t=null,i=this.scrollDOM,n=i.scrollTop*this.scaleY,{scrollAnchorPos:s,scrollAnchorHeight:r}=this.viewState;Math.abs(n-this.viewState.scrollTop)>1&&(r=-1),this.viewState.scrollAnchorHeight=-1;try{for(let e=0;;e++){if(r<0)if(qe(i))s=-1,r=this.viewState.heightMap.height;else{let e=this.viewState.scrollAnchorAt(n);s=e.from,r=e.top}this.updateState=1;let o=this.viewState.measure(this);if(!o&&!this.measureRequests.length&&null==this.viewState.scrollTarget)break;if(e>5){console.warn(this.measureRequests.length?"Measure loop restarted more than 5 times":"Viewport failed to stabilize");break}let l=[];4&o||([this.measureRequests,l]=[l,this.measureRequests]);let a=l.map((e=>{try{return e.read(this)}catch(e){return jt(this.state,e),us}})),h=ai.create(this,this.state,[]),c=!1;h.flags|=o,t?t.flags|=o:t=h,this.updateState=2,h.empty||(this.updatePlugins(h),this.inputState.update(h),this.updateAttrs(),c=this.docView.update(h));for(let e=0;e<l.length;e++)if(a[e]!=us)try{let t=l[e];t.write&&t.write(a[e],this)}catch(e){jt(this.state,e)}if(c&&this.docView.updateSelection(!0),!h.viewportChanged&&0==this.measureRequests.length){if(this.viewState.editorHeight){if(this.viewState.scrollTarget){this.docView.scrollIntoView(this.viewState.scrollTarget),this.viewState.scrollTarget=null;continue}{let e=(s<0?this.viewState.heightMap.height:this.viewState.lineBlockAt(s).top)-r;if(e>1||e<-1){n+=e,i.scrollTop=n/this.scaleY,r=-1;continue}}}break}}}finally{this.updateState=0,this.measureScheduled=-1}if(t&&!t.empty)for(let e of this.state.facet(zt))e(t)}get themeClasses(){return Gn+" "+(this.state.facet(jn)?Un:Yn)+" "+this.state.facet(Kn)}updateAttrs(){let e=gs(this,Jt,{class:"cm-editor"+(this.hasFocus?" cm-focused ":" ")+this.themeClasses}),t={spellcheck:"false",autocorrect:"off",autocapitalize:"off",translate:"no",contenteditable:this.state.facet(Gt)?"true":"false",class:"cm-content",style:`${ht.tabSize}: ${this.state.tabSize}`,role:"textbox","aria-multiline":"true"};this.state.readOnly&&(t["aria-readonly"]="true"),gs(this,Qt,t);let i=this.observer.ignore((()=>{let i=yt(this.contentDOM,this.contentAttrs,t),n=yt(this.dom,this.editorAttrs,e);return i||n}));return this.editorAttrs=e,this.contentAttrs=t,i}showAnnouncements(e){let t=!0;for(let i of e)for(let e of i.effects)if(e.is(cs.announce)){t&&(this.announceDOM.textContent=""),t=!1,this.announceDOM.appendChild(document.createElement("div")).textContent=e.value}}mountStyles(){this.styleModules=this.state.facet(oi);let e=this.state.facet(cs.cspNonce);ye.mount(this.root,this.styleModules.concat(Jn).reverse(),e?{nonce:e}:void 0)}readMeasured(){if(2==this.updateState)throw new Error("Reading the editor layout isn't allowed during an update");0==this.updateState&&this.measureScheduled>-1&&this.measure(!1)}requestMeasure(e){if(this.measureScheduled<0&&(this.measureScheduled=this.win.requestAnimationFrame((()=>this.measure()))),e){if(this.measureRequests.indexOf(e)>-1)return;if(null!=e.key)for(let t=0;t<this.measureRequests.length;t++)if(this.measureRequests[t].key===e.key)return void(this.measureRequests[t]=e);this.measureRequests.push(e)}}plugin(e){let t=this.pluginMap.get(e);return(void 0===t||t&&t.spec!=e)&&this.pluginMap.set(e,t=this.plugins.find((t=>t.spec==e))||null),t&&t.update(this).value}get documentTop(){return this.contentDOM.getBoundingClientRect().top+this.viewState.paddingTop}get documentPadding(){return{top:this.viewState.paddingTop,bottom:this.viewState.paddingBottom}}get scaleX(){return this.viewState.scaleX}get scaleY(){return this.viewState.scaleY}elementAtHeight(e){return this.readMeasured(),this.viewState.elementAtHeight(e)}lineBlockAtHeight(e){return this.readMeasured(),this.viewState.lineBlockAtHeight(e)}get viewportLineBlocks(){return this.viewState.viewportLines}lineBlockAt(e){return this.viewState.lineBlockAt(e)}get contentHeight(){return this.viewState.contentHeight}moveByChar(e,t,i){return $i(this,e,_i(this,e,t,i))}moveByGroup(e,t){return $i(this,e,_i(this,e,t,(t=>function(e,t,i){let n=e.state.charCategorizer(t),s=n(i);return e=>{let t=n(e);return s==B.Space&&(s=t),s==t}}(this,e.head,t))))}moveToLineBoundary(e,t,i=!0){return Fi(this,e,t,i)}moveVertically(e,t,i){return $i(this,e,function(e,t,i,n){let s=t.head,r=i?1:-1;if(s==(i?e.state.doc.length:0))return y.cursor(s,t.assoc);let o,l=t.goalColumn,a=e.contentDOM.getBoundingClientRect(),h=e.coordsAtPos(s,t.assoc||-1),c=e.documentTop;if(h)null==l&&(l=h.left-a.left),o=r<0?h.top:h.bottom;else{let t=e.viewState.lineBlockAt(s);null==l&&(l=Math.min(a.right-a.left,e.defaultCharacterWidth*(s-t.from))),o=(r<0?t.top:t.bottom)+c}let d=a.left+l,u=null!=n?n:e.viewState.heightOracle.textHeight>>1;for(let t=0;;t+=10){let i=o+(u+t)*r,n=Vi(e,{x:d,y:i},!1,r);if(i<a.top||i>a.bottom||(r<0?n<s:n>s)){let t=e.docView.coordsForChar(n),s=!t||i<t.top?-1:1;return y.cursor(n,s,void 0,l)}}}(this,e,t,i))}domAtPos(e){return this.docView.domAtPos(e)}posAtDOM(e,t=0){return this.docView.posFromDOM(e,t)}posAtCoords(e,t=!0){return this.readMeasured(),Vi(this,e,t)}coordsAtPos(e,t=1){this.readMeasured();let i=this.docView.coordsAt(e,t);if(!i||i.left==i.right)return i;let n=this.state.doc.lineAt(e),s=this.bidiSpans(n);return Re(i,s[vi.find(s,e-n.from,-1,t)].dir==hi.LTR==t>0)}coordsForChar(e){return this.readMeasured(),this.docView.coordsForChar(e)}get defaultCharacterWidth(){return this.viewState.heightOracle.charWidth}get defaultLineHeight(){return this.viewState.heightOracle.lineHeight}get textDirection(){return this.viewState.defaultTextDirection}textDirectionAt(e){return!this.state.facet(It)||e<this.viewport.from||e>this.viewport.to?this.textDirection:(this.readMeasured(),this.docView.textDirectionAt(e))}get lineWrapping(){return this.viewState.heightOracle.lineWrapping}bidiSpans(e){if(e.length>ds)return Si(e.length);let t,i=this.textDirectionAt(e.from);for(let n of this.bidiCache)if(n.from==e.from&&n.dir==i&&(n.fresh||wi(n.isolates,t=ni(this,e.from,e.to))))return n.order;t||(t=ni(this,e.from,e.to));let n=function(e,t,i){if(!e)return[new vi(0,0,t==di?1:0)];if(t==ci&&!i.length&&!bi.test(e))return Si(e.length);if(i.length)for(;e.length>yi.length;)yi[yi.length]=256;let n=[],s=t==ci?0:1;return ki(e,s,s,i,0,e.length,n),n}(e.text,i,t);return this.bidiCache.push(new fs(e.from,e.to,i,t,!0,n)),n}get hasFocus(){var e;return(this.dom.ownerDocument.hasFocus()||ht.safari&&(null===(e=this.inputState)||void 0===e?void 0:e.lastContextMenu)>Date.now()-3e4)&&this.root.activeElement==this.contentDOM}focus(){this.observer.ignore((()=>{Fe(this.contentDOM),this.docView.updateSelection()}))}setRoot(e){this._root!=e&&(this._root=e,this.observer.setWindow((9==e.nodeType?e:e.ownerDocument).defaultView||window),this.mountStyles())}destroy(){for(let e of this.plugins)e.destroy(this);this.plugins=[],this.inputState.destroy(),this.dom.remove(),this.observer.destroy(),this.measureScheduled>-1&&this.win.cancelAnimationFrame(this.measureScheduled),this.destroyed=!0}static scrollIntoView(e,t={}){return Kt.of(new qt("number"==typeof e?y.cursor(e):e,t.y,t.x,t.yMargin,t.xMargin))}static domEventHandlers(e){return Xt.define((()=>({})),{eventHandlers:e})}static domEventObservers(e){return Xt.define((()=>({})),{eventObservers:e})}static theme(e,t){let i=ye.newName(),n=[Kn.of(i),oi.of(Zn(`.${i}`,e))];return t&&t.dark&&n.push(jn.of(!0)),n}static baseTheme(e){return S.lowest(oi.of(Zn("."+Gn,e,Xn)))}static findFromDOM(e){var t;let i=e.querySelector(".cm-content"),n=i&&Ge.get(i)||Ge.get(e);return(null===(t=null==n?void 0:n.rootView)||void 0===t?void 0:t.view)||null}}cs.styleModule=oi,cs.inputHandler=Ft,cs.focusChangeEffect=_t,cs.perLineTextDirection=It,cs.exceptionSink=Vt,cs.updateListener=zt,cs.editable=Gt,cs.mouseSelectionStyle=Wt,cs.dragMovesSelection=Ht,cs.clickAddsSelectionRange=Rt,cs.decorations=ei,cs.atomicRanges=ti,cs.bidiIsolatedRanges=ii,cs.scrollMargins=si,cs.darkTheme=jn,cs.cspNonce=C.define({combine:e=>e.length?e[0]:""}),cs.contentAttributes=Qt,cs.editorAttributes=Jt,cs.lineWrapping=cs.contentAttributes.of({class:"cm-lineWrapping"}),cs.announce=A.define();const ds=4096,us={};class fs{constructor(e,t,i,n,s,r){this.from=e,this.to=t,this.dir=i,this.isolates=n,this.fresh=s,this.order=r}static update(e,t){if(t.empty&&!e.some((e=>e.fresh)))return e;let i=[],n=e.length?e[e.length-1].dir:hi.LTR;for(let s=Math.max(0,e.length-10);s<e.length;s++){let r=e[s];r.dir!=n||t.touchesRange(r.from,r.to)||i.push(new fs(t.mapPos(r.from,1),t.mapPos(r.to,-1),r.dir,r.isolates,!1,r.order))}return i}}function gs(e,t,i){for(let n=e.state.facet(t),s=n.length-1;s>=0;s--){let t=n[s],r="function"==typeof t?t(e):t;r&&bt(r,i)}return i}ht.ios;class ps extends M{compare(e){return this==e||this.constructor==e.constructor&&this.eq(e)}eq(e){return!1}destroy(e){}}ps.prototype.elementClass="",ps.prototype.toDOM=void 0,ps.prototype.mapMode=w.TrackBefore,ps.prototype.startSide=ps.prototype.endSide=-1,ps.prototype.point=!0;const ms=1024;let bs=0;class vs{constructor(e={}){this.id=bs++,this.perNode=!!e.perNode,this.deserialize=e.deserialize||(()=>{throw new Error("This node type doesn't define a deserialize function")})}add(e){if(this.perNode)throw new RangeError("Can't add per-node props to node types");return"function"!=typeof e&&(e=xs.match(e)),t=>{let i=e(t);return void 0===i?null:[this,i]}}}vs.closedBy=new vs({deserialize:e=>e.split(" ")}),vs.openedBy=new vs({deserialize:e=>e.split(" ")}),vs.group=new vs({deserialize:e=>e.split(" ")}),vs.contextHash=new vs({perNode:!0}),vs.lookAhead=new vs({perNode:!0}),vs.mounted=new vs({perNode:!0});class ws{constructor(e,t,i){this.tree=e,this.overlay=t,this.parser=i}static get(e){return e&&e.props&&e.props[vs.mounted.id]}}const ys=Object.create(null);class xs{constructor(e,t,i,n=0){this.name=e,this.props=t,this.id=i,this.flags=n}static define(e){let t=e.props&&e.props.length?Object.create(null):ys,i=(e.top?1:0)|(e.skipped?2:0)|(e.error?4:0)|(null==e.name?8:0),n=new xs(e.name||"",t,e.id,i);if(e.props)for(let i of e.props)if(Array.isArray(i)||(i=i(n)),i){if(i[0].perNode)throw new RangeError("Can't store a per-node prop on a node type");t[i[0].id]=i[1]}return n}prop(e){return this.props[e.id]}get isTop(){return(1&this.flags)>0}get isSkipped(){return(2&this.flags)>0}get isError(){return(4&this.flags)>0}get isAnonymous(){return(8&this.flags)>0}is(e){if("string"==typeof e){if(this.name==e)return!0;let t=this.prop(vs.group);return!!t&&t.indexOf(e)>-1}return this.id==e}static match(e){let t=Object.create(null);for(let i in e)for(let n of i.split(" "))t[n]=e[i];return e=>{for(let i=e.prop(vs.group),n=-1;n<(i?i.length:0);n++){let s=t[n<0?e.name:i[n]];if(s)return s}}}}xs.none=new xs("",Object.create(null),0,8);const ks=new WeakMap,Ss=new WeakMap;var Cs;!function(e){e[e.ExcludeBuffers=1]="ExcludeBuffers",e[e.IncludeAnonymous=2]="IncludeAnonymous",e[e.IgnoreMounts=4]="IgnoreMounts",e[e.IgnoreOverlays=8]="IgnoreOverlays"}(Cs||(Cs={}));class As{constructor(e,t,i,n,s){if(this.type=e,this.children=t,this.positions=i,this.length=n,this.props=null,s&&s.length){this.props=Object.create(null);for(let[e,t]of s)this.props["number"==typeof e?e:e.id]=t}}toString(){let e=ws.get(this);if(e&&!e.overlay)return e.tree.toString();let t="";for(let e of this.children){let i=e.toString();i&&(t&&(t+=","),t+=i)}return this.type.name?(/\W/.test(this.type.name)&&!this.type.isError?JSON.stringify(this.type.name):this.type.name)+(t.length?"("+t+")":""):t}cursor(e=0){return new Vs(this.topNode,e)}cursorAt(e,t=0,i=0){let n=ks.get(this)||this.topNode,s=new Vs(n);return s.moveTo(e,t),ks.set(this,s._tree),s}get topNode(){return new Es(this,0,0,null)}resolve(e,t=0){let i=Ns(ks.get(this)||this.topNode,e,t,!1);return ks.set(this,i),i}resolveInner(e,t=0){let i=Ns(Ss.get(this)||this.topNode,e,t,!0);return Ss.set(this,i),i}resolveStack(e,t=0){return function(e,t,i){let n=e.resolveInner(t,i),s=null;for(let e=n instanceof Es?n:n.context.parent;e;e=e.parent)if(e.index<0){let r=e.parent;(s||(s=[n])).push(r.resolve(t,i)),e=r}else{let r=ws.get(e.tree);if(r&&r.overlay&&r.overlay[0].from<=t&&r.overlay[r.overlay.length-1].to>=t){let o=new Es(r.tree,r.overlay[0].from+e.from,0,null);(s||(s=[n])).push(Ns(o,t,i,!1))}}return s?Hs(s):n}(this,e,t)}iterate(e){let{enter:t,leave:i,from:n=0,to:s=this.length}=e,r=e.mode||0,o=(r&Cs.IncludeAnonymous)>0;for(let e=this.cursor(r|Cs.IncludeAnonymous);;){let r=!1;if(e.from<=s&&e.to>=n&&(!o&&e.type.isAnonymous||!1!==t(e))){if(e.firstChild())continue;r=!0}for(;r&&i&&(o||!e.type.isAnonymous)&&i(e),!e.nextSibling();){if(!e.parent())return;r=!0}}}prop(e){return e.perNode?this.props?this.props[e.id]:void 0:this.type.prop(e)}get propValues(){let e=[];if(this.props)for(let t in this.props)e.push([+t,this.props[t]]);return e}balance(e={}){return this.children.length<=8?this:Is(xs.none,this.children,this.positions,0,this.children.length,0,this.length,((e,t,i)=>new As(this.type,e,t,i,this.propValues)),e.makeTree||((e,t,i)=>new As(xs.none,e,t,i)))}static build(e){return function(e){var t;let{buffer:i,nodeSet:n,maxBufferLength:s=ms,reused:r=[],minRepeatType:o=n.types.length}=e,l=Array.isArray(i)?new Ms(i,i.length):i,a=n.types,h=0,c=0;function d(e,t,i,b,v){let{id:w,start:y,end:x,size:k}=l,S=c;for(;k<0;){if(l.next(),-1==k){let t=r[w];return i.push(t),void b.push(y-e)}if(-3==k)return void(h=w);if(-4==k)return void(c=w);throw new RangeError(`Unrecognized record size: ${k}`)}let C,A,M=a[w],T=y-e;if(x-y<=s&&(A=p(l.pos-t,v))){let t=new Uint16Array(A.size-A.skip),i=l.pos-A.size,s=t.length;for(;l.pos>i;)s=m(A.start,t,s);C=new Ts(t,x-A.start,n),T=A.start-e}else{let e=l.pos-k;l.next();let t=[],i=[],n=w>=o?w:-1,r=0,a=x;for(;l.pos>e;)n>=0&&l.id==n&&l.size>=0?(l.end<=a-s&&(f(t,i,y,r,l.end,a,n,S),r=t.length,a=l.end),l.next()):d(y,e,t,i,n);if(n>=0&&r>0&&r<t.length&&f(t,i,y,r,y,a,n,S),t.reverse(),i.reverse(),n>-1&&r>0){let e=u(M);C=Is(M,t,i,0,t.length,0,x-y,e,e)}else C=g(M,t,i,x-y,S-x)}i.push(C),b.push(T)}function u(e){return(t,i,n)=>{let s,r,o=0,l=t.length-1;if(l>=0&&(s=t[l])instanceof As){if(!l&&s.type==e&&s.length==n)return s;(r=s.prop(vs.lookAhead))&&(o=i[l]+s.length+r)}return g(e,t,i,n,o)}}function f(e,t,i,s,r,o,l,a){let h=[],c=[];for(;e.length>s;)h.push(e.pop()),c.push(t.pop()+i-r);e.push(g(n.types[l],h,c,o-r,a-o)),t.push(r-i)}function g(e,t,i,n,s=0,r){if(h){let e=[vs.contextHash,h];r=r?[e].concat(r):[e]}if(s>25){let e=[vs.lookAhead,s];r=r?[e].concat(r):[e]}return new As(e,t,i,n,r)}function p(e,t){let i=l.fork(),n=0,r=0,a=0,h=i.end-s,c={size:0,start:0,skip:0};e:for(let s=i.pos-e;i.pos>s;){let e=i.size;if(i.id==t&&e>=0){c.size=n,c.start=r,c.skip=a,a+=4,n+=4,i.next();continue}let l=i.pos-e;if(e<0||l<s||i.start<h)break;let d=i.id>=o?4:0,u=i.start;for(i.next();i.pos>l;){if(i.size<0){if(-3!=i.size)break e;d+=4}else i.id>=o&&(d+=4);i.next()}r=u,n+=e,a+=d}return(t<0||n==e)&&(c.size=n,c.start=r,c.skip=a),c.size>4?c:void 0}function m(e,t,i){let{id:n,start:s,end:r,size:a}=l;if(l.next(),a>=0&&n<o){let o=i;if(a>4){let n=l.pos-(a-4);for(;l.pos>n;)i=m(e,t,i)}t[--i]=o,t[--i]=r-e,t[--i]=s-e,t[--i]=n}else-3==a?h=n:-4==a&&(c=n);return i}let b=[],v=[];for(;l.pos>0;)d(e.start||0,e.bufferStart||0,b,v,-1);let w=null!==(t=e.length)&&void 0!==t?t:b.length?v[0]+b[0].length:0;return new As(a[e.topID],b.reverse(),v.reverse(),w)}(e)}}As.empty=new As(xs.none,[],[],0);class Ms{constructor(e,t){this.buffer=e,this.index=t}get id(){return this.buffer[this.index-4]}get start(){return this.buffer[this.index-3]}get end(){return this.buffer[this.index-2]}get size(){return this.buffer[this.index-1]}get pos(){return this.index}next(){this.index-=4}fork(){return new Ms(this.buffer,this.index)}}class Ts{constructor(e,t,i){this.buffer=e,this.length=t,this.set=i}get type(){return xs.none}toString(){let e=[];for(let t=0;t<this.buffer.length;)e.push(this.childString(t)),t=this.buffer[t+3];return e.join(",")}childString(e){let t=this.buffer[e],i=this.buffer[e+3],n=this.set.types[t],s=n.name;if(/\W/.test(s)&&!n.isError&&(s=JSON.stringify(s)),i==(e+=4))return s;let r=[];for(;e<i;)r.push(this.childString(e)),e=this.buffer[e+3];return s+"("+r.join(",")+")"}findChild(e,t,i,n,s){let{buffer:r}=this,o=-1;for(let l=e;l!=t&&!(Os(s,n,r[l+1],r[l+2])&&(o=l,i>0));l=r[l+3]);return o}slice(e,t,i){let n=this.buffer,s=new Uint16Array(t-e),r=0;for(let o=e,l=0;o<t;){s[l++]=n[o++],s[l++]=n[o++]-i;let t=s[l++]=n[o++]-i;s[l++]=n[o++]-e,r=Math.max(r,t)}return new Ts(s,r,this.set)}}function Os(e,t,i,n){switch(e){case-2:return i<t;case-1:return n>=t&&i<t;case 0:return i<t&&n>t;case 1:return i<=t&&n>t;case 2:return n>t;case 4:return!0}}function Ns(e,t,i,n){for(var s;e.from==e.to||(i<1?e.from>=t:e.from>t)||(i>-1?e.to<=t:e.to<t);){let t=!n&&e instanceof Es&&e.index<0?null:e.parent;if(!t)return e;e=t}let r=n?0:Cs.IgnoreOverlays;if(n)for(let n=e,o=n.parent;o;n=o,o=n.parent)n instanceof Es&&n.index<0&&(null===(s=o.enter(t,i,r))||void 0===s?void 0:s.from)!=n.from&&(e=o);for(;;){let n=e.enter(t,i,r);if(!n)return e;e=n}}class Ds{cursor(e=0){return new Vs(this,e)}getChild(e,t=null,i=null){let n=Bs(this,e,t,i);return n.length?n[0]:null}getChildren(e,t=null,i=null){return Bs(this,e,t,i)}resolve(e,t=0){return Ns(this,e,t,!1)}resolveInner(e,t=0){return Ns(this,e,t,!0)}matchContext(e){return Ls(this,e)}enterUnfinishedNodesBefore(e){let t=this.childBefore(e),i=this;for(;t;){let e=t.lastChild;if(!e||e.to!=t.to)break;e.type.isError&&e.from==e.to?(i=t,t=e.prevSibling):t=e}return i}get node(){return this}get next(){return this.parent}}class Es extends Ds{constructor(e,t,i,n){super(),this._tree=e,this.from=t,this.index=i,this._parent=n}get type(){return this._tree.type}get name(){return this._tree.type.name}get to(){return this.from+this._tree.length}nextChild(e,t,i,n,s=0){for(let r=this;;){for(let{children:o,positions:l}=r._tree,a=t>0?o.length:-1;e!=a;e+=t){let a=o[e],h=l[e]+r.from;if(Os(n,i,h,h+a.length))if(a instanceof Ts){if(s&Cs.ExcludeBuffers)continue;let o=a.findChild(0,a.buffer.length,t,i-h,n);if(o>-1)return new Rs(new Ps(r,a,e,h),null,o)}else if(s&Cs.IncludeAnonymous||!a.type.isAnonymous||zs(a)){let o;if(!(s&Cs.IgnoreMounts)&&(o=ws.get(a))&&!o.overlay)return new Es(o.tree,h,e,r);let l=new Es(a,h,e,r);return s&Cs.IncludeAnonymous||!l.type.isAnonymous?l:l.nextChild(t<0?a.children.length-1:0,t,i,n)}}if(s&Cs.IncludeAnonymous||!r.type.isAnonymous)return null;if(e=r.index>=0?r.index+t:t<0?-1:r._parent._tree.children.length,r=r._parent,!r)return null}}get firstChild(){return this.nextChild(0,1,0,4)}get lastChild(){return this.nextChild(this._tree.children.length-1,-1,0,4)}childAfter(e){return this.nextChild(0,1,e,2)}childBefore(e){return this.nextChild(this._tree.children.length-1,-1,e,-2)}enter(e,t,i=0){let n;if(!(i&Cs.IgnoreOverlays)&&(n=ws.get(this._tree))&&n.overlay){let i=e-this.from;for(let{from:e,to:s}of n.overlay)if((t>0?e<=i:e<i)&&(t<0?s>=i:s>i))return new Es(n.tree,n.overlay[0].from+this.from,-1,this)}return this.nextChild(0,1,e,t,i)}nextSignificantParent(){let e=this;for(;e.type.isAnonymous&&e._parent;)e=e._parent;return e}get parent(){return this._parent?this._parent.nextSignificantParent():null}get nextSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index+1,1,0,4):null}get prevSibling(){return this._parent&&this.index>=0?this._parent.nextChild(this.index-1,-1,0,4):null}get tree(){return this._tree}toTree(){return this._tree}toString(){return this._tree.toString()}}function Bs(e,t,i,n){let s=e.cursor(),r=[];if(!s.firstChild())return r;if(null!=i)for(;!s.type.is(i);)if(!s.nextSibling())return r;for(;;){if(null!=n&&s.type.is(n))return r;if(s.type.is(t)&&r.push(s.node),!s.nextSibling())return null==n?r:[]}}function Ls(e,t,i=t.length-1){for(let n=e.parent;i>=0;n=n.parent){if(!n)return!1;if(!n.type.isAnonymous){if(t[i]&&t[i]!=n.name)return!1;i--}}return!0}class Ps{constructor(e,t,i,n){this.parent=e,this.buffer=t,this.index=i,this.start=n}}class Rs extends Ds{get name(){return this.type.name}get from(){return this.context.start+this.context.buffer.buffer[this.index+1]}get to(){return this.context.start+this.context.buffer.buffer[this.index+2]}constructor(e,t,i){super(),this.context=e,this._parent=t,this.index=i,this.type=e.buffer.set.types[e.buffer.buffer[i]]}child(e,t,i){let{buffer:n}=this.context,s=n.findChild(this.index+4,n.buffer[this.index+3],e,t-this.context.start,i);return s<0?null:new Rs(this.context,this,s)}get firstChild(){return this.child(1,0,4)}get lastChild(){return this.child(-1,0,4)}childAfter(e){return this.child(1,e,2)}childBefore(e){return this.child(-1,e,-2)}enter(e,t,i=0){if(i&Cs.ExcludeBuffers)return null;let{buffer:n}=this.context,s=n.findChild(this.index+4,n.buffer[this.index+3],t>0?1:-1,e-this.context.start,t);return s<0?null:new Rs(this.context,this,s)}get parent(){return this._parent||this.context.parent.nextSignificantParent()}externalSibling(e){return this._parent?null:this.context.parent.nextChild(this.context.index+e,e,0,4)}get nextSibling(){let{buffer:e}=this.context,t=e.buffer[this.index+3];return t<(this._parent?e.buffer[this._parent.index+3]:e.buffer.length)?new Rs(this.context,this._parent,t):this.externalSibling(1)}get prevSibling(){let{buffer:e}=this.context,t=this._parent?this._parent.index+4:0;return this.index==t?this.externalSibling(-1):new Rs(this.context,this._parent,e.findChild(t,this.index,-1,0,4))}get tree(){return null}toTree(){let e=[],t=[],{buffer:i}=this.context,n=this.index+4,s=i.buffer[this.index+3];if(s>n){let r=i.buffer[this.index+1];e.push(i.slice(n,s,r)),t.push(0)}return new As(this.type,e,t,this.to-this.from)}toString(){return this.context.buffer.childString(this.index)}}function Hs(e){if(!e.length)return null;if(1==e.length)return e[0];let t=0,i=e[0];for(let n=1;n<e.length;n++){let s=e[n];(s.from>i.from||s.to<i.to)&&(i=s,t=n)}let n=i instanceof Es&&i.index<0?null:i.parent,s=e.slice();return n?s[t]=n:s.splice(t,1),new Ws(s,i)}class Ws{constructor(e,t){this.heads=e,this.node=t}get next(){return Hs(this.heads)}}class Vs{get name(){return this.type.name}constructor(e,t=0){if(this.mode=t,this.buffer=null,this.stack=[],this.index=0,this.bufferNode=null,e instanceof Es)this.yieldNode(e);else{this._tree=e.context.parent,this.buffer=e.context;for(let t=e._parent;t;t=t._parent)this.stack.unshift(t.index);this.bufferNode=e,this.yieldBuf(e.index)}}yieldNode(e){return!!e&&(this._tree=e,this.type=e.type,this.from=e.from,this.to=e.to,!0)}yieldBuf(e,t){this.index=e;let{start:i,buffer:n}=this.buffer;return this.type=t||n.set.types[n.buffer[e]],this.from=i+n.buffer[e+1],this.to=i+n.buffer[e+2],!0}yield(e){return!!e&&(e instanceof Es?(this.buffer=null,this.yieldNode(e)):(this.buffer=e.context,this.yieldBuf(e.index,e.type)))}toString(){return this.buffer?this.buffer.buffer.childString(this.index):this._tree.toString()}enterChild(e,t,i){if(!this.buffer)return this.yield(this._tree.nextChild(e<0?this._tree._tree.children.length-1:0,e,t,i,this.mode));let{buffer:n}=this.buffer,s=n.findChild(this.index+4,n.buffer[this.index+3],e,t-this.buffer.start,i);return!(s<0)&&(this.stack.push(this.index),this.yieldBuf(s))}firstChild(){return this.enterChild(1,0,4)}lastChild(){return this.enterChild(-1,0,4)}childAfter(e){return this.enterChild(1,e,2)}childBefore(e){return this.enterChild(-1,e,-2)}enter(e,t,i=this.mode){return this.buffer?!(i&Cs.ExcludeBuffers)&&this.enterChild(1,e,t):this.yield(this._tree.enter(e,t,i))}parent(){if(!this.buffer)return this.yieldNode(this.mode&Cs.IncludeAnonymous?this._tree._parent:this._tree.parent);if(this.stack.length)return this.yieldBuf(this.stack.pop());let e=this.mode&Cs.IncludeAnonymous?this.buffer.parent:this.buffer.parent.nextSignificantParent();return this.buffer=null,this.yieldNode(e)}sibling(e){if(!this.buffer)return!!this._tree._parent&&this.yield(this._tree.index<0?null:this._tree._parent.nextChild(this._tree.index+e,e,0,4,this.mode));let{buffer:t}=this.buffer,i=this.stack.length-1;if(e<0){let e=i<0?0:this.stack[i]+4;if(this.index!=e)return this.yieldBuf(t.findChild(e,this.index,-1,0,4))}else{let e=t.buffer[this.index+3];if(e<(i<0?t.buffer.length:t.buffer[this.stack[i]+3]))return this.yieldBuf(e)}return i<0&&this.yield(this.buffer.parent.nextChild(this.buffer.index+e,e,0,4,this.mode))}nextSibling(){return this.sibling(1)}prevSibling(){return this.sibling(-1)}atLastNode(e){let t,i,{buffer:n}=this;if(n){if(e>0){if(this.index<n.buffer.buffer.length)return!1}else for(let e=0;e<this.index;e++)if(n.buffer.buffer[e+3]<this.index)return!1;({index:t,parent:i}=n)}else({index:t,_parent:i}=this._tree);for(;i;({index:t,_parent:i}=i))if(t>-1)for(let n=t+e,s=e<0?-1:i._tree.children.length;n!=s;n+=e){let e=i._tree.children[n];if(this.mode&Cs.IncludeAnonymous||e instanceof Ts||!e.type.isAnonymous||zs(e))return!1}return!0}move(e,t){if(t&&this.enterChild(e,0,4))return!0;for(;;){if(this.sibling(e))return!0;if(this.atLastNode(e)||!this.parent())return!1}}next(e=!0){return this.move(1,e)}prev(e=!0){return this.move(-1,e)}moveTo(e,t=0){for(;(this.from==this.to||(t<1?this.from>=e:this.from>e)||(t>-1?this.to<=e:this.to<e))&&this.parent(););for(;this.enterChild(1,e,t););return this}get node(){if(!this.buffer)return this._tree;let e=this.bufferNode,t=null,i=0;if(e&&e.context==this.buffer)e:for(let n=this.index,s=this.stack.length;s>=0;){for(let r=e;r;r=r._parent)if(r.index==n){if(n==this.index)return r;t=r,i=s+1;break e}n=this.stack[--s]}for(let e=i;e<this.stack.length;e++)t=new Rs(this.buffer,t,this.stack[e]);return this.bufferNode=new Rs(this.buffer,t,this.index)}get tree(){return this.buffer?null:this._tree._tree}iterate(e,t){for(let i=0;;){let n=!1;if(this.type.isAnonymous||!1!==e(this)){if(this.firstChild()){i++;continue}this.type.isAnonymous||(n=!0)}for(;n&&t&&t(this),n=this.type.isAnonymous,!this.nextSibling();){if(!i)return;this.parent(),i--,n=!0}}}matchContext(e){if(!this.buffer)return Ls(this.node,e);let{buffer:t}=this.buffer,{types:i}=t.set;for(let n=e.length-1,s=this.stack.length-1;n>=0;s--){if(s<0)return Ls(this.node,e,n);let r=i[t.buffer[this.stack[s]]];if(!r.isAnonymous){if(e[n]&&e[n]!=r.name)return!1;n--}}return!0}}function zs(e){return e.children.some((e=>e instanceof Ts||!e.type.isAnonymous||zs(e)))}const Fs=new WeakMap;function _s(e,t){if(!e.isAnonymous||t instanceof Ts||t.type!=e)return 1;let i=Fs.get(t);if(null==i){i=1;for(let n of t.children){if(n.type!=e||!(n instanceof As)){i=1;break}i+=_s(e,n)}Fs.set(t,i)}return i}function Is(e,t,i,n,s,r,o,l,a){let h=0;for(let i=n;i<s;i++)h+=_s(e,t[i]);let c=Math.ceil(1.5*h/8),d=[],u=[];return function t(i,n,s,o,l){for(let h=s;h<o;){let s=h,f=n[h],g=_s(e,i[h]);for(h++;h<o;h++){let t=_s(e,i[h]);if(g+t>=c)break;g+=t}if(h==s+1){if(g>c){let e=i[s];t(e.children,e.positions,0,e.children.length,n[s]+l);continue}d.push(i[s])}else{let t=n[h-1]+i[h-1].length-f;d.push(Is(e,i,n,s,h,f,t,null,a))}u.push(f+l-r)}}(t,i,n,s,0),(l||a)(d,u,o)}new vs({perNode:!0});let $s=0;class qs{constructor(e,t,i){this.set=e,this.base=t,this.modified=i,this.id=$s++}static define(e){if(null==e?void 0:e.base)throw new Error("Can not derive from a modified tag");let t=new qs([],null,[]);if(t.set.push(t),e)for(let i of e.set)t.set.push(i);return t}static defineModifier(){let e=new js;return t=>t.modified.indexOf(e)>-1?t:js.get(t.base||t,t.modified.concat(e).sort(((e,t)=>e.id-t.id)))}}let Ks=0;class js{constructor(){this.instances=[],this.id=Ks++}static get(e,t){if(!t.length)return e;let i=t[0].instances.find((i=>{return i.base==e&&(n=t,s=i.modified,n.length==s.length&&n.every(((e,t)=>e==s[t])));var n,s}));if(i)return i;let n=[],s=new qs(n,e,t);for(let e of t)e.instances.push(s);let r=function(e){let t=[[]];for(let i=0;i<e.length;i++)for(let n=0,s=t.length;n<s;n++)t.push(t[n].concat(e[i]));return t.sort(((e,t)=>t.length-e.length))}(t);for(let t of e.set)if(!t.modified.length)for(let e of r)n.push(js.get(t,e));return s}}new vs;const Gs=qs.define,Ys=Gs(),Us=Gs(),Xs=Gs(Us),Zs=Gs(Us),Js=Gs(),Qs=Gs(Js),er=Gs(Js),tr=Gs(),ir=Gs(tr),nr=Gs(),sr=Gs(),rr=Gs(),or=Gs(rr),lr=Gs(),ar={comment:Ys,lineComment:Gs(Ys),blockComment:Gs(Ys),docComment:Gs(Ys),name:Us,variableName:Gs(Us),typeName:Xs,tagName:Gs(Xs),propertyName:Zs,attributeName:Gs(Zs),className:Gs(Us),labelName:Gs(Us),namespace:Gs(Us),macroName:Gs(Us),literal:Js,string:Qs,docString:Gs(Qs),character:Gs(Qs),attributeValue:Gs(Qs),number:er,integer:Gs(er),float:Gs(er),bool:Gs(Js),regexp:Gs(Js),escape:Gs(Js),color:Gs(Js),url:Gs(Js),keyword:nr,self:Gs(nr),null:Gs(nr),atom:Gs(nr),unit:Gs(nr),modifier:Gs(nr),operatorKeyword:Gs(nr),controlKeyword:Gs(nr),definitionKeyword:Gs(nr),moduleKeyword:Gs(nr),operator:sr,derefOperator:Gs(sr),arithmeticOperator:Gs(sr),logicOperator:Gs(sr),bitwiseOperator:Gs(sr),compareOperator:Gs(sr),updateOperator:Gs(sr),definitionOperator:Gs(sr),typeOperator:Gs(sr),controlOperator:Gs(sr),punctuation:rr,separator:Gs(rr),bracket:or,angleBracket:Gs(or),squareBracket:Gs(or),paren:Gs(or),brace:Gs(or),content:tr,heading:ir,heading1:Gs(ir),heading2:Gs(ir),heading3:Gs(ir),heading4:Gs(ir),heading5:Gs(ir),heading6:Gs(ir),contentSeparator:Gs(tr),list:Gs(tr),quote:Gs(tr),emphasis:Gs(tr),strong:Gs(tr),link:Gs(tr),monospace:Gs(tr),strikethrough:Gs(tr),inserted:Gs(),deleted:Gs(),changed:Gs(),invalid:Gs(),meta:lr,documentMeta:Gs(lr),annotation:Gs(lr),processingInstruction:Gs(lr),definition:qs.defineModifier(),constant:qs.defineModifier(),function:qs.defineModifier(),standard:qs.defineModifier(),local:qs.defineModifier(),special:qs.defineModifier()};!function(e,t){let i=Object.create(null);for(let t of e)if(Array.isArray(t.tag))for(let e of t.tag)i[e.id]=t.class;else i[t.tag.id]=t.class;let{scope:n,all:s=null}=t||{}}([{tag:ar.link,class:"tok-link"},{tag:ar.heading,class:"tok-heading"},{tag:ar.emphasis,class:"tok-emphasis"},{tag:ar.strong,class:"tok-strong"},{tag:ar.keyword,class:"tok-keyword"},{tag:ar.atom,class:"tok-atom"},{tag:ar.bool,class:"tok-bool"},{tag:ar.url,class:"tok-url"},{tag:ar.labelName,class:"tok-labelName"},{tag:ar.inserted,class:"tok-inserted"},{tag:ar.deleted,class:"tok-deleted"},{tag:ar.literal,class:"tok-literal"},{tag:ar.string,class:"tok-string"},{tag:ar.number,class:"tok-number"},{tag:[ar.regexp,ar.escape,ar.special(ar.string)],class:"tok-string2"},{tag:ar.variableName,class:"tok-variableName"},{tag:ar.local(ar.variableName),class:"tok-variableName tok-local"},{tag:ar.definition(ar.variableName),class:"tok-variableName tok-definition"},{tag:ar.special(ar.variableName),class:"tok-variableName2"},{tag:ar.definition(ar.propertyName),class:"tok-propertyName tok-definition"},{tag:ar.typeName,class:"tok-typeName"},{tag:ar.namespace,class:"tok-namespace"},{tag:ar.className,class:"tok-className"},{tag:ar.macroName,class:"tok-macroName"},{tag:ar.propertyName,class:"tok-propertyName"},{tag:ar.operator,class:"tok-operator"},{tag:ar.comment,class:"tok-comment"},{tag:ar.meta,class:"tok-meta"},{tag:ar.invalid,class:"tok-invalid"},{tag:ar.punctuation,class:"tok-punctuation"}]);const hr="#cccccc",cr=(e,t="default")=>{const i={theme:e,variant:t,selected:"unselected"},n=R("codeTextColor")(i)??hr,s=R("codeFunctionColor")(i)??hr,r=R("codeStringColor")(i)??hr,o=R("codeConstantColor")(i)??hr,l=R("codeKeywordColor")(i)??hr,a=R("codeBackgroundColor")(i)??hr,h=R("codePanelBackgroundColor")(i)??hr,c="#2c313a",d="#353a42",u="#528bff",f=cs.theme({"&":{color:n,backgroundColor:a},".cm-content":{caretColor:u},".cm-scroller":{"font-family":"Roboto Mono, monospace","font-weight":300},".cm-cursor, .cm-dropCursor":{borderLeftColor:u},"&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection":{backgroundColor:"#3E4451"},".cm-panels":{backgroundColor:h,color:n},".cm-panels.cm-panels-top":{borderBottom:"2px solid black"},".cm-panels.cm-panels-bottom":{borderTop:"2px solid black"},".cm-searchMatch":{backgroundColor:"#72a1ff59",outline:"1px solid #457dff"},".cm-searchMatch.cm-searchMatch-selected":{backgroundColor:"#6199ff2f"},".cm-activeLine":{backgroundColor:"#6699ff0b"},".cm-selectionMatch":{backgroundColor:"#aafe661a"},"&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket":{backgroundColor:"#bad0f847"},".cm-gutters":{backgroundColor:a,color:n,border:"none"},".cm-activeLineGutter":{backgroundColor:c},".cm-foldPlaceholder":{backgroundColor:"transparent",border:"none",color:"#ddd"},".cm-tooltip":{border:"none",backgroundColor:d},".cm-tooltip .cm-tooltip-arrow:before":{borderTopColor:"transparent",borderBottomColor:"transparent"},".cm-tooltip .cm-tooltip-arrow:after":{borderTopColor:d,borderBottomColor:d},".cm-tooltip-autocomplete":{"& > ul > li[aria-selected]":{backgroundColor:c,color:n}}},{dark:!0}),g=m.define([{tag:ar.keyword,color:l},{tag:[ar.name,ar.deleted,ar.character,ar.propertyName,ar.macroName],color:n},{tag:[ar.function(ar.variableName),ar.labelName],color:s},{tag:[ar.color,ar.constant(ar.name),ar.standard(ar.name)],color:o},{tag:[ar.definition(ar.name),ar.separator],color:n},{tag:[ar.typeName,ar.className,ar.number,ar.changed,ar.annotation,ar.modifier,ar.self,ar.namespace],color:o},{tag:[ar.operator,ar.operatorKeyword,ar.url,ar.escape,ar.regexp,ar.link,ar.special(ar.string)],color:n},{tag:[ar.meta,ar.comment],color:n},{tag:ar.strong,fontWeight:"bold"},{tag:ar.emphasis,fontStyle:"italic"},{tag:ar.strikethrough,textDecoration:"line-through"},{tag:ar.link,color:n,textDecoration:"underline"},{tag:ar.heading,fontWeight:"bold",color:r},{tag:[ar.atom,ar.bool,ar.special(ar.variableName)],color:o},{tag:[ar.processingInstruction,ar.string,ar.inserted],color:r},{tag:ar.invalid,color:"#ffffff"}]);return[f,b(g)]},dr=r((function({className:t,block:i,extensions:n,onClick:s,onChange:r,editable:o},l){const a=f();let h="";i.spans.forEach((e=>{h+=e.content}));let u=[];return void 0!==n&&(u=u.concat(n)),u.push(c()),e.createElement("div",{ref:l,key:i.uuid,className:V("aics-code-block",t,i.classNames),onClick:e=>{void 0!==s&&s(e)}},e.createElement(d,{value:h,basicSetup:!1,theme:void 0!==i.variant?cr(a,i.variant):cr(a),editable:o,extensions:u,onChange:(e,t)=>{void 0!==r&&r(e,t)}}))}));dr.displayName="CodeBlock";const ur=g(dr)`
  background-color: ${R("codeBackgroundColor")};
  font-size: 9.5pt;
  padding: 0;
  border-radius: 4px;

  & .cm-editor {
    border-radius: 3px;
    padding: 8px 0 8px 8px;
  }
`,fr=(e,t,i)=>{if(void 0===e.icons[t])throw new Error(`Icon ${t} not found`);if(void 0===e.icons[t][i])throw new Error(`Icon ${t} does not have ${i} defined`);return`url('data:image/svg+xml;utf8,${e.icons[t][i]}')`};const gr=(e,t,i)=>n=>{let s;if("function"==typeof e?s=e(n):("function"==typeof t&&(t=t(n)),s=fr(n.theme,e,t)),void 0!==s){let e;e="function"==typeof i?i(n):L(n.theme,i),void 0!==e&&e.startsWith("#")&&(e=function(e){if(7!==e.length)throw new Error("Only six-digit hex colors are allowed.");const t=e.match(/[a-f,A-F,0-9]{1,2}/g);if(null!==t&&3===t.length){const e=[parseInt(t[0],16),parseInt(t[1],16),parseInt(t[2],16)];return`rgb(${e[0]} ${e[1]} ${e[2]})`}throw new Error("Not a valid hex color")}(e)),s=s.replace(/fill="[^"]+"/g,`fill="${e}"`)}return s??""},pr=r((function({className:t,block:i,collapsed:s,setCollapsed:r,onTransitionEnd:h},c){const{factory:d}=o(ne),u=l(null),f=a((()=>{if(null!=u.current)if(!0===s){const e=-(u.current.offsetHeight+40);u.current.setAttribute("style","margin-top: "+e+"px")}else u.current.setAttribute("style","margin-top: 0px")}),[u,s]);n((()=>{f()}),[]),n((()=>{f()}),[s,f]);const g=e=>{void 0!==r&&void 0!==s&&(r(!s),e.stopPropagation())};return e.createElement("div",{ref:c,className:((e,t,i)=>V("aics-collapsible-block",e,t.classNames,(()=>!0===i?["collapsed"]:[]),(()=>void 0!==t.icon?["has-icon"]:[])))(t,i,s),key:i.uuid},e.createElement("div",{className:"aics-collapsible-block-header"},e.createElement("div",{className:"aics-collapsible-block-control",onClick:g},e.createElement("span",null)),e.createElement("div",{className:"aics-collapsible-block-title",onClick:g},i.name)),e.createElement("div",{className:"aics-collapsible-block-content"},e.createElement("div",{className:"aics-collapsible-block-inner",ref:u,onTransitionEnd:h},d?.buildAll(i.children,i))))}));pr.displayName="CollapsibleBlock";const mr=g(pr)`
position: relative;

  &.collapsed {
    > .aics-collapsible-block-inner {
      margin-top: 0;
      transition: margin-top ease 0.2s;
    }

    > .aics-collapsible-block-header > .aics-collapsible-block-control ::before {
      transform: rotate(0deg);
    }

    > .aics-collapsible-block-content {
      margin: 0;
    }
  }

  & > .aics-collapsible-block-header {
    position: relative;
    font-size: ${R("fontSize")};

    > .aics-collapsible-block-control ::before {
      transition: all 0.2s;
      transform: rotate(90deg);
    }
  }

  & .aics-collapsible-block-control {
    position: absolute;
    top: 0;
    left: 4px;
    background-color: transparent;
    border: none;
    color: ${R("textColor")};
    padding: 0;
    margin: 0;
    font-size: 11pt;
    vertical-align: text-top;
    
    transition: all 0.2s;
    outline: 0;
    width: 20px;
    height: 20px;
    display: inline-block;

    :focus {
      outline: 0;
    }

    ::before {
      content: '';
      display: inline-block;
      width: 20px;
      height: 20px;
      background-image: ${gr("right",20,R("secondaryTextColor"))};
      background-repeat: no-repeat;
    }
  }

  & .aics-collapsible-block-title {
    display: inline-block;
    margin: 2px 0;
    padding: ${R("collapsibleTitlePadding")};
    color: ${R("collapsibleTextColor")};
    font-family: ${R("collapsibleFontFamily")};
    font-size: ${R("collaspibleFontSize")};
    font-weight: ${R("collapsibleFontWeight")};
    user-select: none;
    position: relative;

    :focus {
      outline: 0;
    }

    
  }

  &.has-icon .aics-collapsible-block-title {
    padding-left: 44px;
    background-position: 24px center;
    background-size: contain;
    background-image: ${e=>void 0!==e.block.icon?gr(e.block.icon,20,R("textColor")):""};
    background-repeat: no-repeat;
  }

  & .aics-collapsible-block-content {
    overflow: hidden;
    margin: ${R("collapsiblePadding")};
    font-size: ${R("fontSize")};
  }

  & .aics-collapsible-block-inner {
    font-size: ${R("fontSize")};
    transition: margin-top ease 0.2s;

    > .aics-collapsible-block {
      margin-top: 4px;
    }

    > .aics-paragraph {
      margin-left: 0;
      margin-right: 0;
    }
  }
`,br=r((function({className:t,block:i,onClick:n},s){const{factory:r}=o(ne);return e.createElement("div",{ref:s,key:i.uuid,className:((e,t)=>V("aics-content-block",t,e.classNames))(i,t),onClick:e=>{void 0!==n&&n(e)}},r?.buildAll(i.children,i))}));br.displayName="ContentBlock";const vr=g(br)`
font-family: ${R("fontFamily")};
font-weight: ${R("fontWeight")};
border-width: 1px;
border-style: solid;
border-radius: 4px;
margin: 4px 0;
color: ${R("textColor")};
background-color: ${R("contentBackgroundColor")};
border-color: ${R("borderColor")};

> .aics-list {
  margin: 8px 12px;
}
`,wr=r((function({className:t,block:i,onClick:n},s){return e.createElement("span",{ref:s,key:i.uuid,className:(r=i,V("aics-content-span",t,r.classNames,(()=>void 0!==r.datatype?[`aics-content-span-${r.datatype}`]:[]))),onClick:e=>{void 0!==n&&n(e)},dangerouslySetInnerHTML:{__html:i.content}});var r}));wr.displayName="ContentSpan";const yr=g(wr)`
  color: ${R("spanTextColor")};
  background-color: ${R("spanBackgroundColor")};
  border-radius: ${R("spanBorderRadius")};
  padding: ${R("spanPadding")};
  background-image: ${e=>{const t=R("spanIcon")(e);return void 0!==t?gr(t,12,R("spanTextColor"))(e):"none"}};
  background-repeat: no-repeat;
  background-position: 4px 1px;
  font-family: ${R("spanFontFamily")};
  font-weight: ${R("spanFontWeight")};
  font-size: ${R("spanFontSize")};

  a {
    color: ${R("spanTextColor")};
  }
`;var xr=Object.freeze({__proto__:null,darkTheme:pe,lightTheme:ge}),kr=Object.freeze({__proto__:null,darkTheme:me,lightTheme:fe});const Sr=r((function({className:t,block:i},n){const{factory:s}=o(ne);return e.createElement("div",{ref:n,className:V("aics-list",t,i.classNames),key:i.uuid},s?.buildAll(i.items,i))}));Sr.displayName="ListLayout";const Cr=g(Sr)`
margin: 4px 0;
`,Ar=r((function({className:t,block:i,selected:n,setSelected:s,collapsed:r,setCollapsed:l,variant:a},h){const{factory:c}=o(ne),d=new ie;return e.createElement("div",{className:(u=i,V("aics-list-item",u.classNames,t,(()=>u.selected?["selected"]:[]),(()=>(e=>{const t=c?.getParent(e),i=t.items.indexOf(e);if(i<0)return!1;for(let e=i+1;e<t.items.length;e++)if(d.run(t.items[e]).length>0)return!0;return!1})(u)?["before-selected"]:[]))),key:i.uuid},e.createElement(mr,{ref:h,block:i,selected:n,setSelected:s,collapsed:r,setCollapsed:l,variant:a}));var u}));Ar.displayName="ListItemLayout";const Mr=g(Ar)`
  padding: 4px 0;
  margin: 0;
  color: ${R("textColor")};
  background-color: ${R("contentBackgroundColor")};
  border-style: solid;
  border-color: ${R("borderColor")};
  border-top-width: 0;
  border-bottom-width: 1px;
  border-left-width: 1px;
  border-right-width: 1px;
  border-radius: 0;

  .selected & {
    color: ${e=>R("textColor",e.variant,!0)};
    background-color: ${e=>R("contentBackgroundColor",e.variant,!0)};
    border-color: ${e=>R("borderColor",e.variant,!0)};
  }

  & .aics-paragraph:first-child,
  & .aics-list:first-child,
  & .aics-collapsible-block:first-child {
      margin-top: 0;
  }

  & .aics-paragraph:last-child,
  & .aics-list:first-child,
  & .aics-collapsible-block:first-child {
      margin-bottom: 0;
  }

  &:first-child {
      border-top-left-radius: 4px;
      border-top-right-radius: 4px;
      border-top-width: 1px;
  }

  &:last-child {
      border-bottom-right-radius: 4px;
      border-bottom-left-radius: 4px;
  }

  &.before-selected {
    border-bottom-color: ${R("borderColor",null,!0)};
  }
`,Tr=r((function({className:t,block:i,onClick:n},s){const{factory:r}=o(ne),l=a((e=>{void 0!==n&&n(e)}),[n]);return e.createElement("div",{ref:s,key:i.uuid,className:((e,t)=>V("aics-paragraph",t,e.classNames))(i,t),onClick:l},e.createElement("span",null,r?.buildAll(i.spans,i)))}));Tr.displayName="ParagraphBlock";const Or=g(Tr)`
font-family: ${R("fontFamily")};
font-size: ${R("fontSize")};
margin: 12px 16px;


&.selected > span {
  color: ${R("spanTextColor")};
  background-color: ${R("spanBackgroundColor")};
}
`,Nr=r((function({block:t},i){return e.createElement("div",{ref:i,key:t.uuid,className:"aics-sentinal"})}));Nr.displayName="SentinalView";const Dr=r((function({className:t,block:i,onClick:n},s){const{factory:r}=o(ne),l=e=>V("aics-table-row",e.classNames),a=e=>V("aics-table-cell",e.classNames);return e.createElement("div",{ref:s,key:i.uuid,className:((e,t)=>V("aics-table",t,e.classNames))(i,t),onClick:e=>{void 0!==n&&n(e)}},i.rows.map((t=>e.createElement("div",{className:l(t),key:t.uuid},t.values.map((i=>e.createElement("div",{className:a(i),key:i.uuid},r?.build(i,t))))))))}));Dr.displayName="TableBlock";const Er=g(Dr)`
display: grid;
grid-template-columns: min-content 1fr;
gap: 0;
width: 100%;

.aics-table-row {
  display: contents;
}

.aics-table-row:hover > div {
  background-color: ${R("hoverColor")};
}

.aics-table-row:first-child {
  .aics-table-cell:first-child {
    border-top-left-radius: 4px;
    padding-top: 6px;
  }
  .aics-table-cell:last-child {
    border-top-right-radius: 4px;
    padding-top: 6px;
  }
}

.aics-table-row:last-child {
  .aics-table-cell:first-child {
    border-bottom-left-radius: 4px;
    padding-bottom: 6px;
  }
  .aics-table-cell:last-child {
    border-bottom-right-radius: 4px;
    padding-bottom: 6px;
  }
}

.aics-table-header {
  grid-column: auto;
  grid-row: auto;

  text-align: left;
  padding: 2px 16px 0 28px;
  color: ${R("fadedTextColor")};
  font-size: 9.5pt;
  font-weight: 500;
  width: 1%;
  vertical-align: top;
  white-space: nowrap;
}

.aics-table-cell {
  grid-column: auto;
  grid-row: auto;

  font-size: 11pt;

  .aics-paragraph {
    padding: 2px 0;
    margin: 4px;
  }
}

.aics-table-header {
  background-repeat: no-repeat;
  background-size: contain;
  white-space: nowrap;
}

.aics-table-header.aics-content-span-text {
  background-image: ${gr("text",12,R("fadedTextColor"))};
}

.aics-table-header.aics-content-span-number {
  background-image: ${gr("number",12,R("fadedTextColor"))};
}

.aics-table-header.aics-content-span-date {
  background-image: ${gr("date",12,R("fadedTextColor"))};
}
`,Br=({className:t,page:i,numPages:n,showEnds:s,setPage:r})=>{const[o,l]=e.useState(""),[a,h]=e.useState(""),[c,d]=e.useState(""),[u,f]=e.useState(""),g=(e,t)=>{t("pulse1"),setTimeout((()=>{t("")}),400)},p=e.useCallback((e=>{(e=Math.min(n,Math.max(1,e)))!==i&&r?.(e)}),[i,r]),m=e.useCallback((()=>{1!==i&&(p(1),g(0,l))}),[i,r]),b=e.useCallback((()=>{i!==n&&(p(n),g(0,f))}),[i,r]),v=e.useCallback((()=>{void 0!==i&&i>1&&(p(i-1),g(0,h))}),[i,r]),w=e.useCallback((()=>{void 0!==i&&i<n&&(p(i+1),g(0,d))}),[i,r]),y=(e,t,i)=>V((()=>1===t?["disabled"]:[]),"aics-pagination-start","aics-button-group-start",e),x=(e,t,i,n)=>V((()=>1===i?["disabled"]:[]),"aics-pagination-previous",(()=>t?[]:["aics-button-group-start"]),"aics-button-group-end",e),k=(e,t,i,n)=>V((()=>i===n?["disabled"]:[]),"aics-pagination-next","aics-button-group-start",(()=>t?[]:["aics-button-group-end"]),e),S=(e,t,i)=>V((()=>t===i?["disabled"]:[]),"aics-pagination-end","aics-button-group-end",e);return!0===s?e.createElement("div",{className:V("aics-pagination",t)},e.createElement("button",{className:y(o,i),title:"Return to start",onClick:m}),e.createElement("button",{className:x(a,s,i),title:"Previous",onClick:v}),e.createElement("span",{className:"aics-pagination-page"},i," of ",n),e.createElement("button",{className:k(c,s,i,n),title:"Next",onClick:w}),e.createElement("button",{className:S(u,i,n),title:"Jump to end",onClick:b})):e.createElement("div",{className:V("aics-pagination",t)},e.createElement("button",{className:x(a,!1,i),title:"Previous",onClick:v}),e.createElement("span",{className:"aics-pagination-page"},i," of ",n),e.createElement("button",{className:k(c,!1,i,n),title:"Next",onClick:w}))},Lr=g(Br)`
text-align: left;

.aics-pagination-page {
    vertical-align: top;
    line-height: 24px;
    margin: 0 8px;
    font-family: ${R("fontFamily",null,!1)};
    font-size: 10pt;
    font-variant-numeric: tabular-nums;
    color: ${R("textColor",null,!1)};
}
  
button {
    border: 0;
    background-color: ${R("buttonBgColor",null,!1)};
    color: ${R("secondaryTextColor",null,!1)};
    margin: 0 1px;
    width: 24px;
    height: 24px;
    background-repeat: no-repeat;
}

button.aics-button-group-start {
    border-top-left-radius: 4px;
    border-bottom-left-radius: 4px;
}

button.aics-button-group-end {
    border-top-right-radius: 4px;
    border-bottom-right-radius: 4px;
}
  
button:hover {
    background-color: ${R("buttonHoverBgColor",null,!1)};
}

button.disabled:hover {
  background-color: ${R("buttonBgColor",null,!1)};
}
  
button:focus {
    outline: 0;
}

button.pulse1 {
    animation-name: pulse1;
    animation-duration: 0.2s;
    animation-iteration-count: 1;
    animation-direction: alternate-reverse;
    animation-timing-function: ease;
}

button.disabled.pulse1 {
  animation-name: none;
}
  
@keyframes pulse1 {
    0% {}
    50% {
      background-color: ${R("buttonPulseBgColor",null,!1)};
    }
    100% {}
}

.aics-pagination-previous {
  background-image: ${gr("left",20,R("secondaryTextColor",null,!1))};
  background-position: 1px 2px;
}

.aics-pagination-previous.disabled {
  background-image: ${gr("left",20,R("fadedTextColor",null,!1))};
}

.aics-pagination-next {
  background-image: ${gr("right",20,R("secondaryTextColor",null,!1))};
  background-position: 2px 2px;
}

.aics-pagination-next.disabled {
  background-image: ${gr("right",20,R("fadedTextColor",null,!1))};
}

.aics-pagination-start {
  background-image: ${gr("start",20,R("secondaryTextColor",null,!1))};
  background-position: 2px 0;
  width: 28px;
  background-size: 24px;
}

.aics-pagination-start.disabled {
  background-image: ${gr("start",20,R("fadedTextColor",null,!1))};
}

.aics-pagination-end {
  background-image: ${gr("end",20,R("secondaryTextColor",null,!1))};
  background-position: 0;
  width: 28px;
  background-size: 24px;
}

.aics-pagination-end.disabled {
  background-image: ${gr("end",20,R("fadedTextColor",null,!1))};
}
`,Pr=r((function({className:t,block:i,level:n,page:s,setPage:r},l){const{factory:h}=o(ne),c=o(ae),d=new ie,u=(e,t)=>V("aics-tree",e.classNames,t,(()=>d.run(e).length>0?["selected"]:[]),(()=>void 0!==e.icon?["has-icon"]:[])),f=e=>V("aics-tree-node",e.classNames,t,(()=>d.run(e).length>0?["selected"]:[]),(()=>e instanceof Q?[]:["aics-tree-leaf-node"]),(()=>(e=>{const t=i.children.indexOf(e);if(t<0)return!1;for(let e=t+1;e<i.children.length;e++)if(d.run(i.children[e]).length>0)return!0;return!1})(e)?["before-selected"]:[])),g=a((()=>{const e=[];return i.children.forEach((t=>{void 0!==t.iteration&&t.iteration!==s||e.push(t)})),e}),[i,s]);return null!==c&&c.getNumPages(n)>1?e.createElement("div",{ref:l,key:i.uuid,className:u(i,t)},e.createElement("div",{className:"aics-tree-control"},e.createElement("span",null)),e.createElement("div",{className:"aics-tree-title"},e.createElement("label",{className:"aics-tree-page-label"},i.name),e.createElement(Lr,{level:n,page:s,numPages:c.getNumPages(n),setPage:r,key:i.uuid})),g().map((t=>e.createElement("div",{className:f(t),key:t.uuid},h?.build(t,i))))):e.createElement("div",{ref:l,key:i.uuid,className:V()},g().map((t=>e.createElement("div",{className:f(t),key:t.uuid},h?.build(t,i)))))}));Pr.displayName="TreeLayout";const Rr=u(Pr)`
position: relative;
margin-top: 12px;
margin-bottom: 12px;
margin-left: 0;
padding-left: 0;

.aics-tree-content {
  position: relative;
  margin-left: 24px;
}

& .aics-tree-title {
  position: relative;
  padding-left: 24px;
}

& .aics-tree-title > label {
  font-family: ${R("fontFamily")};
  font-size: 12pt;
  font-weight: 500;
  line-height: 24px;
  vertical-align: middle;
  color: ${R("textColor")};
  margin-right: 12px;
}

&.has-icon .aics-tree-title > label {
  padding-left: 26px;
  background-position: 4px center;
  background-size: contain;
  background-image: ${e=>void 0!==e.block.icon?gr(e.block.icon,24,R("textColor")):""};
  background-repeat: no-repeat;
}

.aics-pagination {
  display: inline-block;
  vertical-align: top;
}

& .aics-tree-node {
  display: block;
  position: relative;
  padding-left: 4px;
  margin: 0 0 0 8px;
}

& .aics-tree-leaf-node {
  padding-left: 24px;
}

& .aics-tree-node > .aics-tree {
  padding-left: 0px;
}

& .aics-tree-node {
  position: relative;
  border-left: 2px solid ${R("treeColor")};
}

& .aics-tree-node:last-child {
  border-color: transparent;
}

.aics-tree-node::before {
  content: "";
  display: block;
  position: absolute;
  z-index: -1;
  top: -19px;
  left: -2px;
  width: 10px;
  height: 32px;
  border: solid ${R("treeColor")};
  border-width: 0 0 2px 2px;
  border-bottom-left-radius: 6px;
}

.aics-tree-leaf-node::before {
  top: -12px;
}

.aics-tree-node:nth-child(3)::before {
  top: -10px;
  height: 30px;
}

& .aics-tree-title:focus {
  outline: none;
}

& .aics-tree-leaf-node::after {
  content: "";
  display: block;
  position: absolute;
  top: 17px;
  left: 9px;
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: ${R("treeColor")};
  z-index: 2;
}

& > .aics-tree-control > span {
  content: "";
  display: block;
  position: absolute;
  border-radius: 50%;
  z-index: 2;

  border: 2px solid ${R("treeColor")};
  left: 4px;
  top: 9px;
  width: 6px;
  height: 6px;
  background: transparent;
}

&.selected
  > .aics-tree-title::before,
&
  > .selected
  > .aics-tree-title::before {
  background-color: ${R("selectedTreeColor")};
}

& .before-selected {
  border-color: ${R("selectedTreeColor")};
}

&.selected
  > .aics-tree-control
  > span {
    border-color: ${R("selectedTreeColor")};
}

& > .selected::after {
  background: ${R("selectedTreeColor")};
}

& > .selected::before {
  border-color: ${R("selectedTreeColor")};
  z-index: 1;
}

& .aics-tree-title::before {
  z-index: 1;
  content: " ";
  position: absolute;
  top: 18px;
  left: 8px;
  background-color: ${R("treeColor")};
  background-clip: content-box;
  width: 2px;
  height: 18px;
}

`;function Hr(t){const i=r((function(i,r){const o=i,[l,a]=s(o.block.collapsed);n((()=>{void 0!==o.collapsed&&a(o.collapsed)}),[o.collapsed]),n((()=>{o.block.collapsed=l}),[l]);return e.createElement(t,{...o,ref:r,collapsed:l,setCollapsed:e=>{a(e),o.block.collapsed=e,void 0!==o.setCollapsed&&o.setCollapsed(e)},className:V(o.className,(()=>l?["collapsed"]:[]))})})),o=t.displayName??t.name??"Component";return i.displayName=`withCollapsible(${o})`,i}function Wr(e,t){return null!==e?e.pages[t-1]:1}function Vr(t){const i=r((function(i,s){const r=i,l=o(ae),a=o(he);n((()=>{let e=1;r.block.children.forEach((t=>{void 0===t.iteration?t.iteration=1:t.iteration>e&&(e=t.iteration)})),null===a||null!==l&&l.numPages[r.level-1]===e||a({type:"register",level:r.level,numPages:e})}),[r.level,a]);const h=e=>{r.block.page=e,null!==a&&Wr(l,r.level)!==e&&(a({type:"goto",page:e,level:r.level}),r.block.page=e,void 0!==r.setPage&&r.setPage(e))},c=new ie;return n((()=>{const e=Wr(l,r.level);null!==e&&c.run(r.block,e).length>0&&r.block.children.forEach((t=>{void 0!==t.iteration&&c.run(t,e).length>0&&h(t.iteration)}))}),[l]),e.createElement(t,{...r,ref:s,page:Wr(l,r.level),setPage:h,classNames:V(r.className,(()=>{return e=l,t=r.level,(null!==e?e.numPages[t-1]:1)>1?["aics-paginated"]:[];var e,t}))})})),s=t.displayName??t.name??"Component";return i.displayName=`withPageable(${s})`,i}function zr(t){const i=r((function(i,r){const o=i;console.log("WithSelectable",o);const[l,a]=s(o.block.selected);n((()=>{void 0!==o.selected&&a(o.selected)}),[o.selected]),n((()=>{o.block.selected=l}),[l]);return e.createElement(t,{...o,ref:r,selected:l,setSelected:e=>{a(e),o.block.selected=e,void 0!==o.setSelected&&o.setSelected(e)},className:V(o.className,(()=>l?["selected"]:[]))})})),o=t.displayName??t.name??"Component";return i.displayName=`withSelectable(${o})`,i}const Fr=(t,i)=>{const n=r((function(n,s){const{darkMode:r}=e.useContext(se),[o,l]=e.useState(i.lightTheme);return e.useEffect((()=>{null!=r&&l(r?i.darkTheme:i.lightTheme)}),[r]),e.createElement(p,{theme:o},e.createElement(t,{...n,ref:s}))})),s=t.displayName??t.name??"Component";return n.displayName=`withTheme(${s})`,n},_r=t=>{const i=r((function(i,n){const s=l(null);return h(s,(()=>({scrollIntoView:e=>{s.current?.scrollIntoView({behavior:"smooth",block:"center"})}}))),e.createElement(t,{...i,ref:s})})),n=t.displayName??t.name??"Component";return i.displayName=`withRef(${n})`,i};class Ir{block_types=[];builders=[];parentByBlock=new Map;themes=new Map;constructor(){this.registerBuilder(K,this.buildListItem),this.registerBuilder(q,this.buildCollapsible),this.registerBuilder($,this.buildContent),this.registerBuilder(_,this.buildSection),this.registerBuilder(I,this.buildCode),this.registerBuilder(G,this.buildList),this.registerBuilder(U,this.buildSpan),this.registerBuilder(F,this.buildSelectable),this.registerBuilder(Q,this.buildTree),this.registerBuilder(Z,this.buildTable),this.registerTheme("default",fe,me),this.registerTheme("blue",ge,pe)}registerBuilder(e,t){this.block_types.push(e),this.builders.push(t.bind(this))}registerTheme(e,t,i){this.themes.set(e,[t,i])}getTheme(e){if(""===e&&(e="default"),!this.themes.has(e))throw new Error("Theme not found: "+e);return this.themes.get(e)}getParent(e){return this.parentByBlock.get(e)}setParent(e,t){this.parentByBlock.set(e,t)}getTreeLevel(e){let t=1,i=this.getParent(e);for(;void 0!==i&&i instanceof Q;)t++,i=this.getParent(i);return t}build(e,t){for(let i=0;i<this.builders.length;i++){const n=this.block_types[i],s=this.builders[i];if(e.constructor.name===n.name){void 0!==t&&this.setParent(e,t);return s(e)}}throw new Error("Builder not found for: "+e.constructor.name)}buildAll(e,t){const i=[];return e.forEach((e=>{i.push(this.build(e,t))})),i}getClassNames(e,t){const i=new Set(Array.from(e.classNames));return Array.from(i)}withTheme(e,t){if(void 0!==t.block.theme){const i=this.themes.get(t.block.theme);if(void 0===i)throw new Error(`Theme not found: ${t.block.theme}`);return Fr(e,{lightTheme:i[0],darkTheme:i[1]})}return e}withSelectable(e){return zr(e)}withCollapsible(e){return Hr(e)}withPageable(e){return Vr(e)}buildCollapsible(t){const i=_r(mr),n=this.withTheme(i,{block:t}),s=this.withCollapsible(n),r=this.withSelectable(s);return e.createElement(r,{block:t,variant:t.variant})}buildListItem(t){const i=_r(Mr),n=this.withTheme(i,{block:t}),s=this.withCollapsible(n),r=this.withSelectable(s);return e.createElement(r,{block:t,variant:t.variant})}buildContent(t){const i=_r(vr),n=this.withTheme(i,{block:t}),s=this.withSelectable(n);return e.createElement(s,{block:t,variant:t.variant})}buildSection(t){const i=_r(Or),n=this.withTheme(i,{block:t}),s=this.withSelectable(n);return e.createElement(s,{block:t,variant:t.variant})}buildCode(t){const i=_r(ur),n=this.withTheme(i,{block:t}),s=this.withSelectable(n);return e.createElement(s,{block:t,editable:!1,variant:t.variant})}buildList(t){const i=_r(Cr),n=this.withTheme(i,{block:t});return e.createElement(n,{block:t,variant:t.variant})}buildSpan(t){const i=_r(yr),n=this.withTheme(i,{block:t}),s=this.withSelectable(n);return e.createElement(s,{block:t,variant:t.variant})}buildSelectable(t){const i=_r(Nr),n=this.withTheme(i,{block:t}),s=this.withSelectable(n);return e.createElement(s,{block:t,variant:t.variant})}buildTree(t){const i=_r(Rr),n=this.withPageable(i),s=this.withTheme(n,{block:t}),r=this.getTreeLevel(t);return 1===r?e.createElement(ce,{pages:[1],numPages:[1]},e.createElement(s,{level:r,block:t,variant:t.variant})):e.createElement(s,{level:r,block:t})}buildTable(t){const i=_r(Er),n=this.withTheme(i,{block:t});return e.createElement(n,{block:t,variant:t.variant})}}export{z as Base,ee as BaseVisitor,ne as BlockFactoryContext,Y as Checklist,j as ChecklistItem,I as Code,ur as CodeBlock,q as Collapsible,mr as CollapsibleBlock,pr as CollapsibleBlockComponent,$ as Content,vr as ContentBlock,br as ContentBlockComponent,yr as ContentSpan,wr as ContentSpanComponent,se as DarkModeContext,Ir as DefaultBlockFactory,G as List,K as ListItem,Ar as ListItemComponent,Cr as ListLayout,Sr as ListLayoutComponent,Mr as ListLayoutItem,ae as NestedPaginationContext,he as NestedPaginationDispatchContext,ce as NestedPaginationProvider,le as NestedPaginationReducer,re as NestedPaginationState,J as Pageable,Lr as Pagination,Br as PaginationComponent,_ as Paragraph,Or as ParagraphBlock,F as Selectable,ie as SelectedVisitor,Nr as SentinalView,U as Span,Z as Table,Er as TableBlock,Dr as TableBlockComponent,X as TableRow,Q as Tree,Rr as TreeLayout,Pr as TreeLayoutComponent,te as VisibleVisitor,xr as blueTheme,cr as codeTheme,kr as defaultTheme,W as extendTheme,V as getClasses,L as getColor,P as getColors,fr as getIcon,gr as themedIcon,R as themedVariant,de as useDarkMode,ue as useStorybookDarkMode,Hr as withCollapsible,Vr as withPageable,_r as withRef,zr as withSelectable,Fr as withTheme};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
